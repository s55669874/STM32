
9-aht20oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  080082e0  080082e0  000092e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de4  08008de4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008de4  08008de4  00009de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dec  08008dec  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008df0  08008df0  00009df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008df4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  200001d4  08008fc8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08008fc8  0000a828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cc2  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2e  00000000  00000000  00011ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00013af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006aa  00000000  00000000  000143c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e2  00000000  00000000  00014a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c167  00000000  00000000  0002ce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ae6  00000000  00000000  00038fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdaa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  000bdae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000c12cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080082c8 	.word	0x080082c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080082c8 	.word	0x080082c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT20_Send>:
 * @param data 发送的数据
 * @param len 发送的数据长度
 * @return void
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void AHT20_Send(uint8_t *data, uint8_t len) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, data, len, HAL_MAX_DELAY);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	2170      	movs	r1, #112	@ 0x70
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <AHT20_Send+0x28>)
 80010ac:	f001 fab8 	bl	8002620 <HAL_I2C_Master_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f8 	.word	0x200001f8

080010bc <AHT20_Receive>:
 * @param data 接收数据的缓冲区
 * @param len 接收数据的长度
 * @return void
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void AHT20_Receive(uint8_t *data, uint8_t len) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, data, len, HAL_MAX_DELAY);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	2170      	movs	r1, #112	@ 0x70
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <AHT20_Receive+0x28>)
 80010d8:	f001 fba0 	bl	800281c <HAL_I2C_Master_Receive>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f8 	.word	0x200001f8

080010e8 <AHT20_Init>:

/**
 * @brief AHT20初始化函数
 */
void AHT20_Init() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint8_t readBuffer;
  HAL_Delay(40);
 80010ee:	2028      	movs	r0, #40	@ 0x28
 80010f0:	f000 fec6 	bl	8001e80 <HAL_Delay>
  AHT20_Receive(&readBuffer, 1);
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	2101      	movs	r1, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffdf 	bl	80010bc <AHT20_Receive>
  if ((readBuffer & 0x08) == 0x00) {
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10c      	bne.n	8001122 <AHT20_Init+0x3a>
    uint8_t sendBuffer[3] = {0xBE, 0x08, 0x00};
 8001108:	4a08      	ldr	r2, [pc, #32]	@ (800112c <AHT20_Init+0x44>)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4611      	mov	r1, r2
 8001110:	8019      	strh	r1, [r3, #0]
 8001112:	3302      	adds	r3, #2
 8001114:	0c12      	lsrs	r2, r2, #16
 8001116:	701a      	strb	r2, [r3, #0]
    AHT20_Send(sendBuffer, 3);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2103      	movs	r1, #3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffb7 	bl	8001090 <AHT20_Send>
  }
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	080082e0 	.word	0x080082e0

08001130 <AHT20_Measure>:

/**
 * @brief AHT20测量函数
 * @note 测量完成后可以通过AHT20_Temperature()与AHT20_Humidity()获取温度与湿度数据
 */
void AHT20_Measure() {
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00};
 8001136:	4a2d      	ldr	r2, [pc, #180]	@ (80011ec <AHT20_Measure+0xbc>)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	4611      	mov	r1, r2
 8001140:	8019      	strh	r1, [r3, #0]
 8001142:	3302      	adds	r3, #2
 8001144:	0c12      	lsrs	r2, r2, #16
 8001146:	701a      	strb	r2, [r3, #0]
  uint8_t readBuffer[6];
  AHT20_Send(sendBuffer, 3);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2103      	movs	r1, #3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff9e 	bl	8001090 <AHT20_Send>
  HAL_Delay(75);
 8001154:	204b      	movs	r0, #75	@ 0x4b
 8001156:	f000 fe93 	bl	8001e80 <HAL_Delay>
  AHT20_Receive(readBuffer, 6);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2106      	movs	r1, #6
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ffac 	bl	80010bc <AHT20_Receive>

  if ((readBuffer[0] & 0x80) == 0x00) {
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	b25b      	sxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	db3a      	blt.n	80011e2 <AHT20_Measure+0xb2>
    float humi, temp;
    #ifdef __CMSIS_GCC_H //只快一点点，但是看起来可能更直观一些：__REV()是硬实现的大小端序转换，在cmsis_gcc.h中定义
    humi = (__REV(*(uint32_t*)readBuffer) & 0x00fffff0) >> 4;
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	613b      	str	r3, [r7, #16]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	ba1b      	rev	r3, r3
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fda9 	bl	8000cd4 <__aeabi_ui2f>
 8001182:	4603      	mov	r3, r0
 8001184:	61fb      	str	r3, [r7, #28]
    temp = __REV(*(uint32_t*)(readBuffer+2)) & 0x000fffff;
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	3302      	adds	r3, #2
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	ba1b      	rev	r3, r3
 8001192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fd9c 	bl	8000cd4 <__aeabi_ui2f>
 800119c:	4603      	mov	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]
    #else
    humi = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] << 12);
    temp = (((uint32_t)readBuffer[3] & 0x0F) << 16) + (((uint32_t)readBuffer[4]) << 8) + (uint32_t)readBuffer[5];
    #endif
    Humidity = humi * 100 / (1 << 20);
 80011a0:	4913      	ldr	r1, [pc, #76]	@ (80011f0 <AHT20_Measure+0xc0>)
 80011a2:	69f8      	ldr	r0, [r7, #28]
 80011a4:	f7ff fdee 	bl	8000d84 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe9c 	bl	8000eec <__aeabi_fdiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <AHT20_Measure+0xc4>)
 80011ba:	601a      	str	r2, [r3, #0]
    Temperature = temp * 200 / (1 << 20) - 50;
 80011bc:	490e      	ldr	r1, [pc, #56]	@ (80011f8 <AHT20_Measure+0xc8>)
 80011be:	69b8      	ldr	r0, [r7, #24]
 80011c0:	f7ff fde0 	bl	8000d84 <__aeabi_fmul>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe8e 	bl	8000eec <__aeabi_fdiv>
 80011d0:	4603      	mov	r3, r0
 80011d2:	490a      	ldr	r1, [pc, #40]	@ (80011fc <AHT20_Measure+0xcc>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fccb 	bl	8000b70 <__aeabi_fsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <AHT20_Measure+0xd0>)
 80011e0:	601a      	str	r2, [r3, #0]
  }
}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	080082e4 	.word	0x080082e4
 80011f0:	42c80000 	.word	0x42c80000
 80011f4:	200001f4 	.word	0x200001f4
 80011f8:	43480000 	.word	0x43480000
 80011fc:	42480000 	.word	0x42480000
 8001200:	200001f0 	.word	0x200001f0

08001204 <AHT20_Temperature>:

/**
 * @brief 获取上次测量时的温度数据
 */
float AHT20_Temperature() {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return Temperature;
 8001208:	4b02      	ldr	r3, [pc, #8]	@ (8001214 <AHT20_Temperature+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200001f0 	.word	0x200001f0

08001218 <AHT20_Humidity>:

/**
 * @brief 获取上次测量时的湿度数据
 */
float AHT20_Humidity() {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return Humidity;
 800121c:	4b02      	ldr	r3, [pc, #8]	@ (8001228 <AHT20_Humidity+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	200001f4 	.word	0x200001f4

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_GPIO_Init+0x58>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <MX_GPIO_Init+0x58>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000

08001288 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_I2C1_Init+0x50>)
 800128e:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <MX_I2C1_Init+0x54>)
 8001290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_I2C1_Init+0x50>)
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <MX_I2C1_Init+0x58>)
 8001296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012c6:	f001 f867 	bl	8002398 <HAL_I2C_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d0:	f000 f8d7 	bl	8001482 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200001f8 	.word	0x200001f8
 80012dc:	40005400 	.word	0x40005400
 80012e0:	00061a80 	.word	0x00061a80

080012e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a15      	ldr	r2, [pc, #84]	@ (8001354 <HAL_I2C_MspInit+0x70>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d123      	bne.n	800134c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_I2C_MspInit+0x74>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_I2C_MspInit+0x74>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_I2C_MspInit+0x74>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131c:	23c0      	movs	r3, #192	@ 0xc0
 800131e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001320:	2312      	movs	r3, #18
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	480b      	ldr	r0, [pc, #44]	@ (800135c <HAL_I2C_MspInit+0x78>)
 8001330:	f000 feae 	bl	8002090 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <HAL_I2C_MspInit+0x74>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <HAL_I2C_MspInit+0x74>)
 800133a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800133e:	61d3      	str	r3, [r2, #28]
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_I2C_MspInit+0x74>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40005400 	.word	0x40005400
 8001358:	40021000 	.word	0x40021000
 800135c:	40010c00 	.word	0x40010c00

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b092      	sub	sp, #72	@ 0x48
 8001364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001366:	f000 fd29 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f845 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f7ff ff5d 	bl	800122c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001372:	f7ff ff89 	bl	8001288 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8001376:	2014      	movs	r0, #20
 8001378:	f000 fd82 	bl	8001e80 <HAL_Delay>
  OLED_Init();
 800137c:	f000 f8b0 	bl	80014e0 <OLED_Init>
  AHT20_Init();
 8001380:	f7ff feb2 	bl	80010e8 <AHT20_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AHT20_Measure();
 8001384:	f7ff fed4 	bl	8001130 <AHT20_Measure>
	  temp = AHT20_Temperature();
 8001388:	f7ff ff3c 	bl	8001204 <AHT20_Temperature>
 800138c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  humi = AHT20_Humidity();
 800138e:	f7ff ff43 	bl	8001218 <AHT20_Humidity>
 8001392:	63b8      	str	r0, [r7, #56]	@ 0x38

	  OLED_NewFrame();
 8001394:	f000 f8fa 	bl	800158c <OLED_NewFrame>

	  sprintf(message, "T: %.1f", temp);
 8001398:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	1d38      	adds	r0, r7, #4
 80013a4:	4911      	ldr	r1, [pc, #68]	@ (80013ec <main+0x8c>)
 80013a6:	f003 fb4d 	bl	8004a44 <siprintf>
	  OLED_PrintString(0, 0, message, &font16x16, OLED_COLOR_NORMAL);
 80013aa:	1d3a      	adds	r2, r7, #4
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <main+0x90>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 fb0e 	bl	80019d6 <OLED_PrintString>

	  sprintf(message, "H: %.1f %%", humi);
 80013ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80013bc:	f7ff f834 	bl	8000428 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	1d38      	adds	r0, r7, #4
 80013c6:	490b      	ldr	r1, [pc, #44]	@ (80013f4 <main+0x94>)
 80013c8:	f003 fb3c 	bl	8004a44 <siprintf>
	  OLED_PrintString(0, 18, message, &font16x16, OLED_COLOR_NORMAL);
 80013cc:	1d3a      	adds	r2, r7, #4
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <main+0x90>)
 80013d4:	2112      	movs	r1, #18
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 fafd 	bl	80019d6 <OLED_PrintString>

	  OLED_ShowFrame();
 80013dc:	f000 f8e2 	bl	80015a4 <OLED_ShowFrame>

	  HAL_Delay(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e4:	f000 fd4c 	bl	8001e80 <HAL_Delay>
	  AHT20_Measure();
 80013e8:	bf00      	nop
 80013ea:	e7cb      	b.n	8001384 <main+0x24>
 80013ec:	080082e8 	.word	0x080082e8
 80013f0:	08008984 	.word	0x08008984
 80013f4:	080082f0 	.word	0x080082f0

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	@ 0x40
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	2228      	movs	r2, #40	@ 0x28
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fb91 	bl	8004b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142c:	2302      	movs	r3, #2
 800142e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001436:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4618      	mov	r0, r3
 8001442:	f001 ffdd 	bl	8003400 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800144c:	f000 f819 	bl	8001482 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2102      	movs	r1, #2
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fa4a 	bl	8003904 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001476:	f000 f804 	bl	8001482 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3740      	adds	r7, #64	@ 0x40
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001486:	b672      	cpsid	i
}
 8001488:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148a:	bf00      	nop
 800148c:	e7fd      	b.n	800148a <Error_Handler+0x8>
	...

08001490 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	9200      	str	r2, [sp, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	217a      	movs	r1, #122	@ 0x7a
 80014aa:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <OLED_Send+0x28>)
 80014ac:	f001 f8b8 	bl	8002620 <HAL_I2C_Master_Transmit>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001f8 	.word	0x200001f8

080014bc <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <OLED_SendCmd+0x20>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80014cc:	2102      	movs	r1, #2
 80014ce:	4803      	ldr	r0, [pc, #12]	@ (80014dc <OLED_SendCmd+0x20>)
 80014d0:	f7ff ffde 	bl	8001490 <OLED_Send>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000064c 	.word	0x2000064c

080014e0 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80014e4:	20ae      	movs	r0, #174	@ 0xae
 80014e6:	f7ff ffe9 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 80014ea:	2002      	movs	r0, #2
 80014ec:	f7ff ffe6 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80014f0:	2010      	movs	r0, #16
 80014f2:	f7ff ffe3 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80014f6:	2040      	movs	r0, #64	@ 0x40
 80014f8:	f7ff ffe0 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80014fc:	20b0      	movs	r0, #176	@ 0xb0
 80014fe:	f7ff ffdd 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 8001502:	2081      	movs	r0, #129	@ 0x81
 8001504:	f7ff ffda 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8001508:	20cf      	movs	r0, #207	@ 0xcf
 800150a:	f7ff ffd7 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 800150e:	20a1      	movs	r0, #161	@ 0xa1
 8001510:	f7ff ffd4 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 8001514:	20a6      	movs	r0, #166	@ 0xa6
 8001516:	f7ff ffd1 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 800151a:	20a8      	movs	r0, #168	@ 0xa8
 800151c:	f7ff ffce 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8001520:	203f      	movs	r0, #63	@ 0x3f
 8001522:	f7ff ffcb 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 8001526:	20ad      	movs	r0, #173	@ 0xad
 8001528:	f7ff ffc8 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 800152c:	208b      	movs	r0, #139	@ 0x8b
 800152e:	f7ff ffc5 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 8001532:	2033      	movs	r0, #51	@ 0x33
 8001534:	f7ff ffc2 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8001538:	20c8      	movs	r0, #200	@ 0xc8
 800153a:	f7ff ffbf 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 800153e:	20d3      	movs	r0, #211	@ 0xd3
 8001540:	f7ff ffbc 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff ffb9 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 800154a:	20d5      	movs	r0, #213	@ 0xd5
 800154c:	f7ff ffb6 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8001550:	20c0      	movs	r0, #192	@ 0xc0
 8001552:	f7ff ffb3 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8001556:	20d9      	movs	r0, #217	@ 0xd9
 8001558:	f7ff ffb0 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 800155c:	201f      	movs	r0, #31
 800155e:	f7ff ffad 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 8001562:	20da      	movs	r0, #218	@ 0xda
 8001564:	f7ff ffaa 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001568:	2012      	movs	r0, #18
 800156a:	f7ff ffa7 	bl	80014bc <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800156e:	20db      	movs	r0, #219	@ 0xdb
 8001570:	f7ff ffa4 	bl	80014bc <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8001574:	2040      	movs	r0, #64	@ 0x40
 8001576:	f7ff ffa1 	bl	80014bc <OLED_SendCmd>

  OLED_NewFrame();
 800157a:	f000 f807 	bl	800158c <OLED_NewFrame>
  OLED_ShowFrame();
 800157e:	f000 f811 	bl	80015a4 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001582:	20af      	movs	r0, #175	@ 0xaf
 8001584:	f7ff ff9a 	bl	80014bc <OLED_SendCmd>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001590:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001594:	2100      	movs	r1, #0
 8001596:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <OLED_NewFrame+0x14>)
 8001598:	f003 fac9 	bl	8004b2e <memset>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000024c 	.word	0x2000024c

080015a4 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <OLED_ShowFrame+0x5c>)
 80015ac:	2240      	movs	r2, #64	@ 0x40
 80015ae:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e01b      	b.n	80015ee <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	3b50      	subs	r3, #80	@ 0x50
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff7d 	bl	80014bc <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff ff7a 	bl	80014bc <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80015c8:	2010      	movs	r0, #16
 80015ca:	f7ff ff77 	bl	80014bc <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80015ce:	480d      	ldr	r0, [pc, #52]	@ (8001604 <OLED_ShowFrame+0x60>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <OLED_ShowFrame+0x64>)
 80015d6:	4413      	add	r3, r2
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	4619      	mov	r1, r3
 80015dc:	f003 fb35 	bl	8004c4a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80015e0:	2181      	movs	r1, #129	@ 0x81
 80015e2:	4807      	ldr	r0, [pc, #28]	@ (8001600 <OLED_ShowFrame+0x5c>)
 80015e4:	f7ff ff54 	bl	8001490 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	3301      	adds	r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d9e0      	bls.n	80015b6 <OLED_ShowFrame+0x12>
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000650 	.word	0x20000650
 8001604:	20000651 	.word	0x20000651
 8001608:	2000024c 	.word	0x2000024c

0800160c <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 800160c:	b490      	push	{r4, r7}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4604      	mov	r4, r0
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4623      	mov	r3, r4
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	4603      	mov	r3, r0
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	460b      	mov	r3, r1
 8001624:	717b      	strb	r3, [r7, #5]
 8001626:	4613      	mov	r3, r2
 8001628:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b07      	cmp	r3, #7
 800162e:	d85f      	bhi.n	80016f0 <OLED_SetByte_Fine+0xe4>
 8001630:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db5b      	blt.n	80016f0 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 8001638:	7d3b      	ldrb	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <OLED_SetByte_Fine+0x38>
 800163e:	797b      	ldrb	r3, [r7, #5]
 8001640:	43db      	mvns	r3, r3
 8001642:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001644:	7c3b      	ldrb	r3, [r7, #16]
 8001646:	3301      	adds	r3, #1
 8001648:	22ff      	movs	r2, #255	@ 0xff
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	b25a      	sxtb	r2, r3
 8001650:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001654:	4313      	orrs	r3, r2
 8001656:	b25a      	sxtb	r2, r3
 8001658:	793b      	ldrb	r3, [r7, #4]
 800165a:	f1c3 0308 	rsb	r3, r3, #8
 800165e:	21ff      	movs	r1, #255	@ 0xff
 8001660:	fa41 f303 	asr.w	r3, r1, r3
 8001664:	b25b      	sxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b25b      	sxtb	r3, r3
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <OLED_SetByte_Fine+0xf0>)
 800166e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	4922      	ldr	r1, [pc, #136]	@ (8001700 <OLED_SetByte_Fine+0xf4>)
 8001676:	01d2      	lsls	r2, r2, #7
 8001678:	440a      	add	r2, r1
 800167a:	4413      	add	r3, r2
 800167c:	7818      	ldrb	r0, [r3, #0]
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <OLED_SetByte_Fine+0xf0>)
 8001680:	7819      	ldrb	r1, [r3, #0]
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	4001      	ands	r1, r0
 8001688:	b2c8      	uxtb	r0, r1
 800168a:	491d      	ldr	r1, [pc, #116]	@ (8001700 <OLED_SetByte_Fine+0xf4>)
 800168c:	01d2      	lsls	r2, r2, #7
 800168e:	440a      	add	r2, r1
 8001690:	4413      	add	r3, r2
 8001692:	4602      	mov	r2, r0
 8001694:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001696:	7c3b      	ldrb	r3, [r7, #16]
 8001698:	3301      	adds	r3, #1
 800169a:	22ff      	movs	r2, #255	@ 0xff
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016aa:	4013      	ands	r3, r2
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	f1c3 0308 	rsb	r3, r3, #8
 80016b4:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 80016b8:	fa41 f303 	asr.w	r3, r1, r3
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4013      	ands	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <OLED_SetByte_Fine+0xf0>)
 80016c6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <OLED_SetByte_Fine+0xf4>)
 80016ce:	01d2      	lsls	r2, r2, #7
 80016d0:	440a      	add	r2, r1
 80016d2:	4413      	add	r3, r2
 80016d4:	7818      	ldrb	r0, [r3, #0]
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <OLED_SetByte_Fine+0xf0>)
 80016d8:	7819      	ldrb	r1, [r3, #0]
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	4301      	orrs	r1, r0
 80016e0:	b2c8      	uxtb	r0, r1
 80016e2:	4907      	ldr	r1, [pc, #28]	@ (8001700 <OLED_SetByte_Fine+0xf4>)
 80016e4:	01d2      	lsls	r2, r2, #7
 80016e6:	440a      	add	r2, r1
 80016e8:	4413      	add	r3, r2
 80016ea:	4602      	mov	r2, r0
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e000      	b.n	80016f2 <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80016f0:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc90      	pop	{r4, r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200006d1 	.word	0x200006d1
 8001700:	2000024c 	.word	0x2000024c

08001704 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af02      	add	r7, sp, #8
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	4603      	mov	r3, r0
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	717b      	strb	r3, [r7, #5]
 800171e:	4613      	mov	r3, r2
 8001720:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 8001730:	7bba      	ldrb	r2, [r7, #14]
 8001732:	793b      	ldrb	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	2b08      	cmp	r3, #8
 8001738:	dd29      	ble.n	800178e <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800173a:	797a      	ldrb	r2, [r7, #5]
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	b2da      	uxtb	r2, r3
 8001744:	7bbc      	ldrb	r4, [r7, #14]
 8001746:	79f9      	ldrb	r1, [r7, #7]
 8001748:	7bf8      	ldrb	r0, [r7, #15]
 800174a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2307      	movs	r3, #7
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	4623      	mov	r3, r4
 8001756:	f7ff ff59 	bl	800160c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	3301      	adds	r3, #1
 800175e:	b2d8      	uxtb	r0, r3
 8001760:	797a      	ldrb	r2, [r7, #5]
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	f1c3 0308 	rsb	r3, r3, #8
 8001768:	fa42 f303 	asr.w	r3, r2, r3
 800176c:	b2dc      	uxtb	r4, r3
 800176e:	793a      	ldrb	r2, [r7, #4]
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	4413      	add	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	3b09      	subs	r3, #9
 8001778:	b2db      	uxtb	r3, r3
 800177a:	79f9      	ldrb	r1, [r7, #7]
 800177c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	4622      	mov	r2, r4
 8001788:	f7ff ff40 	bl	800160c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800178c:	e015      	b.n	80017ba <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800178e:	797a      	ldrb	r2, [r7, #5]
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	b2dc      	uxtb	r4, r3
 8001798:	7bba      	ldrb	r2, [r7, #14]
 800179a:	793b      	ldrb	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	7bbd      	ldrb	r5, [r7, #14]
 80017a6:	79f9      	ldrb	r1, [r7, #7]
 80017a8:	7bf8      	ldrb	r0, [r7, #15]
 80017aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	462b      	mov	r3, r5
 80017b4:	4622      	mov	r2, r4
 80017b6:	f7ff ff29 	bl	800160c <OLED_SetByte_Fine>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bdb0      	pop	{r4, r5, r7, pc}

080017c2 <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 80017c2:	b590      	push	{r4, r7, lr}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af02      	add	r7, sp, #8
 80017c8:	4604      	mov	r4, r0
 80017ca:	4608      	mov	r0, r1
 80017cc:	4611      	mov	r1, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	4623      	mov	r3, r4
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	4603      	mov	r3, r0
 80017d6:	71bb      	strb	r3, [r7, #6]
 80017d8:	460b      	mov	r3, r1
 80017da:	717b      	strb	r3, [r7, #5]
 80017dc:	4613      	mov	r3, r2
 80017de:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80017ee:	797a      	ldrb	r2, [r7, #5]
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7bbc      	ldrb	r4, [r7, #14]
 80017fa:	79f9      	ldrb	r1, [r7, #7]
 80017fc:	7bf8      	ldrb	r0, [r7, #15]
 80017fe:	793b      	ldrb	r3, [r7, #4]
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	2307      	movs	r3, #7
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4623      	mov	r3, r4
 8001808:	f7ff ff00 	bl	800160c <OLED_SetByte_Fine>
  if (bit) {
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d014      	beq.n	800183c <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	3301      	adds	r3, #1
 8001816:	b2d8      	uxtb	r0, r3
 8001818:	797a      	ldrb	r2, [r7, #5]
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	f1c3 0308 	rsb	r3, r3, #8
 8001820:	fa42 f303 	asr.w	r3, r2, r3
 8001824:	b2dc      	uxtb	r4, r3
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	3b01      	subs	r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	79f9      	ldrb	r1, [r7, #7]
 800182e:	793a      	ldrb	r2, [r7, #4]
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	4622      	mov	r2, r4
 8001838:	f7ff fee8 	bl	800160c <OLED_SetByte_Fine>
  }
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af02      	add	r7, sp, #8
 800184a:	603a      	str	r2, [r7, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	460b      	mov	r3, r1
 8001854:	71bb      	strb	r3, [r7, #6]
 8001856:	4613      	mov	r3, r2
 8001858:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800185a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e025      	b.n	80018be <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001872:	2300      	movs	r3, #0
 8001874:	73bb      	strb	r3, [r7, #14]
 8001876:	e01b      	b.n	80018b0 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4413      	add	r3, r2
 800187e:	b2d8      	uxtb	r0, r3
 8001880:	7bbb      	ldrb	r3, [r7, #14]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	b2da      	uxtb	r2, r3
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	4413      	add	r3, r2
 800188a:	b2dc      	uxtb	r4, r3
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	7bbb      	ldrb	r3, [r7, #14]
 8001890:	7979      	ldrb	r1, [r7, #5]
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4413      	add	r3, r2
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff ff8c 	bl	80017c2 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	3301      	adds	r3, #1
 80018ae:	73bb      	strb	r3, [r7, #14]
 80018b0:	7bba      	ldrb	r2, [r7, #14]
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3df      	bcc.n	8001878 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3d5      	bcc.n	8001872 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d028      	beq.n	800191e <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	7b3a      	ldrb	r2, [r7, #12]
 80018d2:	b292      	uxth	r2, r2
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	737b      	strb	r3, [r7, #13]
 80018de:	e01a      	b.n	8001916 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	4413      	add	r3, r2
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	4413      	add	r3, r2
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	893a      	ldrh	r2, [r7, #8]
 80018f6:	7b7b      	ldrb	r3, [r7, #13]
 80018f8:	4413      	add	r3, r2
 80018fa:	461a      	mov	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	7afc      	ldrb	r4, [r7, #11]
 8001904:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	4623      	mov	r3, r4
 800190c:	f7ff fefa 	bl	8001704 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8001910:	7b7b      	ldrb	r3, [r7, #13]
 8001912:	3301      	adds	r3, #1
 8001914:	737b      	strb	r3, [r7, #13]
 8001916:	7b7a      	ldrb	r2, [r7, #13]
 8001918:	797b      	ldrb	r3, [r7, #5]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3e0      	bcc.n	80018e0 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}

08001926 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8001926:	b5b0      	push	{r4, r5, r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af02      	add	r7, sp, #8
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	460b      	mov	r3, r1
 8001934:	71bb      	strb	r3, [r7, #6]
 8001936:	4613      	mov	r3, r2
 8001938:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	797b      	ldrb	r3, [r7, #5]
 8001940:	f1a3 0120 	sub.w	r1, r3, #32
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	3307      	adds	r3, #7
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <OLED_PrintASCIIChar+0x2a>
 800194e:	3307      	adds	r3, #7
 8001950:	10db      	asrs	r3, r3, #3
 8001952:	4618      	mov	r0, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	fb00 f303 	mul.w	r3, r0, r3
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	18d4      	adds	r4, r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	785d      	ldrb	r5, [r3, #1]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	79b9      	ldrb	r1, [r7, #6]
 800196c:	79f8      	ldrb	r0, [r7, #7]
 800196e:	7e3a      	ldrb	r2, [r7, #24]
 8001970:	9201      	str	r2, [sp, #4]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	462b      	mov	r3, r5
 8001976:	4622      	mov	r2, r4
 8001978:	f7ff ff64 	bl	8001844 <OLED_SetBlock>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}

08001984 <_OLED_GetUTF8Len>:
}

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string) {
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	db01      	blt.n	800199a <_OLED_GetUTF8Len+0x16>
    return 1;
 8001996:	2301      	movs	r3, #1
 8001998:	e018      	b.n	80019cc <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xE0) == 0xC0) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80019a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80019a4:	d101      	bne.n	80019aa <_OLED_GetUTF8Len+0x26>
    return 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e010      	b.n	80019cc <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xF0) == 0xE0) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019b2:	2be0      	cmp	r3, #224	@ 0xe0
 80019b4:	d101      	bne.n	80019ba <_OLED_GetUTF8Len+0x36>
    return 3;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e008      	b.n	80019cc <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xF8) == 0xF0) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80019c2:	2bf0      	cmp	r3, #240	@ 0xf0
 80019c4:	d101      	bne.n	80019ca <_OLED_GetUTF8Len+0x46>
    return 4;
 80019c6:	2304      	movs	r3, #4
 80019c8:	e000      	b.n	80019cc <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <OLED_PrintString>:
 *
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color) {
 80019d6:	b5b0      	push	{r4, r5, r7, lr}
 80019d8:	b08a      	sub	sp, #40	@ 0x28
 80019da:	af02      	add	r7, sp, #8
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	460b      	mov	r3, r1
 80019e6:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80019e8:	2300      	movs	r3, #0
 80019ea:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3307      	adds	r3, #7
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da00      	bge.n	80019f8 <OLED_PrintString+0x22>
 80019f6:	3307      	adds	r3, #7
 80019f8:	10db      	asrs	r3, r3, #3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	7852      	ldrb	r2, [r2, #1]
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	3304      	adds	r3, #4
 8001a08:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i]) {
 8001a0a:	e07d      	b.n	8001b08 <OLED_PrintString+0x132>
    found = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8001a10:	8bfb      	ldrh	r3, [r7, #30]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4413      	add	r3, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ffb4 	bl	8001984 <_OLED_GetUTF8Len>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0) break; // 有问题的UTF-8编码
 8001a20:	7ebb      	ldrb	r3, [r7, #26]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d078      	beq.n	8001b18 <OLED_PrintString+0x142>

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	773b      	strb	r3, [r7, #28]
 8001a2a:	e032      	b.n	8001a92 <OLED_PrintString+0xbc>
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	7f3a      	ldrb	r2, [r7, #28]
 8001a32:	7ef9      	ldrb	r1, [r7, #27]
 8001a34:	fb01 f202 	mul.w	r2, r1, r2
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0) {
 8001a3c:	8bfb      	ldrh	r3, [r7, #30]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4413      	add	r3, r2
 8001a42:	7eba      	ldrb	r2, [r7, #26]
 8001a44:	6979      	ldr	r1, [r7, #20]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f861 	bl	8004b0e <memcmp>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11c      	bne.n	8001a8c <OLED_PrintString+0xb6>
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1d1c      	adds	r4, r3, #4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	785d      	ldrb	r5, [r3, #1]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	7bb9      	ldrb	r1, [r7, #14]
 8001a60:	7bf8      	ldrb	r0, [r7, #15]
 8001a62:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001a66:	9201      	str	r2, [sp, #4]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	f7ff fee9 	bl	8001844 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	785a      	ldrb	r2, [r3, #1]
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	4413      	add	r3, r2
 8001a7a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001a7c:	7ebb      	ldrb	r3, [r7, #26]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	8bfb      	ldrh	r3, [r7, #30]
 8001a82:	4413      	add	r3, r2
 8001a84:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	777b      	strb	r3, [r7, #29]
        break;
 8001a8a:	e007      	b.n	8001a9c <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++) {
 8001a8c:	7f3b      	ldrb	r3, [r7, #28]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	773b      	strb	r3, [r7, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
 8001a96:	7f3a      	ldrb	r2, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3c7      	bcc.n	8001a2c <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0) {
 8001a9c:	7f7b      	ldrb	r3, [r7, #29]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d132      	bne.n	8001b08 <OLED_PrintString+0x132>
      if (utf8Len == 1) {
 8001aa2:	7ebb      	ldrb	r3, [r7, #26]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d119      	bne.n	8001adc <OLED_PrintString+0x106>
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001aa8:	8bfb      	ldrh	r3, [r7, #30]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68dc      	ldr	r4, [r3, #12]
 8001ab4:	7bb9      	ldrb	r1, [r7, #14]
 8001ab6:	7bf8      	ldrb	r0, [r7, #15]
 8001ab8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4623      	mov	r3, r4
 8001ac0:	f7ff ff31 	bl	8001926 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	785a      	ldrb	r2, [r3, #1]
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4413      	add	r3, r2
 8001ace:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001ad0:	7ebb      	ldrb	r3, [r7, #26]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	8bfb      	ldrh	r3, [r7, #30]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	83fb      	strh	r3, [r7, #30]
 8001ada:	e015      	b.n	8001b08 <OLED_PrintString+0x132>
      } else {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	7bb9      	ldrb	r1, [r7, #14]
 8001ae2:	7bf8      	ldrb	r0, [r7, #15]
 8001ae4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4613      	mov	r3, r2
 8001aec:	2220      	movs	r2, #32
 8001aee:	f7ff ff1a 	bl	8001926 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	785a      	ldrb	r2, [r3, #1]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	4413      	add	r3, r2
 8001afc:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001afe:	7ebb      	ldrb	r3, [r7, #26]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	8bfb      	ldrh	r3, [r7, #30]
 8001b04:	4413      	add	r3, r2
 8001b06:	83fb      	strh	r3, [r7, #30]
  while (str[i]) {
 8001b08:	8bfb      	ldrh	r3, [r7, #30]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f af7b 	bne.w	8001a0c <OLED_PrintString+0x36>
      }
    }
  }
}
 8001b16:	e000      	b.n	8001b1a <OLED_PrintString+0x144>
    if (utf8Len == 0) break; // 有问题的UTF-8编码
 8001b18:	bf00      	nop
}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_MspInit+0x5c>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <HAL_MspInit+0x5c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_MspInit+0x5c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_MspInit+0x5c>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_MspInit+0x5c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_MspInit+0x5c>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_MspInit+0x60>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_MspInit+0x60>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <NMI_Handler+0x4>

08001b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <MemManage_Handler+0x4>

08001ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <UsageFault_Handler+0x4>

08001bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f936 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <_kill>:

int _kill(int pid, int sig)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf8:	f002 ffec 	bl	8004bd4 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2216      	movs	r2, #22
 8001c00:	601a      	str	r2, [r3, #0]
  return -1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_exit>:

void _exit (int status)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c16:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffe7 	bl	8001bee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <_exit+0x12>

08001c24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e00a      	b.n	8001c4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c36:	f3af 8000 	nop.w
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60ba      	str	r2, [r7, #8]
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf0      	blt.n	8001c36 <_read+0x12>
  }

  return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e009      	b.n	8001c84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf1      	blt.n	8001c70 <_write+0x12>
  }
  return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_close>:

int _close(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <_isatty>:

int _isatty(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f002 ff54 	bl	8004bd4 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20005000 	.word	0x20005000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	200006d4 	.word	0x200006d4
 8001d60:	20000828 	.word	0x20000828

08001d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d70:	f7ff fff8 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d76:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d78:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d8c:	4c09      	ldr	r4, [pc, #36]	@ (8001db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f002 ff21 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7ff fadf 	bl	8001360 <main>
  bx lr
 8001da2:	4770      	bx	lr
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dac:	08008df4 	.word	0x08008df4
  ldr r2, =_sbss
 8001db0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001db4:	20000828 	.word	0x20000828

08001db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC1_2_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_Init+0x28>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <HAL_Init+0x28>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f92b 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff fea4 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f935 	bl	8002076 <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f000 f90b 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_IncTick+0x20>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a03      	ldr	r2, [pc, #12]	@ (8001e68 <HAL_IncTick+0x20>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000008 	.word	0x20000008
 8001e68:	200006d8 	.word	0x200006d8

08001e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b02      	ldr	r3, [pc, #8]	@ (8001e7c <HAL_GetTick+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	200006d8 	.word	0x200006d8

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffe0 	bl	8001e6c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff90 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff49 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff5e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffb0 	bl	8001fe4 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b08b      	sub	sp, #44	@ 0x2c
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e169      	b.n	8002378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a4:	2201      	movs	r2, #1
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8158 	bne.w	8002372 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002330 <HAL_GPIO_Init+0x2a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d05e      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020cc:	4a98      	ldr	r2, [pc, #608]	@ (8002330 <HAL_GPIO_Init+0x2a0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d875      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020d2:	4a98      	ldr	r2, [pc, #608]	@ (8002334 <HAL_GPIO_Init+0x2a4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d058      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020d8:	4a96      	ldr	r2, [pc, #600]	@ (8002334 <HAL_GPIO_Init+0x2a4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d86f      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020de:	4a96      	ldr	r2, [pc, #600]	@ (8002338 <HAL_GPIO_Init+0x2a8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d052      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020e4:	4a94      	ldr	r2, [pc, #592]	@ (8002338 <HAL_GPIO_Init+0x2a8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d869      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020ea:	4a94      	ldr	r2, [pc, #592]	@ (800233c <HAL_GPIO_Init+0x2ac>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d04c      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020f0:	4a92      	ldr	r2, [pc, #584]	@ (800233c <HAL_GPIO_Init+0x2ac>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d863      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020f6:	4a92      	ldr	r2, [pc, #584]	@ (8002340 <HAL_GPIO_Init+0x2b0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d046      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020fc:	4a90      	ldr	r2, [pc, #576]	@ (8002340 <HAL_GPIO_Init+0x2b0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d85d      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 8002102:	2b12      	cmp	r3, #18
 8002104:	d82a      	bhi.n	800215c <HAL_GPIO_Init+0xcc>
 8002106:	2b12      	cmp	r3, #18
 8002108:	d859      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 800210a:	a201      	add	r2, pc, #4	@ (adr r2, 8002110 <HAL_GPIO_Init+0x80>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	0800218b 	.word	0x0800218b
 8002114:	08002165 	.word	0x08002165
 8002118:	08002177 	.word	0x08002177
 800211c:	080021b9 	.word	0x080021b9
 8002120:	080021bf 	.word	0x080021bf
 8002124:	080021bf 	.word	0x080021bf
 8002128:	080021bf 	.word	0x080021bf
 800212c:	080021bf 	.word	0x080021bf
 8002130:	080021bf 	.word	0x080021bf
 8002134:	080021bf 	.word	0x080021bf
 8002138:	080021bf 	.word	0x080021bf
 800213c:	080021bf 	.word	0x080021bf
 8002140:	080021bf 	.word	0x080021bf
 8002144:	080021bf 	.word	0x080021bf
 8002148:	080021bf 	.word	0x080021bf
 800214c:	080021bf 	.word	0x080021bf
 8002150:	080021bf 	.word	0x080021bf
 8002154:	0800216d 	.word	0x0800216d
 8002158:	08002181 	.word	0x08002181
 800215c:	4a79      	ldr	r2, [pc, #484]	@ (8002344 <HAL_GPIO_Init+0x2b4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002162:	e02c      	b.n	80021be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	623b      	str	r3, [r7, #32]
          break;
 800216a:	e029      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	3304      	adds	r3, #4
 8002172:	623b      	str	r3, [r7, #32]
          break;
 8002174:	e024      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	3308      	adds	r3, #8
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e01f      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	330c      	adds	r3, #12
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e01a      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002192:	2304      	movs	r3, #4
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e013      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a0:	2308      	movs	r3, #8
 80021a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	611a      	str	r2, [r3, #16]
          break;
 80021aa:	e009      	b.n	80021c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ac:	2308      	movs	r3, #8
 80021ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	615a      	str	r2, [r3, #20]
          break;
 80021b6:	e003      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          break;
 80021be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2bff      	cmp	r3, #255	@ 0xff
 80021c4:	d801      	bhi.n	80021ca <HAL_GPIO_Init+0x13a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	e001      	b.n	80021ce <HAL_GPIO_Init+0x13e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2bff      	cmp	r3, #255	@ 0xff
 80021d4:	d802      	bhi.n	80021dc <HAL_GPIO_Init+0x14c>
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	e002      	b.n	80021e2 <HAL_GPIO_Init+0x152>
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	3b08      	subs	r3, #8
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	210f      	movs	r1, #15
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80b1 	beq.w	8002372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002210:	4b4d      	ldr	r3, [pc, #308]	@ (8002348 <HAL_GPIO_Init+0x2b8>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a4c      	ldr	r2, [pc, #304]	@ (8002348 <HAL_GPIO_Init+0x2b8>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <HAL_GPIO_Init+0x2b8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002228:	4a48      	ldr	r2, [pc, #288]	@ (800234c <HAL_GPIO_Init+0x2bc>)
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a40      	ldr	r2, [pc, #256]	@ (8002350 <HAL_GPIO_Init+0x2c0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d013      	beq.n	800227c <HAL_GPIO_Init+0x1ec>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3f      	ldr	r2, [pc, #252]	@ (8002354 <HAL_GPIO_Init+0x2c4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00d      	beq.n	8002278 <HAL_GPIO_Init+0x1e8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3e      	ldr	r2, [pc, #248]	@ (8002358 <HAL_GPIO_Init+0x2c8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_Init+0x1e4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3d      	ldr	r2, [pc, #244]	@ (800235c <HAL_GPIO_Init+0x2cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_GPIO_Init+0x1e0>
 800226c:	2303      	movs	r3, #3
 800226e:	e006      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 8002270:	2304      	movs	r3, #4
 8002272:	e004      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 8002274:	2302      	movs	r3, #2
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 800227c:	2300      	movs	r3, #0
 800227e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002280:	f002 0203 	and.w	r2, r2, #3
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4093      	lsls	r3, r2
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800228e:	492f      	ldr	r1, [pc, #188]	@ (800234c <HAL_GPIO_Init+0x2bc>)
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	492c      	ldr	r1, [pc, #176]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	4928      	ldr	r1, [pc, #160]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4922      	ldr	r1, [pc, #136]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60cb      	str	r3, [r1, #12]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	491e      	ldr	r1, [pc, #120]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4918      	ldr	r1, [pc, #96]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002306:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	4914      	ldr	r1, [pc, #80]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d021      	beq.n	8002364 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	490e      	ldr	r1, [pc, #56]	@ (8002360 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e021      	b.n	8002372 <HAL_GPIO_Init+0x2e2>
 800232e:	bf00      	nop
 8002330:	10320000 	.word	0x10320000
 8002334:	10310000 	.word	0x10310000
 8002338:	10220000 	.word	0x10220000
 800233c:	10210000 	.word	0x10210000
 8002340:	10120000 	.word	0x10120000
 8002344:	10110000 	.word	0x10110000
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000
 8002350:	40010800 	.word	0x40010800
 8002354:	40010c00 	.word	0x40010c00
 8002358:	40011000 	.word	0x40011000
 800235c:	40011400 	.word	0x40011400
 8002360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_GPIO_Init+0x304>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	43db      	mvns	r3, r3
 800236c:	4909      	ldr	r1, [pc, #36]	@ (8002394 <HAL_GPIO_Init+0x304>)
 800236e:	4013      	ands	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	f47f ae8e 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	372c      	adds	r7, #44	@ 0x2c
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e12b      	b.n	8002602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe ff90 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	@ 0x24
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023fc:	f001 fbca 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a81      	ldr	r2, [pc, #516]	@ (800260c <HAL_I2C_Init+0x274>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d807      	bhi.n	800241c <HAL_I2C_Init+0x84>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a80      	ldr	r2, [pc, #512]	@ (8002610 <HAL_I2C_Init+0x278>)
 8002410:	4293      	cmp	r3, r2
 8002412:	bf94      	ite	ls
 8002414:	2301      	movls	r3, #1
 8002416:	2300      	movhi	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e006      	b.n	800242a <HAL_I2C_Init+0x92>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a7d      	ldr	r2, [pc, #500]	@ (8002614 <HAL_I2C_Init+0x27c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	bf94      	ite	ls
 8002424:	2301      	movls	r3, #1
 8002426:	2300      	movhi	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0e7      	b.n	8002602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a78      	ldr	r2, [pc, #480]	@ (8002618 <HAL_I2C_Init+0x280>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a6a      	ldr	r2, [pc, #424]	@ (800260c <HAL_I2C_Init+0x274>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d802      	bhi.n	800246c <HAL_I2C_Init+0xd4>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3301      	adds	r3, #1
 800246a:	e009      	b.n	8002480 <HAL_I2C_Init+0xe8>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a69      	ldr	r2, [pc, #420]	@ (800261c <HAL_I2C_Init+0x284>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	3301      	adds	r3, #1
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002492:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	495c      	ldr	r1, [pc, #368]	@ (800260c <HAL_I2C_Init+0x274>)
 800249c:	428b      	cmp	r3, r1
 800249e:	d819      	bhi.n	80024d4 <HAL_I2C_Init+0x13c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e59      	subs	r1, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024b4:	400b      	ands	r3, r1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_I2C_Init+0x138>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e59      	subs	r1, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ce:	e051      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e04f      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d111      	bne.n	8002500 <HAL_I2C_Init+0x168>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e012      	b.n	8002526 <HAL_I2C_Init+0x18e>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	0099      	lsls	r1, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Init+0x196>
 800252a:	2301      	movs	r3, #1
 800252c:	e022      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10e      	bne.n	8002554 <HAL_I2C_Init+0x1bc>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e58      	subs	r0, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	440b      	add	r3, r1
 8002544:	fbb0 f3f3 	udiv	r3, r0, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002552:	e00f      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	0099      	lsls	r1, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6809      	ldr	r1, [r1, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6911      	ldr	r1, [r2, #16]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	000186a0 	.word	0x000186a0
 8002610:	001e847f 	.word	0x001e847f
 8002614:	003d08ff 	.word	0x003d08ff
 8002618:	431bde83 	.word	0x431bde83
 800261c:	10624dd3 	.word	0x10624dd3

08002620 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
 8002630:	4613      	mov	r3, r2
 8002632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff fc1a 	bl	8001e6c <HAL_GetTick>
 8002638:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 80e0 	bne.w	8002808 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	4970      	ldr	r1, [pc, #448]	@ (8002814 <HAL_I2C_Master_Transmit+0x1f4>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fc9e 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	e0d3      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x50>
 800266c:	2302      	movs	r3, #2
 800266e:	e0cc      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d007      	beq.n	8002696 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	@ 0x21
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2210      	movs	r2, #16
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a50      	ldr	r2, [pc, #320]	@ (8002818 <HAL_I2C_Master_Transmit+0x1f8>)
 80026d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fb08 	bl	8002cf4 <I2C_MasterRequestWrite>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e08d      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002704:	e066      	b.n	80027d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fd5c 	bl	80031c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	2b04      	cmp	r3, #4
 800271c:	d107      	bne.n	800272e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06b      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b04      	cmp	r3, #4
 800276e:	d11b      	bne.n	80027a8 <HAL_I2C_Master_Transmit+0x188>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	6a39      	ldr	r1, [r7, #32]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fd53 	bl	8003258 <I2C_WaitOnBTFFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d107      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e01a      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d194      	bne.n	8002706 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e000      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	00100002 	.word	0x00100002
 8002818:	ffff0000 	.word	0xffff0000

0800281c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	@ 0x30
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	460b      	mov	r3, r1
 800282a:	817b      	strh	r3, [r7, #10]
 800282c:	4613      	mov	r3, r2
 800282e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fb1a 	bl	8001e6c <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b20      	cmp	r3, #32
 8002844:	f040 824b 	bne.w	8002cde <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2319      	movs	r3, #25
 800284e:	2201      	movs	r2, #1
 8002850:	497f      	ldr	r1, [pc, #508]	@ (8002a50 <HAL_I2C_Master_Receive+0x234>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fb9e 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	e23e      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2C_Master_Receive+0x54>
 800286c:	2302      	movs	r3, #2
 800286e:	e237      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d007      	beq.n	8002896 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2222      	movs	r2, #34	@ 0x22
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2210      	movs	r2, #16
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002a54 <HAL_I2C_Master_Receive+0x238>)
 80028d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028d8:	8979      	ldrh	r1, [r7, #10]
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa8a 	bl	8002df8 <I2C_MasterRequestRead>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1f8      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d113      	bne.n	800291e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e1cc      	b.n	8002cb8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	2b01      	cmp	r3, #1
 8002924:	d11e      	bne.n	8002964 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002934:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002936:	b672      	cpsid	i
}
 8002938:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002960:	b662      	cpsie	i
}
 8002962:	e035      	b.n	80029d0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11e      	bne.n	80029aa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800297a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
}
 800297e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029a6:	b662      	cpsie	i
}
 80029a8:	e012      	b.n	80029d0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029d0:	e172      	b.n	8002cb8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	f200 811f 	bhi.w	8002c1a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d123      	bne.n	8002a2c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fc7d 	bl	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e173      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a2a:	e145      	b.n	8002cb8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d152      	bne.n	8002ada <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	4906      	ldr	r1, [pc, #24]	@ (8002a58 <HAL_I2C_Master_Receive+0x23c>)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 faa8 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e148      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
 8002a4e:	bf00      	nop
 8002a50:	00100002 	.word	0x00100002
 8002a54:	ffff0000 	.word	0xffff0000
 8002a58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a5c:	b672      	cpsid	i
}
 8002a5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa2:	b662      	cpsie	i
}
 8002aa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ad8:	e0ee      	b.n	8002cb8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4981      	ldr	r1, [pc, #516]	@ (8002ce8 <HAL_I2C_Master_Receive+0x4cc>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fa55 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0f5      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b04:	b672      	cpsid	i
}
 8002b06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b3a:	4b6c      	ldr	r3, [pc, #432]	@ (8002cec <HAL_I2C_Master_Receive+0x4d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	4a6b      	ldr	r2, [pc, #428]	@ (8002cf0 <HAL_I2C_Master_Receive+0x4d4>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0a1a      	lsrs	r2, r3, #8
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00da      	lsls	r2, r3, #3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d118      	bne.n	8002b92 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b82:	b662      	cpsie	i
}
 8002b84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0a6      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d1d9      	bne.n	8002b54 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002be2:	b662      	cpsie	i
}
 8002be4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c18:	e04e      	b.n	8002cb8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fb62 	bl	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e058      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d124      	bne.n	8002cb8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c84:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f47f ae88 	bne.w	80029d2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3728      	adds	r7, #40	@ 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	00010004 	.word	0x00010004
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	14f8b589 	.word	0x14f8b589

08002cf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d006      	beq.n	8002d1e <I2C_MasterRequestWrite+0x2a>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d003      	beq.n	8002d1e <I2C_MasterRequestWrite+0x2a>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e00b      	b.n	8002d48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d34:	2b12      	cmp	r3, #18
 8002d36:	d107      	bne.n	8002d48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f91d 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d6e:	d103      	bne.n	8002d78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e035      	b.n	8002de8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d84:	d108      	bne.n	8002d98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	e01b      	b.n	8002dd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	11db      	asrs	r3, r3, #7
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0306 	and.w	r3, r3, #6
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f063 030f 	orn	r3, r3, #15
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	490e      	ldr	r1, [pc, #56]	@ (8002df0 <I2C_MasterRequestWrite+0xfc>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f966 	bl	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e010      	b.n	8002de8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <I2C_MasterRequestWrite+0x100>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f956 	bl	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00010008 	.word	0x00010008
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d006      	beq.n	8002e32 <I2C_MasterRequestRead+0x3a>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d003      	beq.n	8002e32 <I2C_MasterRequestRead+0x3a>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e30:	d108      	bne.n	8002e44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e00b      	b.n	8002e5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	d107      	bne.n	8002e5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f893 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e82:	d103      	bne.n	8002e8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e079      	b.n	8002f84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e98:	d108      	bne.n	8002eac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e05f      	b.n	8002f6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	11db      	asrs	r3, r3, #7
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0306 	and.w	r3, r3, #6
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f063 030f 	orn	r3, r3, #15
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4930      	ldr	r1, [pc, #192]	@ (8002f8c <I2C_MasterRequestRead+0x194>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8dc 	bl	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e054      	b.n	8002f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4929      	ldr	r1, [pc, #164]	@ (8002f90 <I2C_MasterRequestRead+0x198>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8cc 	bl	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e044      	b.n	8002f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f831 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f46:	d103      	bne.n	8002f50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e017      	b.n	8002f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	11db      	asrs	r3, r3, #7
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 0306 	and.w	r3, r3, #6
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f063 030e 	orn	r3, r3, #14
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4907      	ldr	r1, [pc, #28]	@ (8002f90 <I2C_MasterRequestRead+0x198>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f888 	bl	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	00010008 	.word	0x00010008
 8002f90:	00010002 	.word	0x00010002

08002f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa4:	e048      	b.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d044      	beq.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe ff5d 	bl	8001e6c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d139      	bne.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10d      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	e00c      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	429a      	cmp	r2, r3
 8003008:	d116      	bne.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e023      	b.n	8003080 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10d      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	e00c      	b.n	8003078 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	429a      	cmp	r2, r3
 800307c:	d093      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003096:	e071      	b.n	800317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a6:	d123      	bne.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e067      	b.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d041      	beq.n	800317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7fe feb8 	bl	8001e6c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d136      	bne.n	800317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10c      	bne.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4013      	ands	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e00b      	b.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e021      	b.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d10c      	bne.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	43da      	mvns	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e00b      	b.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af6d 	bne.w	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d4:	e034      	b.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8e3 	bl	80033a2 <I2C_IsAcknowledgeFailed>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e034      	b.n	8003250 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d028      	beq.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ee:	f7fe fe3d 	bl	8001e6c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11d      	bne.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320e:	2b80      	cmp	r3, #128	@ 0x80
 8003210:	d016      	beq.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324a:	2b80      	cmp	r3, #128	@ 0x80
 800324c:	d1c3      	bne.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003264:	e034      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f89b 	bl	80033a2 <I2C_IsAcknowledgeFailed>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e034      	b.n	80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d028      	beq.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe fdf5 	bl	8001e6c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d11d      	bne.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d016      	beq.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d1c3      	bne.n	8003266 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f4:	e049      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d119      	bne.n	8003338 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0210 	mvn.w	r2, #16
 800330c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e030      	b.n	800339a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003338:	f7fe fd98 	bl	8001e6c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d302      	bcc.n	800334e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11d      	bne.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d016      	beq.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e007      	b.n	800339a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003394:	2b40      	cmp	r3, #64	@ 0x40
 8003396:	d1ae      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b8:	d11b      	bne.n	80033f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f043 0204 	orr.w	r2, r3, #4
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e272      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8087 	beq.w	800352e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003420:	4b92      	ldr	r3, [pc, #584]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b04      	cmp	r3, #4
 800342a:	d00c      	beq.n	8003446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800342c:	4b8f      	ldr	r3, [pc, #572]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d112      	bne.n	800345e <HAL_RCC_OscConfig+0x5e>
 8003438:	4b8c      	ldr	r3, [pc, #560]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003444:	d10b      	bne.n	800345e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003446:	4b89      	ldr	r3, [pc, #548]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d06c      	beq.n	800352c <HAL_RCC_OscConfig+0x12c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d168      	bne.n	800352c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e24c      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x76>
 8003468:	4b80      	ldr	r3, [pc, #512]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a7f      	ldr	r2, [pc, #508]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	e02e      	b.n	80034d4 <HAL_RCC_OscConfig+0xd4>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b7b      	ldr	r3, [pc, #492]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7a      	ldr	r2, [pc, #488]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b78      	ldr	r3, [pc, #480]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a77      	ldr	r2, [pc, #476]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003490:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xd4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0xbc>
 80034a2:	4b72      	ldr	r3, [pc, #456]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a71      	ldr	r2, [pc, #452]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b6f      	ldr	r3, [pc, #444]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6e      	ldr	r2, [pc, #440]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xd4>
 80034bc:	4b6b      	ldr	r3, [pc, #428]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a6a      	ldr	r2, [pc, #424]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b68      	ldr	r3, [pc, #416]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a67      	ldr	r2, [pc, #412]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fcc6 	bl	8001e6c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fcc2 	bl	8001e6c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	@ 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e200      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b5d      	ldr	r3, [pc, #372]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xe4>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fcb2 	bl	8001e6c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fcae 	bl	8001e6c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e1ec      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x10c>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d063      	beq.n	8003602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800353a:	4b4c      	ldr	r3, [pc, #304]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003546:	4b49      	ldr	r3, [pc, #292]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x18c>
 8003552:	4b46      	ldr	r3, [pc, #280]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	4b43      	ldr	r3, [pc, #268]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x176>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e1c0      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b3d      	ldr	r3, [pc, #244]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4939      	ldr	r1, [pc, #228]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e03a      	b.n	8003602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <HAL_RCC_OscConfig+0x270>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fc67 	bl	8001e6c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe fc63 	bl	8001e6c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1a1      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4927      	ldr	r1, [pc, #156]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]
 80035d4:	e015      	b.n	8003602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d6:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <HAL_RCC_OscConfig+0x270>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fc46 	bl	8001e6c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe fc42 	bl	8001e6c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e180      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03a      	beq.n	8003684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d019      	beq.n	800364a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003616:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <HAL_RCC_OscConfig+0x274>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361c:	f7fe fc26 	bl	8001e6c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe fc22 	bl	8001e6c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e160      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <HAL_RCC_OscConfig+0x26c>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003642:	2001      	movs	r0, #1
 8003644:	f000 faba 	bl	8003bbc <RCC_Delay>
 8003648:	e01c      	b.n	8003684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_RCC_OscConfig+0x274>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fe fc0c 	bl	8001e6c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003656:	e00f      	b.n	8003678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003658:	f7fe fc08 	bl	8001e6c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d908      	bls.n	8003678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e146      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	42420000 	.word	0x42420000
 8003674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b92      	ldr	r3, [pc, #584]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e9      	bne.n	8003658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a6 	beq.w	80037de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b8b      	ldr	r3, [pc, #556]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4b88      	ldr	r3, [pc, #544]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a87      	ldr	r2, [pc, #540]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]
 80036ae:	4b85      	ldr	r3, [pc, #532]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b82      	ldr	r3, [pc, #520]	@ (80038c8 <HAL_RCC_OscConfig+0x4c8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b7f      	ldr	r3, [pc, #508]	@ (80038c8 <HAL_RCC_OscConfig+0x4c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7e      	ldr	r2, [pc, #504]	@ (80038c8 <HAL_RCC_OscConfig+0x4c8>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fe fbc9 	bl	8001e6c <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fe fbc5 	bl	8001e6c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b64      	cmp	r3, #100	@ 0x64
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e103      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b75      	ldr	r3, [pc, #468]	@ (80038c8 <HAL_RCC_OscConfig+0x4c8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x312>
 8003704:	4b6f      	ldr	r3, [pc, #444]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4a6e      	ldr	r2, [pc, #440]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6213      	str	r3, [r2, #32]
 8003710:	e02d      	b.n	800376e <HAL_RCC_OscConfig+0x36e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x334>
 800371a:	4b6a      	ldr	r3, [pc, #424]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4a69      	ldr	r2, [pc, #420]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6213      	str	r3, [r2, #32]
 8003726:	4b67      	ldr	r3, [pc, #412]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a66      	ldr	r2, [pc, #408]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	e01c      	b.n	800376e <HAL_RCC_OscConfig+0x36e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d10c      	bne.n	8003756 <HAL_RCC_OscConfig+0x356>
 800373c:	4b61      	ldr	r3, [pc, #388]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4a60      	ldr	r2, [pc, #384]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6213      	str	r3, [r2, #32]
 8003748:	4b5e      	ldr	r3, [pc, #376]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4a5d      	ldr	r2, [pc, #372]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6213      	str	r3, [r2, #32]
 8003754:	e00b      	b.n	800376e <HAL_RCC_OscConfig+0x36e>
 8003756:	4b5b      	ldr	r3, [pc, #364]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6213      	str	r3, [r2, #32]
 8003762:	4b58      	ldr	r3, [pc, #352]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a57      	ldr	r2, [pc, #348]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d015      	beq.n	80037a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe fb79 	bl	8001e6c <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe fb75 	bl	8001e6c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0b1      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ee      	beq.n	800377e <HAL_RCC_OscConfig+0x37e>
 80037a0:	e014      	b.n	80037cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fe fb63 	bl	8001e6c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe fb5f 	bl	8001e6c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e09b      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	4b40      	ldr	r3, [pc, #256]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ee      	bne.n	80037aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d105      	bne.n	80037de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d2:	4b3c      	ldr	r3, [pc, #240]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4a3b      	ldr	r2, [pc, #236]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8087 	beq.w	80038f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e8:	4b36      	ldr	r3, [pc, #216]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d061      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d146      	bne.n	800388a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fc:	4b33      	ldr	r3, [pc, #204]	@ (80038cc <HAL_RCC_OscConfig+0x4cc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fb33 	bl	8001e6c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe fb2f 	bl	8001e6c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e06d      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381c:	4b29      	ldr	r3, [pc, #164]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f0      	bne.n	800380a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003830:	d108      	bne.n	8003844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003832:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4921      	ldr	r1, [pc, #132]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003844:	4b1f      	ldr	r3, [pc, #124]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a19      	ldr	r1, [r3, #32]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	430b      	orrs	r3, r1
 8003856:	491b      	ldr	r1, [pc, #108]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RCC_OscConfig+0x4cc>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fb03 	bl	8001e6c <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386a:	f7fe faff 	bl	8001e6c <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e03d      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x46a>
 8003888:	e035      	b.n	80038f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <HAL_RCC_OscConfig+0x4cc>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe faec 	bl	8001e6c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe fae8 	bl	8001e6c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e026      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x498>
 80038b6:	e01e      	b.n	80038f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e019      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40007000 	.word	0x40007000
 80038cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_RCC_OscConfig+0x500>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0d0      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b67      	ldr	r3, [pc, #412]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4965      	ldr	r1, [pc, #404]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b63      	ldr	r3, [pc, #396]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b8      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003960:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a58      	ldr	r2, [pc, #352]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800396a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003978:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	494d      	ldr	r1, [pc, #308]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d040      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d115      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e073      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06b      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e2:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4936      	ldr	r1, [pc, #216]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f4:	f7fe fa3a 	bl	8001e6c <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fc:	f7fe fa36 	bl	8001e6c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e053      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1eb      	bne.n	80039fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d210      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 0207 	bic.w	r2, r3, #7
 8003a3a:	4922      	ldr	r1, [pc, #136]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e032      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a60:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4916      	ldr	r1, [pc, #88]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	490e      	ldr	r1, [pc, #56]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a92:	f000 f821 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	490a      	ldr	r1, [pc, #40]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe f998 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08008994 	.word	0x08008994
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003af2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d002      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x30>
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x36>
 8003b06:	e027      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b08:	4b19      	ldr	r3, [pc, #100]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0a:	613b      	str	r3, [r7, #16]
      break;
 8003b0c:	e027      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	0c9b      	lsrs	r3, r3, #18
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b18:	5cd3      	ldrb	r3, [r2, r3]
 8003b1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b26:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0c5b      	lsrs	r3, r3, #17
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0d      	ldr	r2, [pc, #52]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b3a:	fb03 f202 	mul.w	r2, r3, r2
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e004      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	613b      	str	r3, [r7, #16]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b5a:	613b      	str	r3, [r7, #16]
      break;
 8003b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5e:	693b      	ldr	r3, [r7, #16]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	080089ac 	.word	0x080089ac
 8003b78:	080089bc 	.word	0x080089bc
 8003b7c:	003d0900 	.word	0x003d0900

08003b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b84:	4b02      	ldr	r3, [pc, #8]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	20000000 	.word	0x20000000

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b98:	f7ff fff2 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4903      	ldr	r1, [pc, #12]	@ (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	080089a4 	.word	0x080089a4

08003bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <RCC_Delay+0x34>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <RCC_Delay+0x38>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0a5b      	lsrs	r3, r3, #9
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bd8:	bf00      	nop
  }
  while (Delay --);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	60fa      	str	r2, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f9      	bne.n	8003bd8 <RCC_Delay+0x1c>
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	10624dd3 	.word	0x10624dd3

08003bf8 <__cvt>:
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfe:	461d      	mov	r5, r3
 8003c00:	bfbb      	ittet	lt
 8003c02:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003c06:	461d      	movlt	r5, r3
 8003c08:	2300      	movge	r3, #0
 8003c0a:	232d      	movlt	r3, #45	@ 0x2d
 8003c0c:	b088      	sub	sp, #32
 8003c0e:	4614      	mov	r4, r2
 8003c10:	bfb8      	it	lt
 8003c12:	4614      	movlt	r4, r2
 8003c14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c16:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003c18:	7013      	strb	r3, [r2, #0]
 8003c1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003c20:	f023 0820 	bic.w	r8, r3, #32
 8003c24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c28:	d005      	beq.n	8003c36 <__cvt+0x3e>
 8003c2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c2e:	d100      	bne.n	8003c32 <__cvt+0x3a>
 8003c30:	3601      	adds	r6, #1
 8003c32:	2302      	movs	r3, #2
 8003c34:	e000      	b.n	8003c38 <__cvt+0x40>
 8003c36:	2303      	movs	r3, #3
 8003c38:	aa07      	add	r2, sp, #28
 8003c3a:	9204      	str	r2, [sp, #16]
 8003c3c:	aa06      	add	r2, sp, #24
 8003c3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c42:	e9cd 3600 	strd	r3, r6, [sp]
 8003c46:	4622      	mov	r2, r4
 8003c48:	462b      	mov	r3, r5
 8003c4a:	f001 f899 	bl	8004d80 <_dtoa_r>
 8003c4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c52:	4607      	mov	r7, r0
 8003c54:	d119      	bne.n	8003c8a <__cvt+0x92>
 8003c56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003c58:	07db      	lsls	r3, r3, #31
 8003c5a:	d50e      	bpl.n	8003c7a <__cvt+0x82>
 8003c5c:	eb00 0906 	add.w	r9, r0, r6
 8003c60:	2200      	movs	r2, #0
 8003c62:	2300      	movs	r3, #0
 8003c64:	4620      	mov	r0, r4
 8003c66:	4629      	mov	r1, r5
 8003c68:	f7fc fe9e 	bl	80009a8 <__aeabi_dcmpeq>
 8003c6c:	b108      	cbz	r0, 8003c72 <__cvt+0x7a>
 8003c6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c72:	2230      	movs	r2, #48	@ 0x30
 8003c74:	9b07      	ldr	r3, [sp, #28]
 8003c76:	454b      	cmp	r3, r9
 8003c78:	d31e      	bcc.n	8003cb8 <__cvt+0xc0>
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	9b07      	ldr	r3, [sp, #28]
 8003c7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003c80:	1bdb      	subs	r3, r3, r7
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	b008      	add	sp, #32
 8003c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c8e:	eb00 0906 	add.w	r9, r0, r6
 8003c92:	d1e5      	bne.n	8003c60 <__cvt+0x68>
 8003c94:	7803      	ldrb	r3, [r0, #0]
 8003c96:	2b30      	cmp	r3, #48	@ 0x30
 8003c98:	d10a      	bne.n	8003cb0 <__cvt+0xb8>
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f7fc fe81 	bl	80009a8 <__aeabi_dcmpeq>
 8003ca6:	b918      	cbnz	r0, 8003cb0 <__cvt+0xb8>
 8003ca8:	f1c6 0601 	rsb	r6, r6, #1
 8003cac:	f8ca 6000 	str.w	r6, [sl]
 8003cb0:	f8da 3000 	ldr.w	r3, [sl]
 8003cb4:	4499      	add	r9, r3
 8003cb6:	e7d3      	b.n	8003c60 <__cvt+0x68>
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	9107      	str	r1, [sp, #28]
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e7d9      	b.n	8003c74 <__cvt+0x7c>

08003cc0 <__exponent>:
 8003cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc2:	2900      	cmp	r1, #0
 8003cc4:	bfb6      	itet	lt
 8003cc6:	232d      	movlt	r3, #45	@ 0x2d
 8003cc8:	232b      	movge	r3, #43	@ 0x2b
 8003cca:	4249      	neglt	r1, r1
 8003ccc:	2909      	cmp	r1, #9
 8003cce:	7002      	strb	r2, [r0, #0]
 8003cd0:	7043      	strb	r3, [r0, #1]
 8003cd2:	dd29      	ble.n	8003d28 <__exponent+0x68>
 8003cd4:	f10d 0307 	add.w	r3, sp, #7
 8003cd8:	461d      	mov	r5, r3
 8003cda:	270a      	movs	r7, #10
 8003cdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	fb07 1416 	mls	r4, r7, r6, r1
 8003ce6:	3430      	adds	r4, #48	@ 0x30
 8003ce8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003cec:	460c      	mov	r4, r1
 8003cee:	2c63      	cmp	r4, #99	@ 0x63
 8003cf0:	4631      	mov	r1, r6
 8003cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cf6:	dcf1      	bgt.n	8003cdc <__exponent+0x1c>
 8003cf8:	3130      	adds	r1, #48	@ 0x30
 8003cfa:	1e94      	subs	r4, r2, #2
 8003cfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d00:	4623      	mov	r3, r4
 8003d02:	1c41      	adds	r1, r0, #1
 8003d04:	42ab      	cmp	r3, r5
 8003d06:	d30a      	bcc.n	8003d1e <__exponent+0x5e>
 8003d08:	f10d 0309 	add.w	r3, sp, #9
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	42ac      	cmp	r4, r5
 8003d10:	bf88      	it	hi
 8003d12:	2300      	movhi	r3, #0
 8003d14:	3302      	adds	r3, #2
 8003d16:	4403      	add	r3, r0
 8003d18:	1a18      	subs	r0, r3, r0
 8003d1a:	b003      	add	sp, #12
 8003d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d26:	e7ed      	b.n	8003d04 <__exponent+0x44>
 8003d28:	2330      	movs	r3, #48	@ 0x30
 8003d2a:	3130      	adds	r1, #48	@ 0x30
 8003d2c:	7083      	strb	r3, [r0, #2]
 8003d2e:	70c1      	strb	r1, [r0, #3]
 8003d30:	1d03      	adds	r3, r0, #4
 8003d32:	e7f1      	b.n	8003d18 <__exponent+0x58>

08003d34 <_printf_float>:
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	b091      	sub	sp, #68	@ 0x44
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003d40:	4616      	mov	r6, r2
 8003d42:	461f      	mov	r7, r3
 8003d44:	4605      	mov	r5, r0
 8003d46:	f000 fefb 	bl	8004b40 <_localeconv_r>
 8003d4a:	6803      	ldr	r3, [r0, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	9308      	str	r3, [sp, #32]
 8003d50:	f7fc f9fe 	bl	8000150 <strlen>
 8003d54:	2300      	movs	r3, #0
 8003d56:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d58:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003d5e:	3307      	adds	r3, #7
 8003d60:	f023 0307 	bic.w	r3, r3, #7
 8003d64:	f103 0208 	add.w	r2, r3, #8
 8003d68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d6c:	f8d4 b000 	ldr.w	fp, [r4]
 8003d70:	f8c8 2000 	str.w	r2, [r8]
 8003d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d7e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295
 8003d86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004000 <_printf_float+0x2cc>)
 8003d90:	f7fc fe3c 	bl	8000a0c <__aeabi_dcmpun>
 8003d94:	bb70      	cbnz	r0, 8003df4 <_printf_float+0xc0>
 8003d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9e:	4b98      	ldr	r3, [pc, #608]	@ (8004000 <_printf_float+0x2cc>)
 8003da0:	f7fc fe16 	bl	80009d0 <__aeabi_dcmple>
 8003da4:	bb30      	cbnz	r0, 8003df4 <_printf_float+0xc0>
 8003da6:	2200      	movs	r2, #0
 8003da8:	2300      	movs	r3, #0
 8003daa:	4640      	mov	r0, r8
 8003dac:	4649      	mov	r1, r9
 8003dae:	f7fc fe05 	bl	80009bc <__aeabi_dcmplt>
 8003db2:	b110      	cbz	r0, 8003dba <_printf_float+0x86>
 8003db4:	232d      	movs	r3, #45	@ 0x2d
 8003db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dba:	4a92      	ldr	r2, [pc, #584]	@ (8004004 <_printf_float+0x2d0>)
 8003dbc:	4b92      	ldr	r3, [pc, #584]	@ (8004008 <_printf_float+0x2d4>)
 8003dbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dc2:	bf8c      	ite	hi
 8003dc4:	4690      	movhi	r8, r2
 8003dc6:	4698      	movls	r8, r3
 8003dc8:	2303      	movs	r3, #3
 8003dca:	f04f 0900 	mov.w	r9, #0
 8003dce:	6123      	str	r3, [r4, #16]
 8003dd0:	f02b 0304 	bic.w	r3, fp, #4
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	4633      	mov	r3, r6
 8003dd8:	4621      	mov	r1, r4
 8003dda:	4628      	mov	r0, r5
 8003ddc:	9700      	str	r7, [sp, #0]
 8003dde:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003de0:	f000 f9d4 	bl	800418c <_printf_common>
 8003de4:	3001      	adds	r0, #1
 8003de6:	f040 8090 	bne.w	8003f0a <_printf_float+0x1d6>
 8003dea:	f04f 30ff 	mov.w	r0, #4294967295
 8003dee:	b011      	add	sp, #68	@ 0x44
 8003df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc fe06 	bl	8000a0c <__aeabi_dcmpun>
 8003e00:	b148      	cbz	r0, 8003e16 <_printf_float+0xe2>
 8003e02:	464b      	mov	r3, r9
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bfb8      	it	lt
 8003e08:	232d      	movlt	r3, #45	@ 0x2d
 8003e0a:	4a80      	ldr	r2, [pc, #512]	@ (800400c <_printf_float+0x2d8>)
 8003e0c:	bfb8      	it	lt
 8003e0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e12:	4b7f      	ldr	r3, [pc, #508]	@ (8004010 <_printf_float+0x2dc>)
 8003e14:	e7d3      	b.n	8003dbe <_printf_float+0x8a>
 8003e16:	6863      	ldr	r3, [r4, #4]
 8003e18:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	d13f      	bne.n	8003ea0 <_printf_float+0x16c>
 8003e20:	2306      	movs	r3, #6
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	9206      	str	r2, [sp, #24]
 8003e2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003e30:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003e34:	aa0d      	add	r2, sp, #52	@ 0x34
 8003e36:	9203      	str	r2, [sp, #12]
 8003e38:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003e3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	4642      	mov	r2, r8
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4628      	mov	r0, r5
 8003e48:	464b      	mov	r3, r9
 8003e4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003e4c:	f7ff fed4 	bl	8003bf8 <__cvt>
 8003e50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e52:	4680      	mov	r8, r0
 8003e54:	2947      	cmp	r1, #71	@ 0x47
 8003e56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003e58:	d128      	bne.n	8003eac <_printf_float+0x178>
 8003e5a:	1cc8      	adds	r0, r1, #3
 8003e5c:	db02      	blt.n	8003e64 <_printf_float+0x130>
 8003e5e:	6863      	ldr	r3, [r4, #4]
 8003e60:	4299      	cmp	r1, r3
 8003e62:	dd40      	ble.n	8003ee6 <_printf_float+0x1b2>
 8003e64:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e68:	fa5f fa8a 	uxtb.w	sl, sl
 8003e6c:	4652      	mov	r2, sl
 8003e6e:	3901      	subs	r1, #1
 8003e70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e74:	910d      	str	r1, [sp, #52]	@ 0x34
 8003e76:	f7ff ff23 	bl	8003cc0 <__exponent>
 8003e7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e7c:	4681      	mov	r9, r0
 8003e7e:	1813      	adds	r3, r2, r0
 8003e80:	2a01      	cmp	r2, #1
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	dc02      	bgt.n	8003e8c <_printf_float+0x158>
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	07d2      	lsls	r2, r2, #31
 8003e8a:	d501      	bpl.n	8003e90 <_printf_float+0x15c>
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	6123      	str	r3, [r4, #16]
 8003e90:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d09e      	beq.n	8003dd6 <_printf_float+0xa2>
 8003e98:	232d      	movs	r3, #45	@ 0x2d
 8003e9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e9e:	e79a      	b.n	8003dd6 <_printf_float+0xa2>
 8003ea0:	2947      	cmp	r1, #71	@ 0x47
 8003ea2:	d1bf      	bne.n	8003e24 <_printf_float+0xf0>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1bd      	bne.n	8003e24 <_printf_float+0xf0>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e7ba      	b.n	8003e22 <_printf_float+0xee>
 8003eac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003eb0:	d9dc      	bls.n	8003e6c <_printf_float+0x138>
 8003eb2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003eb6:	d118      	bne.n	8003eea <_printf_float+0x1b6>
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	6863      	ldr	r3, [r4, #4]
 8003ebc:	dd0b      	ble.n	8003ed6 <_printf_float+0x1a2>
 8003ebe:	6121      	str	r1, [r4, #16]
 8003ec0:	b913      	cbnz	r3, 8003ec8 <_printf_float+0x194>
 8003ec2:	6822      	ldr	r2, [r4, #0]
 8003ec4:	07d0      	lsls	r0, r2, #31
 8003ec6:	d502      	bpl.n	8003ece <_printf_float+0x19a>
 8003ec8:	3301      	adds	r3, #1
 8003eca:	440b      	add	r3, r1
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	f04f 0900 	mov.w	r9, #0
 8003ed2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ed4:	e7dc      	b.n	8003e90 <_printf_float+0x15c>
 8003ed6:	b913      	cbnz	r3, 8003ede <_printf_float+0x1aa>
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	07d2      	lsls	r2, r2, #31
 8003edc:	d501      	bpl.n	8003ee2 <_printf_float+0x1ae>
 8003ede:	3302      	adds	r3, #2
 8003ee0:	e7f4      	b.n	8003ecc <_printf_float+0x198>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e7f2      	b.n	8003ecc <_printf_float+0x198>
 8003ee6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003eec:	4299      	cmp	r1, r3
 8003eee:	db05      	blt.n	8003efc <_printf_float+0x1c8>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	6121      	str	r1, [r4, #16]
 8003ef4:	07d8      	lsls	r0, r3, #31
 8003ef6:	d5ea      	bpl.n	8003ece <_printf_float+0x19a>
 8003ef8:	1c4b      	adds	r3, r1, #1
 8003efa:	e7e7      	b.n	8003ecc <_printf_float+0x198>
 8003efc:	2900      	cmp	r1, #0
 8003efe:	bfcc      	ite	gt
 8003f00:	2201      	movgt	r2, #1
 8003f02:	f1c1 0202 	rsble	r2, r1, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	e7e0      	b.n	8003ecc <_printf_float+0x198>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	055a      	lsls	r2, r3, #21
 8003f0e:	d407      	bmi.n	8003f20 <_printf_float+0x1ec>
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	4642      	mov	r2, r8
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d12b      	bne.n	8003f76 <_printf_float+0x242>
 8003f1e:	e764      	b.n	8003dea <_printf_float+0xb6>
 8003f20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f24:	f240 80dc 	bls.w	80040e0 <_printf_float+0x3ac>
 8003f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f7fc fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d033      	beq.n	8003fa0 <_printf_float+0x26c>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	4a35      	ldr	r2, [pc, #212]	@ (8004014 <_printf_float+0x2e0>)
 8003f40:	47b8      	blx	r7
 8003f42:	3001      	adds	r0, #1
 8003f44:	f43f af51 	beq.w	8003dea <_printf_float+0xb6>
 8003f48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003f4c:	4543      	cmp	r3, r8
 8003f4e:	db02      	blt.n	8003f56 <_printf_float+0x222>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	07d8      	lsls	r0, r3, #31
 8003f54:	d50f      	bpl.n	8003f76 <_printf_float+0x242>
 8003f56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	f43f af42 	beq.w	8003dea <_printf_float+0xb6>
 8003f66:	f04f 0900 	mov.w	r9, #0
 8003f6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f6e:	f104 0a1a 	add.w	sl, r4, #26
 8003f72:	45c8      	cmp	r8, r9
 8003f74:	dc09      	bgt.n	8003f8a <_printf_float+0x256>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	079b      	lsls	r3, r3, #30
 8003f7a:	f100 8102 	bmi.w	8004182 <_printf_float+0x44e>
 8003f7e:	68e0      	ldr	r0, [r4, #12]
 8003f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f82:	4298      	cmp	r0, r3
 8003f84:	bfb8      	it	lt
 8003f86:	4618      	movlt	r0, r3
 8003f88:	e731      	b.n	8003dee <_printf_float+0xba>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b8      	blx	r7
 8003f94:	3001      	adds	r0, #1
 8003f96:	f43f af28 	beq.w	8003dea <_printf_float+0xb6>
 8003f9a:	f109 0901 	add.w	r9, r9, #1
 8003f9e:	e7e8      	b.n	8003f72 <_printf_float+0x23e>
 8003fa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	dc38      	bgt.n	8004018 <_printf_float+0x2e4>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4631      	mov	r1, r6
 8003faa:	4628      	mov	r0, r5
 8003fac:	4a19      	ldr	r2, [pc, #100]	@ (8004014 <_printf_float+0x2e0>)
 8003fae:	47b8      	blx	r7
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	f43f af1a 	beq.w	8003dea <_printf_float+0xb6>
 8003fb6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003fba:	ea59 0303 	orrs.w	r3, r9, r3
 8003fbe:	d102      	bne.n	8003fc6 <_printf_float+0x292>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	07d9      	lsls	r1, r3, #31
 8003fc4:	d5d7      	bpl.n	8003f76 <_printf_float+0x242>
 8003fc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fca:	4631      	mov	r1, r6
 8003fcc:	4628      	mov	r0, r5
 8003fce:	47b8      	blx	r7
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	f43f af0a 	beq.w	8003dea <_printf_float+0xb6>
 8003fd6:	f04f 0a00 	mov.w	sl, #0
 8003fda:	f104 0b1a 	add.w	fp, r4, #26
 8003fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fe0:	425b      	negs	r3, r3
 8003fe2:	4553      	cmp	r3, sl
 8003fe4:	dc01      	bgt.n	8003fea <_printf_float+0x2b6>
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	e793      	b.n	8003f12 <_printf_float+0x1de>
 8003fea:	2301      	movs	r3, #1
 8003fec:	465a      	mov	r2, fp
 8003fee:	4631      	mov	r1, r6
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b8      	blx	r7
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	f43f aef8 	beq.w	8003dea <_printf_float+0xb6>
 8003ffa:	f10a 0a01 	add.w	sl, sl, #1
 8003ffe:	e7ee      	b.n	8003fde <_printf_float+0x2aa>
 8004000:	7fefffff 	.word	0x7fefffff
 8004004:	080089c2 	.word	0x080089c2
 8004008:	080089be 	.word	0x080089be
 800400c:	080089ca 	.word	0x080089ca
 8004010:	080089c6 	.word	0x080089c6
 8004014:	080089ce 	.word	0x080089ce
 8004018:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800401a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800401e:	4553      	cmp	r3, sl
 8004020:	bfa8      	it	ge
 8004022:	4653      	movge	r3, sl
 8004024:	2b00      	cmp	r3, #0
 8004026:	4699      	mov	r9, r3
 8004028:	dc36      	bgt.n	8004098 <_printf_float+0x364>
 800402a:	f04f 0b00 	mov.w	fp, #0
 800402e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004032:	f104 021a 	add.w	r2, r4, #26
 8004036:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004038:	930a      	str	r3, [sp, #40]	@ 0x28
 800403a:	eba3 0309 	sub.w	r3, r3, r9
 800403e:	455b      	cmp	r3, fp
 8004040:	dc31      	bgt.n	80040a6 <_printf_float+0x372>
 8004042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004044:	459a      	cmp	sl, r3
 8004046:	dc3a      	bgt.n	80040be <_printf_float+0x38a>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	07da      	lsls	r2, r3, #31
 800404c:	d437      	bmi.n	80040be <_printf_float+0x38a>
 800404e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004050:	ebaa 0903 	sub.w	r9, sl, r3
 8004054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004056:	ebaa 0303 	sub.w	r3, sl, r3
 800405a:	4599      	cmp	r9, r3
 800405c:	bfa8      	it	ge
 800405e:	4699      	movge	r9, r3
 8004060:	f1b9 0f00 	cmp.w	r9, #0
 8004064:	dc33      	bgt.n	80040ce <_printf_float+0x39a>
 8004066:	f04f 0800 	mov.w	r8, #0
 800406a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800406e:	f104 0b1a 	add.w	fp, r4, #26
 8004072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004074:	ebaa 0303 	sub.w	r3, sl, r3
 8004078:	eba3 0309 	sub.w	r3, r3, r9
 800407c:	4543      	cmp	r3, r8
 800407e:	f77f af7a 	ble.w	8003f76 <_printf_float+0x242>
 8004082:	2301      	movs	r3, #1
 8004084:	465a      	mov	r2, fp
 8004086:	4631      	mov	r1, r6
 8004088:	4628      	mov	r0, r5
 800408a:	47b8      	blx	r7
 800408c:	3001      	adds	r0, #1
 800408e:	f43f aeac 	beq.w	8003dea <_printf_float+0xb6>
 8004092:	f108 0801 	add.w	r8, r8, #1
 8004096:	e7ec      	b.n	8004072 <_printf_float+0x33e>
 8004098:	4642      	mov	r2, r8
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	d1c2      	bne.n	800402a <_printf_float+0x2f6>
 80040a4:	e6a1      	b.n	8003dea <_printf_float+0xb6>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80040ae:	47b8      	blx	r7
 80040b0:	3001      	adds	r0, #1
 80040b2:	f43f ae9a 	beq.w	8003dea <_printf_float+0xb6>
 80040b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040b8:	f10b 0b01 	add.w	fp, fp, #1
 80040bc:	e7bb      	b.n	8004036 <_printf_float+0x302>
 80040be:	4631      	mov	r1, r6
 80040c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	d1c0      	bne.n	800404e <_printf_float+0x31a>
 80040cc:	e68d      	b.n	8003dea <_printf_float+0xb6>
 80040ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040d0:	464b      	mov	r3, r9
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	4442      	add	r2, r8
 80040d8:	47b8      	blx	r7
 80040da:	3001      	adds	r0, #1
 80040dc:	d1c3      	bne.n	8004066 <_printf_float+0x332>
 80040de:	e684      	b.n	8003dea <_printf_float+0xb6>
 80040e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80040e4:	f1ba 0f01 	cmp.w	sl, #1
 80040e8:	dc01      	bgt.n	80040ee <_printf_float+0x3ba>
 80040ea:	07db      	lsls	r3, r3, #31
 80040ec:	d536      	bpl.n	800415c <_printf_float+0x428>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4642      	mov	r2, r8
 80040f2:	4631      	mov	r1, r6
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	f43f ae76 	beq.w	8003dea <_printf_float+0xb6>
 80040fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004102:	4631      	mov	r1, r6
 8004104:	4628      	mov	r0, r5
 8004106:	47b8      	blx	r7
 8004108:	3001      	adds	r0, #1
 800410a:	f43f ae6e 	beq.w	8003dea <_printf_float+0xb6>
 800410e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004112:	2200      	movs	r2, #0
 8004114:	2300      	movs	r3, #0
 8004116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800411a:	f7fc fc45 	bl	80009a8 <__aeabi_dcmpeq>
 800411e:	b9c0      	cbnz	r0, 8004152 <_printf_float+0x41e>
 8004120:	4653      	mov	r3, sl
 8004122:	f108 0201 	add.w	r2, r8, #1
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	d10c      	bne.n	800414a <_printf_float+0x416>
 8004130:	e65b      	b.n	8003dea <_printf_float+0xb6>
 8004132:	2301      	movs	r3, #1
 8004134:	465a      	mov	r2, fp
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	f43f ae54 	beq.w	8003dea <_printf_float+0xb6>
 8004142:	f108 0801 	add.w	r8, r8, #1
 8004146:	45d0      	cmp	r8, sl
 8004148:	dbf3      	blt.n	8004132 <_printf_float+0x3fe>
 800414a:	464b      	mov	r3, r9
 800414c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004150:	e6e0      	b.n	8003f14 <_printf_float+0x1e0>
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	f104 0b1a 	add.w	fp, r4, #26
 800415a:	e7f4      	b.n	8004146 <_printf_float+0x412>
 800415c:	2301      	movs	r3, #1
 800415e:	4642      	mov	r2, r8
 8004160:	e7e1      	b.n	8004126 <_printf_float+0x3f2>
 8004162:	2301      	movs	r3, #1
 8004164:	464a      	mov	r2, r9
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	f43f ae3c 	beq.w	8003dea <_printf_float+0xb6>
 8004172:	f108 0801 	add.w	r8, r8, #1
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800417a:	1a5b      	subs	r3, r3, r1
 800417c:	4543      	cmp	r3, r8
 800417e:	dcf0      	bgt.n	8004162 <_printf_float+0x42e>
 8004180:	e6fd      	b.n	8003f7e <_printf_float+0x24a>
 8004182:	f04f 0800 	mov.w	r8, #0
 8004186:	f104 0919 	add.w	r9, r4, #25
 800418a:	e7f4      	b.n	8004176 <_printf_float+0x442>

0800418c <_printf_common>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	4616      	mov	r6, r2
 8004192:	4698      	mov	r8, r3
 8004194:	688a      	ldr	r2, [r1, #8]
 8004196:	690b      	ldr	r3, [r1, #16]
 8004198:	4607      	mov	r7, r0
 800419a:	4293      	cmp	r3, r2
 800419c:	bfb8      	it	lt
 800419e:	4613      	movlt	r3, r2
 80041a0:	6033      	str	r3, [r6, #0]
 80041a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041a6:	460c      	mov	r4, r1
 80041a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041ac:	b10a      	cbz	r2, 80041b2 <_printf_common+0x26>
 80041ae:	3301      	adds	r3, #1
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	0699      	lsls	r1, r3, #26
 80041b6:	bf42      	ittt	mi
 80041b8:	6833      	ldrmi	r3, [r6, #0]
 80041ba:	3302      	addmi	r3, #2
 80041bc:	6033      	strmi	r3, [r6, #0]
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	f015 0506 	ands.w	r5, r5, #6
 80041c4:	d106      	bne.n	80041d4 <_printf_common+0x48>
 80041c6:	f104 0a19 	add.w	sl, r4, #25
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	6832      	ldr	r2, [r6, #0]
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	42ab      	cmp	r3, r5
 80041d2:	dc2b      	bgt.n	800422c <_printf_common+0xa0>
 80041d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	3b00      	subs	r3, #0
 80041dc:	bf18      	it	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	0692      	lsls	r2, r2, #26
 80041e2:	d430      	bmi.n	8004246 <_printf_common+0xba>
 80041e4:	4641      	mov	r1, r8
 80041e6:	4638      	mov	r0, r7
 80041e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041ec:	47c8      	blx	r9
 80041ee:	3001      	adds	r0, #1
 80041f0:	d023      	beq.n	800423a <_printf_common+0xae>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	6922      	ldr	r2, [r4, #16]
 80041f6:	f003 0306 	and.w	r3, r3, #6
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	bf14      	ite	ne
 80041fe:	2500      	movne	r5, #0
 8004200:	6833      	ldreq	r3, [r6, #0]
 8004202:	f04f 0600 	mov.w	r6, #0
 8004206:	bf08      	it	eq
 8004208:	68e5      	ldreq	r5, [r4, #12]
 800420a:	f104 041a 	add.w	r4, r4, #26
 800420e:	bf08      	it	eq
 8004210:	1aed      	subeq	r5, r5, r3
 8004212:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004216:	bf08      	it	eq
 8004218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800421c:	4293      	cmp	r3, r2
 800421e:	bfc4      	itt	gt
 8004220:	1a9b      	subgt	r3, r3, r2
 8004222:	18ed      	addgt	r5, r5, r3
 8004224:	42b5      	cmp	r5, r6
 8004226:	d11a      	bne.n	800425e <_printf_common+0xd2>
 8004228:	2000      	movs	r0, #0
 800422a:	e008      	b.n	800423e <_printf_common+0xb2>
 800422c:	2301      	movs	r3, #1
 800422e:	4652      	mov	r2, sl
 8004230:	4641      	mov	r1, r8
 8004232:	4638      	mov	r0, r7
 8004234:	47c8      	blx	r9
 8004236:	3001      	adds	r0, #1
 8004238:	d103      	bne.n	8004242 <_printf_common+0xb6>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004242:	3501      	adds	r5, #1
 8004244:	e7c1      	b.n	80041ca <_printf_common+0x3e>
 8004246:	2030      	movs	r0, #48	@ 0x30
 8004248:	18e1      	adds	r1, r4, r3
 800424a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004254:	4422      	add	r2, r4
 8004256:	3302      	adds	r3, #2
 8004258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800425c:	e7c2      	b.n	80041e4 <_printf_common+0x58>
 800425e:	2301      	movs	r3, #1
 8004260:	4622      	mov	r2, r4
 8004262:	4641      	mov	r1, r8
 8004264:	4638      	mov	r0, r7
 8004266:	47c8      	blx	r9
 8004268:	3001      	adds	r0, #1
 800426a:	d0e6      	beq.n	800423a <_printf_common+0xae>
 800426c:	3601      	adds	r6, #1
 800426e:	e7d9      	b.n	8004224 <_printf_common+0x98>

08004270 <_printf_i>:
 8004270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	7e0f      	ldrb	r7, [r1, #24]
 8004276:	4691      	mov	r9, r2
 8004278:	2f78      	cmp	r7, #120	@ 0x78
 800427a:	4680      	mov	r8, r0
 800427c:	460c      	mov	r4, r1
 800427e:	469a      	mov	sl, r3
 8004280:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004286:	d807      	bhi.n	8004298 <_printf_i+0x28>
 8004288:	2f62      	cmp	r7, #98	@ 0x62
 800428a:	d80a      	bhi.n	80042a2 <_printf_i+0x32>
 800428c:	2f00      	cmp	r7, #0
 800428e:	f000 80d1 	beq.w	8004434 <_printf_i+0x1c4>
 8004292:	2f58      	cmp	r7, #88	@ 0x58
 8004294:	f000 80b8 	beq.w	8004408 <_printf_i+0x198>
 8004298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800429c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042a0:	e03a      	b.n	8004318 <_printf_i+0xa8>
 80042a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042a6:	2b15      	cmp	r3, #21
 80042a8:	d8f6      	bhi.n	8004298 <_printf_i+0x28>
 80042aa:	a101      	add	r1, pc, #4	@ (adr r1, 80042b0 <_printf_i+0x40>)
 80042ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042b0:	08004309 	.word	0x08004309
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	08004299 	.word	0x08004299
 80042bc:	08004299 	.word	0x08004299
 80042c0:	08004299 	.word	0x08004299
 80042c4:	08004299 	.word	0x08004299
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	08004299 	.word	0x08004299
 80042d0:	08004299 	.word	0x08004299
 80042d4:	08004299 	.word	0x08004299
 80042d8:	08004299 	.word	0x08004299
 80042dc:	0800441b 	.word	0x0800441b
 80042e0:	08004347 	.word	0x08004347
 80042e4:	080043d5 	.word	0x080043d5
 80042e8:	08004299 	.word	0x08004299
 80042ec:	08004299 	.word	0x08004299
 80042f0:	0800443d 	.word	0x0800443d
 80042f4:	08004299 	.word	0x08004299
 80042f8:	08004347 	.word	0x08004347
 80042fc:	08004299 	.word	0x08004299
 8004300:	08004299 	.word	0x08004299
 8004304:	080043dd 	.word	0x080043dd
 8004308:	6833      	ldr	r3, [r6, #0]
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6032      	str	r2, [r6, #0]
 8004310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004318:	2301      	movs	r3, #1
 800431a:	e09c      	b.n	8004456 <_printf_i+0x1e6>
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	1d19      	adds	r1, r3, #4
 8004322:	6031      	str	r1, [r6, #0]
 8004324:	0606      	lsls	r6, r0, #24
 8004326:	d501      	bpl.n	800432c <_printf_i+0xbc>
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	e003      	b.n	8004334 <_printf_i+0xc4>
 800432c:	0645      	lsls	r5, r0, #25
 800432e:	d5fb      	bpl.n	8004328 <_printf_i+0xb8>
 8004330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004334:	2d00      	cmp	r5, #0
 8004336:	da03      	bge.n	8004340 <_printf_i+0xd0>
 8004338:	232d      	movs	r3, #45	@ 0x2d
 800433a:	426d      	negs	r5, r5
 800433c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004340:	230a      	movs	r3, #10
 8004342:	4858      	ldr	r0, [pc, #352]	@ (80044a4 <_printf_i+0x234>)
 8004344:	e011      	b.n	800436a <_printf_i+0xfa>
 8004346:	6821      	ldr	r1, [r4, #0]
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	0608      	lsls	r0, r1, #24
 800434c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004350:	d402      	bmi.n	8004358 <_printf_i+0xe8>
 8004352:	0649      	lsls	r1, r1, #25
 8004354:	bf48      	it	mi
 8004356:	b2ad      	uxthmi	r5, r5
 8004358:	2f6f      	cmp	r7, #111	@ 0x6f
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	bf14      	ite	ne
 800435e:	230a      	movne	r3, #10
 8004360:	2308      	moveq	r3, #8
 8004362:	4850      	ldr	r0, [pc, #320]	@ (80044a4 <_printf_i+0x234>)
 8004364:	2100      	movs	r1, #0
 8004366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800436a:	6866      	ldr	r6, [r4, #4]
 800436c:	2e00      	cmp	r6, #0
 800436e:	60a6      	str	r6, [r4, #8]
 8004370:	db05      	blt.n	800437e <_printf_i+0x10e>
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	432e      	orrs	r6, r5
 8004376:	f021 0104 	bic.w	r1, r1, #4
 800437a:	6021      	str	r1, [r4, #0]
 800437c:	d04b      	beq.n	8004416 <_printf_i+0x1a6>
 800437e:	4616      	mov	r6, r2
 8004380:	fbb5 f1f3 	udiv	r1, r5, r3
 8004384:	fb03 5711 	mls	r7, r3, r1, r5
 8004388:	5dc7      	ldrb	r7, [r0, r7]
 800438a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800438e:	462f      	mov	r7, r5
 8004390:	42bb      	cmp	r3, r7
 8004392:	460d      	mov	r5, r1
 8004394:	d9f4      	bls.n	8004380 <_printf_i+0x110>
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10b      	bne.n	80043b2 <_printf_i+0x142>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	07df      	lsls	r7, r3, #31
 800439e:	d508      	bpl.n	80043b2 <_printf_i+0x142>
 80043a0:	6923      	ldr	r3, [r4, #16]
 80043a2:	6861      	ldr	r1, [r4, #4]
 80043a4:	4299      	cmp	r1, r3
 80043a6:	bfde      	ittt	le
 80043a8:	2330      	movle	r3, #48	@ 0x30
 80043aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043b2:	1b92      	subs	r2, r2, r6
 80043b4:	6122      	str	r2, [r4, #16]
 80043b6:	464b      	mov	r3, r9
 80043b8:	4621      	mov	r1, r4
 80043ba:	4640      	mov	r0, r8
 80043bc:	f8cd a000 	str.w	sl, [sp]
 80043c0:	aa03      	add	r2, sp, #12
 80043c2:	f7ff fee3 	bl	800418c <_printf_common>
 80043c6:	3001      	adds	r0, #1
 80043c8:	d14a      	bne.n	8004460 <_printf_i+0x1f0>
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	b004      	add	sp, #16
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	f043 0320 	orr.w	r3, r3, #32
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	2778      	movs	r7, #120	@ 0x78
 80043de:	4832      	ldr	r0, [pc, #200]	@ (80044a8 <_printf_i+0x238>)
 80043e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	6831      	ldr	r1, [r6, #0]
 80043e8:	061f      	lsls	r7, r3, #24
 80043ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80043ee:	d402      	bmi.n	80043f6 <_printf_i+0x186>
 80043f0:	065f      	lsls	r7, r3, #25
 80043f2:	bf48      	it	mi
 80043f4:	b2ad      	uxthmi	r5, r5
 80043f6:	6031      	str	r1, [r6, #0]
 80043f8:	07d9      	lsls	r1, r3, #31
 80043fa:	bf44      	itt	mi
 80043fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004400:	6023      	strmi	r3, [r4, #0]
 8004402:	b11d      	cbz	r5, 800440c <_printf_i+0x19c>
 8004404:	2310      	movs	r3, #16
 8004406:	e7ad      	b.n	8004364 <_printf_i+0xf4>
 8004408:	4826      	ldr	r0, [pc, #152]	@ (80044a4 <_printf_i+0x234>)
 800440a:	e7e9      	b.n	80043e0 <_printf_i+0x170>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	f023 0320 	bic.w	r3, r3, #32
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	e7f6      	b.n	8004404 <_printf_i+0x194>
 8004416:	4616      	mov	r6, r2
 8004418:	e7bd      	b.n	8004396 <_printf_i+0x126>
 800441a:	6833      	ldr	r3, [r6, #0]
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	1d18      	adds	r0, r3, #4
 8004420:	6961      	ldr	r1, [r4, #20]
 8004422:	6030      	str	r0, [r6, #0]
 8004424:	062e      	lsls	r6, r5, #24
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	d501      	bpl.n	800442e <_printf_i+0x1be>
 800442a:	6019      	str	r1, [r3, #0]
 800442c:	e002      	b.n	8004434 <_printf_i+0x1c4>
 800442e:	0668      	lsls	r0, r5, #25
 8004430:	d5fb      	bpl.n	800442a <_printf_i+0x1ba>
 8004432:	8019      	strh	r1, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	4616      	mov	r6, r2
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	e7bc      	b.n	80043b6 <_printf_i+0x146>
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	2100      	movs	r1, #0
 8004440:	1d1a      	adds	r2, r3, #4
 8004442:	6032      	str	r2, [r6, #0]
 8004444:	681e      	ldr	r6, [r3, #0]
 8004446:	6862      	ldr	r2, [r4, #4]
 8004448:	4630      	mov	r0, r6
 800444a:	f000 fbf0 	bl	8004c2e <memchr>
 800444e:	b108      	cbz	r0, 8004454 <_printf_i+0x1e4>
 8004450:	1b80      	subs	r0, r0, r6
 8004452:	6060      	str	r0, [r4, #4]
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	6123      	str	r3, [r4, #16]
 8004458:	2300      	movs	r3, #0
 800445a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800445e:	e7aa      	b.n	80043b6 <_printf_i+0x146>
 8004460:	4632      	mov	r2, r6
 8004462:	4649      	mov	r1, r9
 8004464:	4640      	mov	r0, r8
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	47d0      	blx	sl
 800446a:	3001      	adds	r0, #1
 800446c:	d0ad      	beq.n	80043ca <_printf_i+0x15a>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	079b      	lsls	r3, r3, #30
 8004472:	d413      	bmi.n	800449c <_printf_i+0x22c>
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	4298      	cmp	r0, r3
 800447a:	bfb8      	it	lt
 800447c:	4618      	movlt	r0, r3
 800447e:	e7a6      	b.n	80043ce <_printf_i+0x15e>
 8004480:	2301      	movs	r3, #1
 8004482:	4632      	mov	r2, r6
 8004484:	4649      	mov	r1, r9
 8004486:	4640      	mov	r0, r8
 8004488:	47d0      	blx	sl
 800448a:	3001      	adds	r0, #1
 800448c:	d09d      	beq.n	80043ca <_printf_i+0x15a>
 800448e:	3501      	adds	r5, #1
 8004490:	68e3      	ldr	r3, [r4, #12]
 8004492:	9903      	ldr	r1, [sp, #12]
 8004494:	1a5b      	subs	r3, r3, r1
 8004496:	42ab      	cmp	r3, r5
 8004498:	dcf2      	bgt.n	8004480 <_printf_i+0x210>
 800449a:	e7eb      	b.n	8004474 <_printf_i+0x204>
 800449c:	2500      	movs	r5, #0
 800449e:	f104 0619 	add.w	r6, r4, #25
 80044a2:	e7f5      	b.n	8004490 <_printf_i+0x220>
 80044a4:	080089d0 	.word	0x080089d0
 80044a8:	080089e1 	.word	0x080089e1

080044ac <_scanf_float>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	b087      	sub	sp, #28
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	688b      	ldr	r3, [r1, #8]
 80044b6:	4691      	mov	r9, r2
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80044be:	bf82      	ittt	hi
 80044c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80044c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80044c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80044cc:	460a      	mov	r2, r1
 80044ce:	f04f 0500 	mov.w	r5, #0
 80044d2:	bf88      	it	hi
 80044d4:	608b      	strhi	r3, [r1, #8]
 80044d6:	680b      	ldr	r3, [r1, #0]
 80044d8:	4680      	mov	r8, r0
 80044da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80044de:	f842 3b1c 	str.w	r3, [r2], #28
 80044e2:	460c      	mov	r4, r1
 80044e4:	bf98      	it	ls
 80044e6:	f04f 0b00 	movls.w	fp, #0
 80044ea:	4616      	mov	r6, r2
 80044ec:	46aa      	mov	sl, r5
 80044ee:	462f      	mov	r7, r5
 80044f0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80044f4:	9201      	str	r2, [sp, #4]
 80044f6:	9502      	str	r5, [sp, #8]
 80044f8:	68a2      	ldr	r2, [r4, #8]
 80044fa:	b15a      	cbz	r2, 8004514 <_scanf_float+0x68>
 80044fc:	f8d9 3000 	ldr.w	r3, [r9]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b4e      	cmp	r3, #78	@ 0x4e
 8004504:	d862      	bhi.n	80045cc <_scanf_float+0x120>
 8004506:	2b40      	cmp	r3, #64	@ 0x40
 8004508:	d83a      	bhi.n	8004580 <_scanf_float+0xd4>
 800450a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800450e:	b2c8      	uxtb	r0, r1
 8004510:	280e      	cmp	r0, #14
 8004512:	d938      	bls.n	8004586 <_scanf_float+0xda>
 8004514:	b11f      	cbz	r7, 800451e <_scanf_float+0x72>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004522:	f1ba 0f01 	cmp.w	sl, #1
 8004526:	f200 8114 	bhi.w	8004752 <_scanf_float+0x2a6>
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	429e      	cmp	r6, r3
 800452e:	f200 8105 	bhi.w	800473c <_scanf_float+0x290>
 8004532:	2001      	movs	r0, #1
 8004534:	b007      	add	sp, #28
 8004536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800453e:	2a0d      	cmp	r2, #13
 8004540:	d8e8      	bhi.n	8004514 <_scanf_float+0x68>
 8004542:	a101      	add	r1, pc, #4	@ (adr r1, 8004548 <_scanf_float+0x9c>)
 8004544:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004548:	08004691 	.word	0x08004691
 800454c:	08004515 	.word	0x08004515
 8004550:	08004515 	.word	0x08004515
 8004554:	08004515 	.word	0x08004515
 8004558:	080046ed 	.word	0x080046ed
 800455c:	080046c7 	.word	0x080046c7
 8004560:	08004515 	.word	0x08004515
 8004564:	08004515 	.word	0x08004515
 8004568:	0800469f 	.word	0x0800469f
 800456c:	08004515 	.word	0x08004515
 8004570:	08004515 	.word	0x08004515
 8004574:	08004515 	.word	0x08004515
 8004578:	08004515 	.word	0x08004515
 800457c:	0800465b 	.word	0x0800465b
 8004580:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004584:	e7db      	b.n	800453e <_scanf_float+0x92>
 8004586:	290e      	cmp	r1, #14
 8004588:	d8c4      	bhi.n	8004514 <_scanf_float+0x68>
 800458a:	a001      	add	r0, pc, #4	@ (adr r0, 8004590 <_scanf_float+0xe4>)
 800458c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004590:	0800464b 	.word	0x0800464b
 8004594:	08004515 	.word	0x08004515
 8004598:	0800464b 	.word	0x0800464b
 800459c:	080046db 	.word	0x080046db
 80045a0:	08004515 	.word	0x08004515
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	08004631 	.word	0x08004631
 80045ac:	08004631 	.word	0x08004631
 80045b0:	08004631 	.word	0x08004631
 80045b4:	08004631 	.word	0x08004631
 80045b8:	08004631 	.word	0x08004631
 80045bc:	08004631 	.word	0x08004631
 80045c0:	08004631 	.word	0x08004631
 80045c4:	08004631 	.word	0x08004631
 80045c8:	08004631 	.word	0x08004631
 80045cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80045ce:	d809      	bhi.n	80045e4 <_scanf_float+0x138>
 80045d0:	2b60      	cmp	r3, #96	@ 0x60
 80045d2:	d8b2      	bhi.n	800453a <_scanf_float+0x8e>
 80045d4:	2b54      	cmp	r3, #84	@ 0x54
 80045d6:	d07b      	beq.n	80046d0 <_scanf_float+0x224>
 80045d8:	2b59      	cmp	r3, #89	@ 0x59
 80045da:	d19b      	bne.n	8004514 <_scanf_float+0x68>
 80045dc:	2d07      	cmp	r5, #7
 80045de:	d199      	bne.n	8004514 <_scanf_float+0x68>
 80045e0:	2508      	movs	r5, #8
 80045e2:	e02f      	b.n	8004644 <_scanf_float+0x198>
 80045e4:	2b74      	cmp	r3, #116	@ 0x74
 80045e6:	d073      	beq.n	80046d0 <_scanf_float+0x224>
 80045e8:	2b79      	cmp	r3, #121	@ 0x79
 80045ea:	e7f6      	b.n	80045da <_scanf_float+0x12e>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	05c8      	lsls	r0, r1, #23
 80045f0:	d51e      	bpl.n	8004630 <_scanf_float+0x184>
 80045f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80045f6:	6021      	str	r1, [r4, #0]
 80045f8:	3701      	adds	r7, #1
 80045fa:	f1bb 0f00 	cmp.w	fp, #0
 80045fe:	d003      	beq.n	8004608 <_scanf_float+0x15c>
 8004600:	3201      	adds	r2, #1
 8004602:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004606:	60a2      	str	r2, [r4, #8]
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	3b01      	subs	r3, #1
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	3301      	adds	r3, #1
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004618:	3b01      	subs	r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	f8c9 3004 	str.w	r3, [r9, #4]
 8004620:	f340 8083 	ble.w	800472a <_scanf_float+0x27e>
 8004624:	f8d9 3000 	ldr.w	r3, [r9]
 8004628:	3301      	adds	r3, #1
 800462a:	f8c9 3000 	str.w	r3, [r9]
 800462e:	e763      	b.n	80044f8 <_scanf_float+0x4c>
 8004630:	eb1a 0105 	adds.w	r1, sl, r5
 8004634:	f47f af6e 	bne.w	8004514 <_scanf_float+0x68>
 8004638:	460d      	mov	r5, r1
 800463a:	468a      	mov	sl, r1
 800463c:	6822      	ldr	r2, [r4, #0]
 800463e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004642:	6022      	str	r2, [r4, #0]
 8004644:	f806 3b01 	strb.w	r3, [r6], #1
 8004648:	e7de      	b.n	8004608 <_scanf_float+0x15c>
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	0610      	lsls	r0, r2, #24
 800464e:	f57f af61 	bpl.w	8004514 <_scanf_float+0x68>
 8004652:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	e7f4      	b.n	8004644 <_scanf_float+0x198>
 800465a:	f1ba 0f00 	cmp.w	sl, #0
 800465e:	d10c      	bne.n	800467a <_scanf_float+0x1ce>
 8004660:	b977      	cbnz	r7, 8004680 <_scanf_float+0x1d4>
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004668:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800466c:	d108      	bne.n	8004680 <_scanf_float+0x1d4>
 800466e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004672:	f04f 0a01 	mov.w	sl, #1
 8004676:	6022      	str	r2, [r4, #0]
 8004678:	e7e4      	b.n	8004644 <_scanf_float+0x198>
 800467a:	f1ba 0f02 	cmp.w	sl, #2
 800467e:	d051      	beq.n	8004724 <_scanf_float+0x278>
 8004680:	2d01      	cmp	r5, #1
 8004682:	d002      	beq.n	800468a <_scanf_float+0x1de>
 8004684:	2d04      	cmp	r5, #4
 8004686:	f47f af45 	bne.w	8004514 <_scanf_float+0x68>
 800468a:	3501      	adds	r5, #1
 800468c:	b2ed      	uxtb	r5, r5
 800468e:	e7d9      	b.n	8004644 <_scanf_float+0x198>
 8004690:	f1ba 0f01 	cmp.w	sl, #1
 8004694:	f47f af3e 	bne.w	8004514 <_scanf_float+0x68>
 8004698:	f04f 0a02 	mov.w	sl, #2
 800469c:	e7d2      	b.n	8004644 <_scanf_float+0x198>
 800469e:	b975      	cbnz	r5, 80046be <_scanf_float+0x212>
 80046a0:	2f00      	cmp	r7, #0
 80046a2:	f47f af38 	bne.w	8004516 <_scanf_float+0x6a>
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80046ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80046b0:	f040 80ff 	bne.w	80048b2 <_scanf_float+0x406>
 80046b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046b8:	2501      	movs	r5, #1
 80046ba:	6022      	str	r2, [r4, #0]
 80046bc:	e7c2      	b.n	8004644 <_scanf_float+0x198>
 80046be:	2d03      	cmp	r5, #3
 80046c0:	d0e3      	beq.n	800468a <_scanf_float+0x1de>
 80046c2:	2d05      	cmp	r5, #5
 80046c4:	e7df      	b.n	8004686 <_scanf_float+0x1da>
 80046c6:	2d02      	cmp	r5, #2
 80046c8:	f47f af24 	bne.w	8004514 <_scanf_float+0x68>
 80046cc:	2503      	movs	r5, #3
 80046ce:	e7b9      	b.n	8004644 <_scanf_float+0x198>
 80046d0:	2d06      	cmp	r5, #6
 80046d2:	f47f af1f 	bne.w	8004514 <_scanf_float+0x68>
 80046d6:	2507      	movs	r5, #7
 80046d8:	e7b4      	b.n	8004644 <_scanf_float+0x198>
 80046da:	6822      	ldr	r2, [r4, #0]
 80046dc:	0591      	lsls	r1, r2, #22
 80046de:	f57f af19 	bpl.w	8004514 <_scanf_float+0x68>
 80046e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	9702      	str	r7, [sp, #8]
 80046ea:	e7ab      	b.n	8004644 <_scanf_float+0x198>
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80046f2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80046f6:	d005      	beq.n	8004704 <_scanf_float+0x258>
 80046f8:	0550      	lsls	r0, r2, #21
 80046fa:	f57f af0b 	bpl.w	8004514 <_scanf_float+0x68>
 80046fe:	2f00      	cmp	r7, #0
 8004700:	f000 80d7 	beq.w	80048b2 <_scanf_float+0x406>
 8004704:	0591      	lsls	r1, r2, #22
 8004706:	bf58      	it	pl
 8004708:	9902      	ldrpl	r1, [sp, #8]
 800470a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800470e:	bf58      	it	pl
 8004710:	1a79      	subpl	r1, r7, r1
 8004712:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004716:	f04f 0700 	mov.w	r7, #0
 800471a:	bf58      	it	pl
 800471c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	e78f      	b.n	8004644 <_scanf_float+0x198>
 8004724:	f04f 0a03 	mov.w	sl, #3
 8004728:	e78c      	b.n	8004644 <_scanf_float+0x198>
 800472a:	4649      	mov	r1, r9
 800472c:	4640      	mov	r0, r8
 800472e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004732:	4798      	blx	r3
 8004734:	2800      	cmp	r0, #0
 8004736:	f43f aedf 	beq.w	80044f8 <_scanf_float+0x4c>
 800473a:	e6eb      	b.n	8004514 <_scanf_float+0x68>
 800473c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004740:	464a      	mov	r2, r9
 8004742:	4640      	mov	r0, r8
 8004744:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004748:	4798      	blx	r3
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	3b01      	subs	r3, #1
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	e6eb      	b.n	800452a <_scanf_float+0x7e>
 8004752:	1e6b      	subs	r3, r5, #1
 8004754:	2b06      	cmp	r3, #6
 8004756:	d824      	bhi.n	80047a2 <_scanf_float+0x2f6>
 8004758:	2d02      	cmp	r5, #2
 800475a:	d836      	bhi.n	80047ca <_scanf_float+0x31e>
 800475c:	9b01      	ldr	r3, [sp, #4]
 800475e:	429e      	cmp	r6, r3
 8004760:	f67f aee7 	bls.w	8004532 <_scanf_float+0x86>
 8004764:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004768:	464a      	mov	r2, r9
 800476a:	4640      	mov	r0, r8
 800476c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004770:	4798      	blx	r3
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	3b01      	subs	r3, #1
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	e7f0      	b.n	800475c <_scanf_float+0x2b0>
 800477a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800477e:	464a      	mov	r2, r9
 8004780:	4640      	mov	r0, r8
 8004782:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004786:	4798      	blx	r3
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	3b01      	subs	r3, #1
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004792:	fa5f fa8a 	uxtb.w	sl, sl
 8004796:	f1ba 0f02 	cmp.w	sl, #2
 800479a:	d1ee      	bne.n	800477a <_scanf_float+0x2ce>
 800479c:	3d03      	subs	r5, #3
 800479e:	b2ed      	uxtb	r5, r5
 80047a0:	1b76      	subs	r6, r6, r5
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	05da      	lsls	r2, r3, #23
 80047a6:	d530      	bpl.n	800480a <_scanf_float+0x35e>
 80047a8:	055b      	lsls	r3, r3, #21
 80047aa:	d511      	bpl.n	80047d0 <_scanf_float+0x324>
 80047ac:	9b01      	ldr	r3, [sp, #4]
 80047ae:	429e      	cmp	r6, r3
 80047b0:	f67f aebf 	bls.w	8004532 <_scanf_float+0x86>
 80047b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047b8:	464a      	mov	r2, r9
 80047ba:	4640      	mov	r0, r8
 80047bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047c0:	4798      	blx	r3
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	6123      	str	r3, [r4, #16]
 80047c8:	e7f0      	b.n	80047ac <_scanf_float+0x300>
 80047ca:	46aa      	mov	sl, r5
 80047cc:	46b3      	mov	fp, r6
 80047ce:	e7de      	b.n	800478e <_scanf_float+0x2e2>
 80047d0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	2965      	cmp	r1, #101	@ 0x65
 80047d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80047dc:	f106 35ff 	add.w	r5, r6, #4294967295
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	d00c      	beq.n	80047fe <_scanf_float+0x352>
 80047e4:	2945      	cmp	r1, #69	@ 0x45
 80047e6:	d00a      	beq.n	80047fe <_scanf_float+0x352>
 80047e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047ec:	464a      	mov	r2, r9
 80047ee:	4640      	mov	r0, r8
 80047f0:	4798      	blx	r3
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	1eb5      	subs	r5, r6, #2
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	464a      	mov	r2, r9
 8004800:	4640      	mov	r0, r8
 8004802:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004806:	4798      	blx	r3
 8004808:	462e      	mov	r6, r5
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	f012 0210 	ands.w	r2, r2, #16
 8004810:	d001      	beq.n	8004816 <_scanf_float+0x36a>
 8004812:	2000      	movs	r0, #0
 8004814:	e68e      	b.n	8004534 <_scanf_float+0x88>
 8004816:	7032      	strb	r2, [r6, #0]
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004822:	d125      	bne.n	8004870 <_scanf_float+0x3c4>
 8004824:	9b02      	ldr	r3, [sp, #8]
 8004826:	429f      	cmp	r7, r3
 8004828:	d00a      	beq.n	8004840 <_scanf_float+0x394>
 800482a:	1bda      	subs	r2, r3, r7
 800482c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004830:	429e      	cmp	r6, r3
 8004832:	bf28      	it	cs
 8004834:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004838:	4630      	mov	r0, r6
 800483a:	491f      	ldr	r1, [pc, #124]	@ (80048b8 <_scanf_float+0x40c>)
 800483c:	f000 f902 	bl	8004a44 <siprintf>
 8004840:	2200      	movs	r2, #0
 8004842:	4640      	mov	r0, r8
 8004844:	9901      	ldr	r1, [sp, #4]
 8004846:	f002 fc07 	bl	8007058 <_strtod_r>
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	6825      	ldr	r5, [r4, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f015 0f02 	tst.w	r5, #2
 8004854:	4606      	mov	r6, r0
 8004856:	460f      	mov	r7, r1
 8004858:	f103 0204 	add.w	r2, r3, #4
 800485c:	d015      	beq.n	800488a <_scanf_float+0x3de>
 800485e:	9903      	ldr	r1, [sp, #12]
 8004860:	600a      	str	r2, [r1, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	e9c3 6700 	strd	r6, r7, [r3]
 8004868:	68e3      	ldr	r3, [r4, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60e3      	str	r3, [r4, #12]
 800486e:	e7d0      	b.n	8004812 <_scanf_float+0x366>
 8004870:	9b04      	ldr	r3, [sp, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0e4      	beq.n	8004840 <_scanf_float+0x394>
 8004876:	9905      	ldr	r1, [sp, #20]
 8004878:	230a      	movs	r3, #10
 800487a:	4640      	mov	r0, r8
 800487c:	3101      	adds	r1, #1
 800487e:	f002 fc6b 	bl	8007158 <_strtol_r>
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	9e05      	ldr	r6, [sp, #20]
 8004886:	1ac2      	subs	r2, r0, r3
 8004888:	e7d0      	b.n	800482c <_scanf_float+0x380>
 800488a:	076d      	lsls	r5, r5, #29
 800488c:	d4e7      	bmi.n	800485e <_scanf_float+0x3b2>
 800488e:	9d03      	ldr	r5, [sp, #12]
 8004890:	602a      	str	r2, [r5, #0]
 8004892:	681d      	ldr	r5, [r3, #0]
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	f7fc f8b8 	bl	8000a0c <__aeabi_dcmpun>
 800489c:	b120      	cbz	r0, 80048a8 <_scanf_float+0x3fc>
 800489e:	4807      	ldr	r0, [pc, #28]	@ (80048bc <_scanf_float+0x410>)
 80048a0:	f000 f9e2 	bl	8004c68 <nanf>
 80048a4:	6028      	str	r0, [r5, #0]
 80048a6:	e7df      	b.n	8004868 <_scanf_float+0x3bc>
 80048a8:	4630      	mov	r0, r6
 80048aa:	4639      	mov	r1, r7
 80048ac:	f7fc f90c 	bl	8000ac8 <__aeabi_d2f>
 80048b0:	e7f8      	b.n	80048a4 <_scanf_float+0x3f8>
 80048b2:	2700      	movs	r7, #0
 80048b4:	e633      	b.n	800451e <_scanf_float+0x72>
 80048b6:	bf00      	nop
 80048b8:	080089f2 	.word	0x080089f2
 80048bc:	08008b33 	.word	0x08008b33

080048c0 <std>:
 80048c0:	2300      	movs	r3, #0
 80048c2:	b510      	push	{r4, lr}
 80048c4:	4604      	mov	r4, r0
 80048c6:	e9c0 3300 	strd	r3, r3, [r0]
 80048ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ce:	6083      	str	r3, [r0, #8]
 80048d0:	8181      	strh	r1, [r0, #12]
 80048d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80048d4:	81c2      	strh	r2, [r0, #14]
 80048d6:	6183      	str	r3, [r0, #24]
 80048d8:	4619      	mov	r1, r3
 80048da:	2208      	movs	r2, #8
 80048dc:	305c      	adds	r0, #92	@ 0x5c
 80048de:	f000 f926 	bl	8004b2e <memset>
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <std+0x58>)
 80048e4:	6224      	str	r4, [r4, #32]
 80048e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80048e8:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <std+0x5c>)
 80048ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <std+0x60>)
 80048ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <std+0x64>)
 80048f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80048f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <std+0x68>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d006      	beq.n	8004908 <std+0x48>
 80048fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048fe:	4294      	cmp	r4, r2
 8004900:	d002      	beq.n	8004908 <std+0x48>
 8004902:	33d0      	adds	r3, #208	@ 0xd0
 8004904:	429c      	cmp	r4, r3
 8004906:	d105      	bne.n	8004914 <std+0x54>
 8004908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004910:	f000 b98a 	b.w	8004c28 <__retarget_lock_init_recursive>
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	08004a89 	.word	0x08004a89
 800491c:	08004aab 	.word	0x08004aab
 8004920:	08004ae3 	.word	0x08004ae3
 8004924:	08004b07 	.word	0x08004b07
 8004928:	200006dc 	.word	0x200006dc

0800492c <stdio_exit_handler>:
 800492c:	4a02      	ldr	r2, [pc, #8]	@ (8004938 <stdio_exit_handler+0xc>)
 800492e:	4903      	ldr	r1, [pc, #12]	@ (800493c <stdio_exit_handler+0x10>)
 8004930:	4803      	ldr	r0, [pc, #12]	@ (8004940 <stdio_exit_handler+0x14>)
 8004932:	f000 b869 	b.w	8004a08 <_fwalk_sglue>
 8004936:	bf00      	nop
 8004938:	2000000c 	.word	0x2000000c
 800493c:	0800750d 	.word	0x0800750d
 8004940:	2000001c 	.word	0x2000001c

08004944 <cleanup_stdio>:
 8004944:	6841      	ldr	r1, [r0, #4]
 8004946:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <cleanup_stdio+0x34>)
 8004948:	b510      	push	{r4, lr}
 800494a:	4299      	cmp	r1, r3
 800494c:	4604      	mov	r4, r0
 800494e:	d001      	beq.n	8004954 <cleanup_stdio+0x10>
 8004950:	f002 fddc 	bl	800750c <_fflush_r>
 8004954:	68a1      	ldr	r1, [r4, #8]
 8004956:	4b09      	ldr	r3, [pc, #36]	@ (800497c <cleanup_stdio+0x38>)
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <cleanup_stdio+0x1e>
 800495c:	4620      	mov	r0, r4
 800495e:	f002 fdd5 	bl	800750c <_fflush_r>
 8004962:	68e1      	ldr	r1, [r4, #12]
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <cleanup_stdio+0x3c>)
 8004966:	4299      	cmp	r1, r3
 8004968:	d004      	beq.n	8004974 <cleanup_stdio+0x30>
 800496a:	4620      	mov	r0, r4
 800496c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004970:	f002 bdcc 	b.w	800750c <_fflush_r>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	bf00      	nop
 8004978:	200006dc 	.word	0x200006dc
 800497c:	20000744 	.word	0x20000744
 8004980:	200007ac 	.word	0x200007ac

08004984 <global_stdio_init.part.0>:
 8004984:	b510      	push	{r4, lr}
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <global_stdio_init.part.0+0x30>)
 8004988:	4c0b      	ldr	r4, [pc, #44]	@ (80049b8 <global_stdio_init.part.0+0x34>)
 800498a:	4a0c      	ldr	r2, [pc, #48]	@ (80049bc <global_stdio_init.part.0+0x38>)
 800498c:	4620      	mov	r0, r4
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	2104      	movs	r1, #4
 8004992:	2200      	movs	r2, #0
 8004994:	f7ff ff94 	bl	80048c0 <std>
 8004998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800499c:	2201      	movs	r2, #1
 800499e:	2109      	movs	r1, #9
 80049a0:	f7ff ff8e 	bl	80048c0 <std>
 80049a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049a8:	2202      	movs	r2, #2
 80049aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ae:	2112      	movs	r1, #18
 80049b0:	f7ff bf86 	b.w	80048c0 <std>
 80049b4:	20000814 	.word	0x20000814
 80049b8:	200006dc 	.word	0x200006dc
 80049bc:	0800492d 	.word	0x0800492d

080049c0 <__sfp_lock_acquire>:
 80049c0:	4801      	ldr	r0, [pc, #4]	@ (80049c8 <__sfp_lock_acquire+0x8>)
 80049c2:	f000 b932 	b.w	8004c2a <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	2000081d 	.word	0x2000081d

080049cc <__sfp_lock_release>:
 80049cc:	4801      	ldr	r0, [pc, #4]	@ (80049d4 <__sfp_lock_release+0x8>)
 80049ce:	f000 b92d 	b.w	8004c2c <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	2000081d 	.word	0x2000081d

080049d8 <__sinit>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	f7ff fff0 	bl	80049c0 <__sfp_lock_acquire>
 80049e0:	6a23      	ldr	r3, [r4, #32]
 80049e2:	b11b      	cbz	r3, 80049ec <__sinit+0x14>
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e8:	f7ff bff0 	b.w	80049cc <__sfp_lock_release>
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <__sinit+0x28>)
 80049ee:	6223      	str	r3, [r4, #32]
 80049f0:	4b04      	ldr	r3, [pc, #16]	@ (8004a04 <__sinit+0x2c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f5      	bne.n	80049e4 <__sinit+0xc>
 80049f8:	f7ff ffc4 	bl	8004984 <global_stdio_init.part.0>
 80049fc:	e7f2      	b.n	80049e4 <__sinit+0xc>
 80049fe:	bf00      	nop
 8004a00:	08004945 	.word	0x08004945
 8004a04:	20000814 	.word	0x20000814

08004a08 <_fwalk_sglue>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	4688      	mov	r8, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	2600      	movs	r6, #0
 8004a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a18:	f1b9 0901 	subs.w	r9, r9, #1
 8004a1c:	d505      	bpl.n	8004a2a <_fwalk_sglue+0x22>
 8004a1e:	6824      	ldr	r4, [r4, #0]
 8004a20:	2c00      	cmp	r4, #0
 8004a22:	d1f7      	bne.n	8004a14 <_fwalk_sglue+0xc>
 8004a24:	4630      	mov	r0, r6
 8004a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d907      	bls.n	8004a40 <_fwalk_sglue+0x38>
 8004a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a34:	3301      	adds	r3, #1
 8004a36:	d003      	beq.n	8004a40 <_fwalk_sglue+0x38>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	4306      	orrs	r6, r0
 8004a40:	3568      	adds	r5, #104	@ 0x68
 8004a42:	e7e9      	b.n	8004a18 <_fwalk_sglue+0x10>

08004a44 <siprintf>:
 8004a44:	b40e      	push	{r1, r2, r3}
 8004a46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	2400      	movs	r4, #0
 8004a4e:	b09d      	sub	sp, #116	@ 0x74
 8004a50:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004a52:	9002      	str	r0, [sp, #8]
 8004a54:	9006      	str	r0, [sp, #24]
 8004a56:	9107      	str	r1, [sp, #28]
 8004a58:	9104      	str	r1, [sp, #16]
 8004a5a:	4809      	ldr	r0, [pc, #36]	@ (8004a80 <siprintf+0x3c>)
 8004a5c:	4909      	ldr	r1, [pc, #36]	@ (8004a84 <siprintf+0x40>)
 8004a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a62:	9105      	str	r1, [sp, #20]
 8004a64:	6800      	ldr	r0, [r0, #0]
 8004a66:	a902      	add	r1, sp, #8
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004a6c:	f002 fbd2 	bl	8007214 <_svfiprintf_r>
 8004a70:	9b02      	ldr	r3, [sp, #8]
 8004a72:	701c      	strb	r4, [r3, #0]
 8004a74:	b01d      	add	sp, #116	@ 0x74
 8004a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7a:	b003      	add	sp, #12
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000018 	.word	0x20000018
 8004a84:	ffff0208 	.word	0xffff0208

08004a88 <__sread>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	f000 f87c 	bl	8004b8c <_read_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	bfab      	itete	ge
 8004a98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a9c:	181b      	addge	r3, r3, r0
 8004a9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004aa2:	bfac      	ite	ge
 8004aa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004aa6:	81a3      	strhlt	r3, [r4, #12]
 8004aa8:	bd10      	pop	{r4, pc}

08004aaa <__swrite>:
 8004aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aae:	461f      	mov	r7, r3
 8004ab0:	898b      	ldrh	r3, [r1, #12]
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4616      	mov	r6, r2
 8004aba:	d505      	bpl.n	8004ac8 <__swrite+0x1e>
 8004abc:	2302      	movs	r3, #2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac4:	f000 f850 	bl	8004b68 <_lseek_r>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	4632      	mov	r2, r6
 8004acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	f000 b867 	b.w	8004bb0 <_write_r>

08004ae2 <__sseek>:
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 f83d 	bl	8004b68 <_lseek_r>
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	bf15      	itete	ne
 8004af4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004af6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004afa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004afe:	81a3      	strheq	r3, [r4, #12]
 8004b00:	bf18      	it	ne
 8004b02:	81a3      	strhne	r3, [r4, #12]
 8004b04:	bd10      	pop	{r4, pc}

08004b06 <__sclose>:
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 b81d 	b.w	8004b48 <_close_r>

08004b0e <memcmp>:
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	3901      	subs	r1, #1
 8004b12:	4402      	add	r2, r0
 8004b14:	4290      	cmp	r0, r2
 8004b16:	d101      	bne.n	8004b1c <memcmp+0xe>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e005      	b.n	8004b28 <memcmp+0x1a>
 8004b1c:	7803      	ldrb	r3, [r0, #0]
 8004b1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	d001      	beq.n	8004b2a <memcmp+0x1c>
 8004b26:	1b18      	subs	r0, r3, r4
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	e7f2      	b.n	8004b14 <memcmp+0x6>

08004b2e <memset>:
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4402      	add	r2, r0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d100      	bne.n	8004b38 <memset+0xa>
 8004b36:	4770      	bx	lr
 8004b38:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3c:	e7f9      	b.n	8004b32 <memset+0x4>
	...

08004b40 <_localeconv_r>:
 8004b40:	4800      	ldr	r0, [pc, #0]	@ (8004b44 <_localeconv_r+0x4>)
 8004b42:	4770      	bx	lr
 8004b44:	20000158 	.word	0x20000158

08004b48 <_close_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4d05      	ldr	r5, [pc, #20]	@ (8004b64 <_close_r+0x1c>)
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fd f89f 	bl	8001c96 <_close>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_close_r+0x1a>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_close_r+0x1a>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	20000818 	.word	0x20000818

08004b68 <_lseek_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	2200      	movs	r2, #0
 8004b72:	4d05      	ldr	r5, [pc, #20]	@ (8004b88 <_lseek_r+0x20>)
 8004b74:	602a      	str	r2, [r5, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fd f8b1 	bl	8001cde <_lseek>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_lseek_r+0x1e>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_lseek_r+0x1e>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	20000818 	.word	0x20000818

08004b8c <_read_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	2200      	movs	r2, #0
 8004b96:	4d05      	ldr	r5, [pc, #20]	@ (8004bac <_read_r+0x20>)
 8004b98:	602a      	str	r2, [r5, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f7fd f842 	bl	8001c24 <_read>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_read_r+0x1e>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_read_r+0x1e>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	20000818 	.word	0x20000818

08004bb0 <_write_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4d05      	ldr	r5, [pc, #20]	@ (8004bd0 <_write_r+0x20>)
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fd f84d 	bl	8001c5e <_write>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_write_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_write_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000818 	.word	0x20000818

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	@ (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000018 	.word	0x20000018

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2600      	movs	r6, #0
 8004be4:	4d0c      	ldr	r5, [pc, #48]	@ (8004c18 <__libc_init_array+0x38>)
 8004be6:	4c0d      	ldr	r4, [pc, #52]	@ (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	f003 fb6a 	bl	80082c8 <_init>
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	4d0a      	ldr	r5, [pc, #40]	@ (8004c20 <__libc_init_array+0x40>)
 8004bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8004c24 <__libc_init_array+0x44>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08008dec 	.word	0x08008dec
 8004c1c:	08008dec 	.word	0x08008dec
 8004c20:	08008dec 	.word	0x08008dec
 8004c24:	08008df0 	.word	0x08008df0

08004c28 <__retarget_lock_init_recursive>:
 8004c28:	4770      	bx	lr

08004c2a <__retarget_lock_acquire_recursive>:
 8004c2a:	4770      	bx	lr

08004c2c <__retarget_lock_release_recursive>:
 8004c2c:	4770      	bx	lr

08004c2e <memchr>:
 8004c2e:	4603      	mov	r3, r0
 8004c30:	b510      	push	{r4, lr}
 8004c32:	b2c9      	uxtb	r1, r1
 8004c34:	4402      	add	r2, r0
 8004c36:	4293      	cmp	r3, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	d101      	bne.n	8004c40 <memchr+0x12>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e003      	b.n	8004c48 <memchr+0x1a>
 8004c40:	7804      	ldrb	r4, [r0, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	428c      	cmp	r4, r1
 8004c46:	d1f6      	bne.n	8004c36 <memchr+0x8>
 8004c48:	bd10      	pop	{r4, pc}

08004c4a <memcpy>:
 8004c4a:	440a      	add	r2, r1
 8004c4c:	4291      	cmp	r1, r2
 8004c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c52:	d100      	bne.n	8004c56 <memcpy+0xc>
 8004c54:	4770      	bx	lr
 8004c56:	b510      	push	{r4, lr}
 8004c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c5c:	4291      	cmp	r1, r2
 8004c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c62:	d1f9      	bne.n	8004c58 <memcpy+0xe>
 8004c64:	bd10      	pop	{r4, pc}
	...

08004c68 <nanf>:
 8004c68:	4800      	ldr	r0, [pc, #0]	@ (8004c6c <nanf+0x4>)
 8004c6a:	4770      	bx	lr
 8004c6c:	7fc00000 	.word	0x7fc00000

08004c70 <quorem>:
 8004c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	6903      	ldr	r3, [r0, #16]
 8004c76:	690c      	ldr	r4, [r1, #16]
 8004c78:	4607      	mov	r7, r0
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	db7e      	blt.n	8004d7c <quorem+0x10c>
 8004c7e:	3c01      	subs	r4, #1
 8004c80:	00a3      	lsls	r3, r4, #2
 8004c82:	f100 0514 	add.w	r5, r0, #20
 8004c86:	f101 0814 	add.w	r8, r1, #20
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ca2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ca6:	d32e      	bcc.n	8004d06 <quorem+0x96>
 8004ca8:	f04f 0a00 	mov.w	sl, #0
 8004cac:	46c4      	mov	ip, r8
 8004cae:	46ae      	mov	lr, r5
 8004cb0:	46d3      	mov	fp, sl
 8004cb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004cb6:	b298      	uxth	r0, r3
 8004cb8:	fb06 a000 	mla	r0, r6, r0, sl
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	0c02      	lsrs	r2, r0, #16
 8004cc0:	fb06 2303 	mla	r3, r6, r3, r2
 8004cc4:	f8de 2000 	ldr.w	r2, [lr]
 8004cc8:	b280      	uxth	r0, r0
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	1a12      	subs	r2, r2, r0
 8004cce:	445a      	add	r2, fp
 8004cd0:	f8de 0000 	ldr.w	r0, [lr]
 8004cd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004cde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ce8:	45e1      	cmp	r9, ip
 8004cea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004cee:	f84e 2b04 	str.w	r2, [lr], #4
 8004cf2:	d2de      	bcs.n	8004cb2 <quorem+0x42>
 8004cf4:	9b00      	ldr	r3, [sp, #0]
 8004cf6:	58eb      	ldr	r3, [r5, r3]
 8004cf8:	b92b      	cbnz	r3, 8004d06 <quorem+0x96>
 8004cfa:	9b01      	ldr	r3, [sp, #4]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	429d      	cmp	r5, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	d32f      	bcc.n	8004d64 <quorem+0xf4>
 8004d04:	613c      	str	r4, [r7, #16]
 8004d06:	4638      	mov	r0, r7
 8004d08:	f001 f9c8 	bl	800609c <__mcmp>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	db25      	blt.n	8004d5c <quorem+0xec>
 8004d10:	4629      	mov	r1, r5
 8004d12:	2000      	movs	r0, #0
 8004d14:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d18:	f8d1 c000 	ldr.w	ip, [r1]
 8004d1c:	fa1f fe82 	uxth.w	lr, r2
 8004d20:	fa1f f38c 	uxth.w	r3, ip
 8004d24:	eba3 030e 	sub.w	r3, r3, lr
 8004d28:	4403      	add	r3, r0
 8004d2a:	0c12      	lsrs	r2, r2, #16
 8004d2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d3a:	45c1      	cmp	r9, r8
 8004d3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d40:	f841 3b04 	str.w	r3, [r1], #4
 8004d44:	d2e6      	bcs.n	8004d14 <quorem+0xa4>
 8004d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d4e:	b922      	cbnz	r2, 8004d5a <quorem+0xea>
 8004d50:	3b04      	subs	r3, #4
 8004d52:	429d      	cmp	r5, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	d30b      	bcc.n	8004d70 <quorem+0x100>
 8004d58:	613c      	str	r4, [r7, #16]
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	b003      	add	sp, #12
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	3b04      	subs	r3, #4
 8004d68:	2a00      	cmp	r2, #0
 8004d6a:	d1cb      	bne.n	8004d04 <quorem+0x94>
 8004d6c:	3c01      	subs	r4, #1
 8004d6e:	e7c6      	b.n	8004cfe <quorem+0x8e>
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	3b04      	subs	r3, #4
 8004d74:	2a00      	cmp	r2, #0
 8004d76:	d1ef      	bne.n	8004d58 <quorem+0xe8>
 8004d78:	3c01      	subs	r4, #1
 8004d7a:	e7ea      	b.n	8004d52 <quorem+0xe2>
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	e7ee      	b.n	8004d5e <quorem+0xee>

08004d80 <_dtoa_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	4614      	mov	r4, r2
 8004d86:	461d      	mov	r5, r3
 8004d88:	69c7      	ldr	r7, [r0, #28]
 8004d8a:	b097      	sub	sp, #92	@ 0x5c
 8004d8c:	4681      	mov	r9, r0
 8004d8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004d92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004d94:	b97f      	cbnz	r7, 8004db6 <_dtoa_r+0x36>
 8004d96:	2010      	movs	r0, #16
 8004d98:	f000 fe0e 	bl	80059b8 <malloc>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004da2:	b920      	cbnz	r0, 8004dae <_dtoa_r+0x2e>
 8004da4:	21ef      	movs	r1, #239	@ 0xef
 8004da6:	4bac      	ldr	r3, [pc, #688]	@ (8005058 <_dtoa_r+0x2d8>)
 8004da8:	48ac      	ldr	r0, [pc, #688]	@ (800505c <_dtoa_r+0x2dc>)
 8004daa:	f002 fc19 	bl	80075e0 <__assert_func>
 8004dae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004db2:	6007      	str	r7, [r0, #0]
 8004db4:	60c7      	str	r7, [r0, #12]
 8004db6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004dba:	6819      	ldr	r1, [r3, #0]
 8004dbc:	b159      	cbz	r1, 8004dd6 <_dtoa_r+0x56>
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	604a      	str	r2, [r1, #4]
 8004dc6:	608b      	str	r3, [r1, #8]
 8004dc8:	4648      	mov	r0, r9
 8004dca:	f000 feeb 	bl	8005ba4 <_Bfree>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	1e2b      	subs	r3, r5, #0
 8004dd8:	bfaf      	iteee	ge
 8004dda:	2300      	movge	r3, #0
 8004ddc:	2201      	movlt	r2, #1
 8004dde:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004de2:	9307      	strlt	r3, [sp, #28]
 8004de4:	bfa8      	it	ge
 8004de6:	6033      	strge	r3, [r6, #0]
 8004de8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004dec:	4b9c      	ldr	r3, [pc, #624]	@ (8005060 <_dtoa_r+0x2e0>)
 8004dee:	bfb8      	it	lt
 8004df0:	6032      	strlt	r2, [r6, #0]
 8004df2:	ea33 0308 	bics.w	r3, r3, r8
 8004df6:	d112      	bne.n	8004e1e <_dtoa_r+0x9e>
 8004df8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004dfc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004e04:	4323      	orrs	r3, r4
 8004e06:	f000 855e 	beq.w	80058c6 <_dtoa_r+0xb46>
 8004e0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005064 <_dtoa_r+0x2e4>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8560 	beq.w	80058d6 <_dtoa_r+0xb56>
 8004e16:	f10a 0303 	add.w	r3, sl, #3
 8004e1a:	f000 bd5a 	b.w	80058d2 <_dtoa_r+0xb52>
 8004e1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f7fb fdbb 	bl	80009a8 <__aeabi_dcmpeq>
 8004e32:	4607      	mov	r7, r0
 8004e34:	b158      	cbz	r0, 8004e4e <_dtoa_r+0xce>
 8004e36:	2301      	movs	r3, #1
 8004e38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e3e:	b113      	cbz	r3, 8004e46 <_dtoa_r+0xc6>
 8004e40:	4b89      	ldr	r3, [pc, #548]	@ (8005068 <_dtoa_r+0x2e8>)
 8004e42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800506c <_dtoa_r+0x2ec>
 8004e4a:	f000 bd44 	b.w	80058d6 <_dtoa_r+0xb56>
 8004e4e:	ab14      	add	r3, sp, #80	@ 0x50
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	ab15      	add	r3, sp, #84	@ 0x54
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	4648      	mov	r0, r9
 8004e58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004e5c:	f001 fa36 	bl	80062cc <__d2b>
 8004e60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004e64:	9003      	str	r0, [sp, #12]
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d078      	beq.n	8004f5c <_dtoa_r+0x1dc>
 8004e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e80:	9712      	str	r7, [sp, #72]	@ 0x48
 8004e82:	4619      	mov	r1, r3
 8004e84:	2200      	movs	r2, #0
 8004e86:	4b7a      	ldr	r3, [pc, #488]	@ (8005070 <_dtoa_r+0x2f0>)
 8004e88:	f7fb f96e 	bl	8000168 <__aeabi_dsub>
 8004e8c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005040 <_dtoa_r+0x2c0>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f7fb fb21 	bl	80004d8 <__aeabi_dmul>
 8004e96:	a36c      	add	r3, pc, #432	@ (adr r3, 8005048 <_dtoa_r+0x2c8>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb f966 	bl	800016c <__adddf3>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	f7fb faad 	bl	8000404 <__aeabi_i2d>
 8004eaa:	a369      	add	r3, pc, #420	@ (adr r3, 8005050 <_dtoa_r+0x2d0>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f7fb fb12 	bl	80004d8 <__aeabi_dmul>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb f956 	bl	800016c <__adddf3>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	f7fb fdb8 	bl	8000a38 <__aeabi_d2iz>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4607      	mov	r7, r0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb fd73 	bl	80009bc <__aeabi_dcmplt>
 8004ed6:	b140      	cbz	r0, 8004eea <_dtoa_r+0x16a>
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7fb fa93 	bl	8000404 <__aeabi_i2d>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	f7fb fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8004ee6:	b900      	cbnz	r0, 8004eea <_dtoa_r+0x16a>
 8004ee8:	3f01      	subs	r7, #1
 8004eea:	2f16      	cmp	r7, #22
 8004eec:	d854      	bhi.n	8004f98 <_dtoa_r+0x218>
 8004eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ef2:	4b60      	ldr	r3, [pc, #384]	@ (8005074 <_dtoa_r+0x2f4>)
 8004ef4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f7fb fd5e 	bl	80009bc <__aeabi_dcmplt>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d04b      	beq.n	8004f9c <_dtoa_r+0x21c>
 8004f04:	2300      	movs	r3, #0
 8004f06:	3f01      	subs	r7, #1
 8004f08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f0c:	1b9b      	subs	r3, r3, r6
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	bf49      	itett	mi
 8004f12:	f1c3 0301 	rsbmi	r3, r3, #1
 8004f16:	2300      	movpl	r3, #0
 8004f18:	9304      	strmi	r3, [sp, #16]
 8004f1a:	2300      	movmi	r3, #0
 8004f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f1e:	bf54      	ite	pl
 8004f20:	9304      	strpl	r3, [sp, #16]
 8004f22:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004f24:	2f00      	cmp	r7, #0
 8004f26:	db3b      	blt.n	8004fa0 <_dtoa_r+0x220>
 8004f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2a:	970e      	str	r7, [sp, #56]	@ 0x38
 8004f2c:	443b      	add	r3, r7
 8004f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f30:	2300      	movs	r3, #0
 8004f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d865      	bhi.n	8005006 <_dtoa_r+0x286>
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	bfc4      	itt	gt
 8004f3e:	3b04      	subgt	r3, #4
 8004f40:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004f42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f44:	bfc8      	it	gt
 8004f46:	2400      	movgt	r4, #0
 8004f48:	f1a3 0302 	sub.w	r3, r3, #2
 8004f4c:	bfd8      	it	le
 8004f4e:	2401      	movle	r4, #1
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d864      	bhi.n	800501e <_dtoa_r+0x29e>
 8004f54:	e8df f003 	tbb	[pc, r3]
 8004f58:	2c385553 	.word	0x2c385553
 8004f5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004f60:	441e      	add	r6, r3
 8004f62:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	bfc1      	itttt	gt
 8004f6a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004f6e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004f72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004f76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f7a:	bfd6      	itet	le
 8004f7c:	f1c3 0320 	rsble	r3, r3, #32
 8004f80:	ea48 0003 	orrgt.w	r0, r8, r3
 8004f84:	fa04 f003 	lslle.w	r0, r4, r3
 8004f88:	f7fb fa2c 	bl	80003e4 <__aeabi_ui2d>
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f92:	3e01      	subs	r6, #1
 8004f94:	9212      	str	r2, [sp, #72]	@ 0x48
 8004f96:	e774      	b.n	8004e82 <_dtoa_r+0x102>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e7b5      	b.n	8004f08 <_dtoa_r+0x188>
 8004f9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004f9e:	e7b4      	b.n	8004f0a <_dtoa_r+0x18a>
 8004fa0:	9b04      	ldr	r3, [sp, #16]
 8004fa2:	1bdb      	subs	r3, r3, r7
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	427b      	negs	r3, r7
 8004fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004faa:	2300      	movs	r3, #0
 8004fac:	930e      	str	r3, [sp, #56]	@ 0x38
 8004fae:	e7c1      	b.n	8004f34 <_dtoa_r+0x1b4>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fb6:	eb07 0b03 	add.w	fp, r7, r3
 8004fba:	f10b 0301 	add.w	r3, fp, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	9308      	str	r3, [sp, #32]
 8004fc2:	bfb8      	it	lt
 8004fc4:	2301      	movlt	r3, #1
 8004fc6:	e006      	b.n	8004fd6 <_dtoa_r+0x256>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dd28      	ble.n	8005024 <_dtoa_r+0x2a4>
 8004fd2:	469b      	mov	fp, r3
 8004fd4:	9308      	str	r3, [sp, #32]
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	2204      	movs	r2, #4
 8004fda:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004fde:	f102 0514 	add.w	r5, r2, #20
 8004fe2:	429d      	cmp	r5, r3
 8004fe4:	d926      	bls.n	8005034 <_dtoa_r+0x2b4>
 8004fe6:	6041      	str	r1, [r0, #4]
 8004fe8:	4648      	mov	r0, r9
 8004fea:	f000 fd9b 	bl	8005b24 <_Balloc>
 8004fee:	4682      	mov	sl, r0
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d143      	bne.n	800507c <_dtoa_r+0x2fc>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8005078 <_dtoa_r+0x2f8>)
 8004ffc:	e6d4      	b.n	8004da8 <_dtoa_r+0x28>
 8004ffe:	2300      	movs	r3, #0
 8005000:	e7e3      	b.n	8004fca <_dtoa_r+0x24a>
 8005002:	2300      	movs	r3, #0
 8005004:	e7d5      	b.n	8004fb2 <_dtoa_r+0x232>
 8005006:	2401      	movs	r4, #1
 8005008:	2300      	movs	r3, #0
 800500a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800500c:	9320      	str	r3, [sp, #128]	@ 0x80
 800500e:	f04f 3bff 	mov.w	fp, #4294967295
 8005012:	2200      	movs	r2, #0
 8005014:	2312      	movs	r3, #18
 8005016:	f8cd b020 	str.w	fp, [sp, #32]
 800501a:	9221      	str	r2, [sp, #132]	@ 0x84
 800501c:	e7db      	b.n	8004fd6 <_dtoa_r+0x256>
 800501e:	2301      	movs	r3, #1
 8005020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005022:	e7f4      	b.n	800500e <_dtoa_r+0x28e>
 8005024:	f04f 0b01 	mov.w	fp, #1
 8005028:	465b      	mov	r3, fp
 800502a:	f8cd b020 	str.w	fp, [sp, #32]
 800502e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005032:	e7d0      	b.n	8004fd6 <_dtoa_r+0x256>
 8005034:	3101      	adds	r1, #1
 8005036:	0052      	lsls	r2, r2, #1
 8005038:	e7d1      	b.n	8004fde <_dtoa_r+0x25e>
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w
 8005040:	636f4361 	.word	0x636f4361
 8005044:	3fd287a7 	.word	0x3fd287a7
 8005048:	8b60c8b3 	.word	0x8b60c8b3
 800504c:	3fc68a28 	.word	0x3fc68a28
 8005050:	509f79fb 	.word	0x509f79fb
 8005054:	3fd34413 	.word	0x3fd34413
 8005058:	08008a04 	.word	0x08008a04
 800505c:	08008a1b 	.word	0x08008a1b
 8005060:	7ff00000 	.word	0x7ff00000
 8005064:	08008a00 	.word	0x08008a00
 8005068:	080089cf 	.word	0x080089cf
 800506c:	080089ce 	.word	0x080089ce
 8005070:	3ff80000 	.word	0x3ff80000
 8005074:	08008bc8 	.word	0x08008bc8
 8005078:	08008a73 	.word	0x08008a73
 800507c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005080:	6018      	str	r0, [r3, #0]
 8005082:	9b08      	ldr	r3, [sp, #32]
 8005084:	2b0e      	cmp	r3, #14
 8005086:	f200 80a1 	bhi.w	80051cc <_dtoa_r+0x44c>
 800508a:	2c00      	cmp	r4, #0
 800508c:	f000 809e 	beq.w	80051cc <_dtoa_r+0x44c>
 8005090:	2f00      	cmp	r7, #0
 8005092:	dd33      	ble.n	80050fc <_dtoa_r+0x37c>
 8005094:	4b9c      	ldr	r3, [pc, #624]	@ (8005308 <_dtoa_r+0x588>)
 8005096:	f007 020f 	and.w	r2, r7, #15
 800509a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800509e:	05f8      	lsls	r0, r7, #23
 80050a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80050a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80050ac:	d516      	bpl.n	80050dc <_dtoa_r+0x35c>
 80050ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050b2:	4b96      	ldr	r3, [pc, #600]	@ (800530c <_dtoa_r+0x58c>)
 80050b4:	2603      	movs	r6, #3
 80050b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050ba:	f7fb fb37 	bl	800072c <__aeabi_ddiv>
 80050be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050c2:	f004 040f 	and.w	r4, r4, #15
 80050c6:	4d91      	ldr	r5, [pc, #580]	@ (800530c <_dtoa_r+0x58c>)
 80050c8:	b954      	cbnz	r4, 80050e0 <_dtoa_r+0x360>
 80050ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050d2:	f7fb fb2b 	bl	800072c <__aeabi_ddiv>
 80050d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050da:	e028      	b.n	800512e <_dtoa_r+0x3ae>
 80050dc:	2602      	movs	r6, #2
 80050de:	e7f2      	b.n	80050c6 <_dtoa_r+0x346>
 80050e0:	07e1      	lsls	r1, r4, #31
 80050e2:	d508      	bpl.n	80050f6 <_dtoa_r+0x376>
 80050e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80050e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050ec:	f7fb f9f4 	bl	80004d8 <__aeabi_dmul>
 80050f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050f4:	3601      	adds	r6, #1
 80050f6:	1064      	asrs	r4, r4, #1
 80050f8:	3508      	adds	r5, #8
 80050fa:	e7e5      	b.n	80050c8 <_dtoa_r+0x348>
 80050fc:	f000 80af 	beq.w	800525e <_dtoa_r+0x4de>
 8005100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005104:	427c      	negs	r4, r7
 8005106:	4b80      	ldr	r3, [pc, #512]	@ (8005308 <_dtoa_r+0x588>)
 8005108:	f004 020f 	and.w	r2, r4, #15
 800510c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f7fb f9e0 	bl	80004d8 <__aeabi_dmul>
 8005118:	2602      	movs	r6, #2
 800511a:	2300      	movs	r3, #0
 800511c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005120:	4d7a      	ldr	r5, [pc, #488]	@ (800530c <_dtoa_r+0x58c>)
 8005122:	1124      	asrs	r4, r4, #4
 8005124:	2c00      	cmp	r4, #0
 8005126:	f040 808f 	bne.w	8005248 <_dtoa_r+0x4c8>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1d3      	bne.n	80050d6 <_dtoa_r+0x356>
 800512e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8094 	beq.w	8005262 <_dtoa_r+0x4e2>
 800513a:	2200      	movs	r2, #0
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	4b73      	ldr	r3, [pc, #460]	@ (8005310 <_dtoa_r+0x590>)
 8005142:	f7fb fc3b 	bl	80009bc <__aeabi_dcmplt>
 8005146:	2800      	cmp	r0, #0
 8005148:	f000 808b 	beq.w	8005262 <_dtoa_r+0x4e2>
 800514c:	9b08      	ldr	r3, [sp, #32]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8087 	beq.w	8005262 <_dtoa_r+0x4e2>
 8005154:	f1bb 0f00 	cmp.w	fp, #0
 8005158:	dd34      	ble.n	80051c4 <_dtoa_r+0x444>
 800515a:	4620      	mov	r0, r4
 800515c:	2200      	movs	r2, #0
 800515e:	4629      	mov	r1, r5
 8005160:	4b6c      	ldr	r3, [pc, #432]	@ (8005314 <_dtoa_r+0x594>)
 8005162:	f7fb f9b9 	bl	80004d8 <__aeabi_dmul>
 8005166:	465c      	mov	r4, fp
 8005168:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800516c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005170:	3601      	adds	r6, #1
 8005172:	4630      	mov	r0, r6
 8005174:	f7fb f946 	bl	8000404 <__aeabi_i2d>
 8005178:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800517c:	f7fb f9ac 	bl	80004d8 <__aeabi_dmul>
 8005180:	2200      	movs	r2, #0
 8005182:	4b65      	ldr	r3, [pc, #404]	@ (8005318 <_dtoa_r+0x598>)
 8005184:	f7fa fff2 	bl	800016c <__adddf3>
 8005188:	4605      	mov	r5, r0
 800518a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800518e:	2c00      	cmp	r4, #0
 8005190:	d16a      	bne.n	8005268 <_dtoa_r+0x4e8>
 8005192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005196:	2200      	movs	r2, #0
 8005198:	4b60      	ldr	r3, [pc, #384]	@ (800531c <_dtoa_r+0x59c>)
 800519a:	f7fa ffe5 	bl	8000168 <__aeabi_dsub>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051a6:	462a      	mov	r2, r5
 80051a8:	4633      	mov	r3, r6
 80051aa:	f7fb fc25 	bl	80009f8 <__aeabi_dcmpgt>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	f040 8298 	bne.w	80056e4 <_dtoa_r+0x964>
 80051b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051b8:	462a      	mov	r2, r5
 80051ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80051be:	f7fb fbfd 	bl	80009bc <__aeabi_dcmplt>
 80051c2:	bb38      	cbnz	r0, 8005214 <_dtoa_r+0x494>
 80051c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80051c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f2c0 8157 	blt.w	8005482 <_dtoa_r+0x702>
 80051d4:	2f0e      	cmp	r7, #14
 80051d6:	f300 8154 	bgt.w	8005482 <_dtoa_r+0x702>
 80051da:	4b4b      	ldr	r3, [pc, #300]	@ (8005308 <_dtoa_r+0x588>)
 80051dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80051e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f280 80e5 	bge.w	80053ba <_dtoa_r+0x63a>
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f300 80e1 	bgt.w	80053ba <_dtoa_r+0x63a>
 80051f8:	d10c      	bne.n	8005214 <_dtoa_r+0x494>
 80051fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fe:	2200      	movs	r2, #0
 8005200:	4b46      	ldr	r3, [pc, #280]	@ (800531c <_dtoa_r+0x59c>)
 8005202:	f7fb f969 	bl	80004d8 <__aeabi_dmul>
 8005206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800520a:	f7fb fbeb 	bl	80009e4 <__aeabi_dcmpge>
 800520e:	2800      	cmp	r0, #0
 8005210:	f000 8266 	beq.w	80056e0 <_dtoa_r+0x960>
 8005214:	2400      	movs	r4, #0
 8005216:	4625      	mov	r5, r4
 8005218:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800521a:	4656      	mov	r6, sl
 800521c:	ea6f 0803 	mvn.w	r8, r3
 8005220:	2700      	movs	r7, #0
 8005222:	4621      	mov	r1, r4
 8005224:	4648      	mov	r0, r9
 8005226:	f000 fcbd 	bl	8005ba4 <_Bfree>
 800522a:	2d00      	cmp	r5, #0
 800522c:	f000 80bd 	beq.w	80053aa <_dtoa_r+0x62a>
 8005230:	b12f      	cbz	r7, 800523e <_dtoa_r+0x4be>
 8005232:	42af      	cmp	r7, r5
 8005234:	d003      	beq.n	800523e <_dtoa_r+0x4be>
 8005236:	4639      	mov	r1, r7
 8005238:	4648      	mov	r0, r9
 800523a:	f000 fcb3 	bl	8005ba4 <_Bfree>
 800523e:	4629      	mov	r1, r5
 8005240:	4648      	mov	r0, r9
 8005242:	f000 fcaf 	bl	8005ba4 <_Bfree>
 8005246:	e0b0      	b.n	80053aa <_dtoa_r+0x62a>
 8005248:	07e2      	lsls	r2, r4, #31
 800524a:	d505      	bpl.n	8005258 <_dtoa_r+0x4d8>
 800524c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005250:	f7fb f942 	bl	80004d8 <__aeabi_dmul>
 8005254:	2301      	movs	r3, #1
 8005256:	3601      	adds	r6, #1
 8005258:	1064      	asrs	r4, r4, #1
 800525a:	3508      	adds	r5, #8
 800525c:	e762      	b.n	8005124 <_dtoa_r+0x3a4>
 800525e:	2602      	movs	r6, #2
 8005260:	e765      	b.n	800512e <_dtoa_r+0x3ae>
 8005262:	46b8      	mov	r8, r7
 8005264:	9c08      	ldr	r4, [sp, #32]
 8005266:	e784      	b.n	8005172 <_dtoa_r+0x3f2>
 8005268:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <_dtoa_r+0x588>)
 800526a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800526c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005274:	4454      	add	r4, sl
 8005276:	2900      	cmp	r1, #0
 8005278:	d054      	beq.n	8005324 <_dtoa_r+0x5a4>
 800527a:	2000      	movs	r0, #0
 800527c:	4928      	ldr	r1, [pc, #160]	@ (8005320 <_dtoa_r+0x5a0>)
 800527e:	f7fb fa55 	bl	800072c <__aeabi_ddiv>
 8005282:	4633      	mov	r3, r6
 8005284:	462a      	mov	r2, r5
 8005286:	f7fa ff6f 	bl	8000168 <__aeabi_dsub>
 800528a:	4656      	mov	r6, sl
 800528c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005294:	f7fb fbd0 	bl	8000a38 <__aeabi_d2iz>
 8005298:	4605      	mov	r5, r0
 800529a:	f7fb f8b3 	bl	8000404 <__aeabi_i2d>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052a6:	f7fa ff5f 	bl	8000168 <__aeabi_dsub>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	3530      	adds	r5, #48	@ 0x30
 80052b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80052b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052b8:	f806 5b01 	strb.w	r5, [r6], #1
 80052bc:	f7fb fb7e 	bl	80009bc <__aeabi_dcmplt>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d172      	bne.n	80053aa <_dtoa_r+0x62a>
 80052c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052c8:	2000      	movs	r0, #0
 80052ca:	4911      	ldr	r1, [pc, #68]	@ (8005310 <_dtoa_r+0x590>)
 80052cc:	f7fa ff4c 	bl	8000168 <__aeabi_dsub>
 80052d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052d4:	f7fb fb72 	bl	80009bc <__aeabi_dcmplt>
 80052d8:	2800      	cmp	r0, #0
 80052da:	f040 80b4 	bne.w	8005446 <_dtoa_r+0x6c6>
 80052de:	42a6      	cmp	r6, r4
 80052e0:	f43f af70 	beq.w	80051c4 <_dtoa_r+0x444>
 80052e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052e8:	2200      	movs	r2, #0
 80052ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <_dtoa_r+0x594>)
 80052ec:	f7fb f8f4 	bl	80004d8 <__aeabi_dmul>
 80052f0:	2200      	movs	r2, #0
 80052f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <_dtoa_r+0x594>)
 80052fc:	f7fb f8ec 	bl	80004d8 <__aeabi_dmul>
 8005300:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005304:	e7c4      	b.n	8005290 <_dtoa_r+0x510>
 8005306:	bf00      	nop
 8005308:	08008bc8 	.word	0x08008bc8
 800530c:	08008ba0 	.word	0x08008ba0
 8005310:	3ff00000 	.word	0x3ff00000
 8005314:	40240000 	.word	0x40240000
 8005318:	401c0000 	.word	0x401c0000
 800531c:	40140000 	.word	0x40140000
 8005320:	3fe00000 	.word	0x3fe00000
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	f7fb f8d6 	bl	80004d8 <__aeabi_dmul>
 800532c:	4656      	mov	r6, sl
 800532e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005332:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005338:	f7fb fb7e 	bl	8000a38 <__aeabi_d2iz>
 800533c:	4605      	mov	r5, r0
 800533e:	f7fb f861 	bl	8000404 <__aeabi_i2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800534a:	f7fa ff0d 	bl	8000168 <__aeabi_dsub>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	3530      	adds	r5, #48	@ 0x30
 8005354:	f806 5b01 	strb.w	r5, [r6], #1
 8005358:	42a6      	cmp	r6, r4
 800535a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	d124      	bne.n	80053ae <_dtoa_r+0x62e>
 8005364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005368:	4bae      	ldr	r3, [pc, #696]	@ (8005624 <_dtoa_r+0x8a4>)
 800536a:	f7fa feff 	bl	800016c <__adddf3>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005376:	f7fb fb3f 	bl	80009f8 <__aeabi_dcmpgt>
 800537a:	2800      	cmp	r0, #0
 800537c:	d163      	bne.n	8005446 <_dtoa_r+0x6c6>
 800537e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005382:	2000      	movs	r0, #0
 8005384:	49a7      	ldr	r1, [pc, #668]	@ (8005624 <_dtoa_r+0x8a4>)
 8005386:	f7fa feef 	bl	8000168 <__aeabi_dsub>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005392:	f7fb fb13 	bl	80009bc <__aeabi_dcmplt>
 8005396:	2800      	cmp	r0, #0
 8005398:	f43f af14 	beq.w	80051c4 <_dtoa_r+0x444>
 800539c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800539e:	1e73      	subs	r3, r6, #1
 80053a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053a6:	2b30      	cmp	r3, #48	@ 0x30
 80053a8:	d0f8      	beq.n	800539c <_dtoa_r+0x61c>
 80053aa:	4647      	mov	r7, r8
 80053ac:	e03b      	b.n	8005426 <_dtoa_r+0x6a6>
 80053ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005628 <_dtoa_r+0x8a8>)
 80053b0:	f7fb f892 	bl	80004d8 <__aeabi_dmul>
 80053b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053b8:	e7bc      	b.n	8005334 <_dtoa_r+0x5b4>
 80053ba:	4656      	mov	r6, sl
 80053bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80053c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fb f9b0 	bl	800072c <__aeabi_ddiv>
 80053cc:	f7fb fb34 	bl	8000a38 <__aeabi_d2iz>
 80053d0:	4680      	mov	r8, r0
 80053d2:	f7fb f817 	bl	8000404 <__aeabi_i2d>
 80053d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053da:	f7fb f87d 	bl	80004d8 <__aeabi_dmul>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fa febf 	bl	8000168 <__aeabi_dsub>
 80053ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80053ee:	9d08      	ldr	r5, [sp, #32]
 80053f0:	f806 4b01 	strb.w	r4, [r6], #1
 80053f4:	eba6 040a 	sub.w	r4, r6, sl
 80053f8:	42a5      	cmp	r5, r4
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	d133      	bne.n	8005468 <_dtoa_r+0x6e8>
 8005400:	f7fa feb4 	bl	800016c <__adddf3>
 8005404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005408:	4604      	mov	r4, r0
 800540a:	460d      	mov	r5, r1
 800540c:	f7fb faf4 	bl	80009f8 <__aeabi_dcmpgt>
 8005410:	b9c0      	cbnz	r0, 8005444 <_dtoa_r+0x6c4>
 8005412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005416:	4620      	mov	r0, r4
 8005418:	4629      	mov	r1, r5
 800541a:	f7fb fac5 	bl	80009a8 <__aeabi_dcmpeq>
 800541e:	b110      	cbz	r0, 8005426 <_dtoa_r+0x6a6>
 8005420:	f018 0f01 	tst.w	r8, #1
 8005424:	d10e      	bne.n	8005444 <_dtoa_r+0x6c4>
 8005426:	4648      	mov	r0, r9
 8005428:	9903      	ldr	r1, [sp, #12]
 800542a:	f000 fbbb 	bl	8005ba4 <_Bfree>
 800542e:	2300      	movs	r3, #0
 8005430:	7033      	strb	r3, [r6, #0]
 8005432:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005434:	3701      	adds	r7, #1
 8005436:	601f      	str	r7, [r3, #0]
 8005438:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 824b 	beq.w	80058d6 <_dtoa_r+0xb56>
 8005440:	601e      	str	r6, [r3, #0]
 8005442:	e248      	b.n	80058d6 <_dtoa_r+0xb56>
 8005444:	46b8      	mov	r8, r7
 8005446:	4633      	mov	r3, r6
 8005448:	461e      	mov	r6, r3
 800544a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800544e:	2a39      	cmp	r2, #57	@ 0x39
 8005450:	d106      	bne.n	8005460 <_dtoa_r+0x6e0>
 8005452:	459a      	cmp	sl, r3
 8005454:	d1f8      	bne.n	8005448 <_dtoa_r+0x6c8>
 8005456:	2230      	movs	r2, #48	@ 0x30
 8005458:	f108 0801 	add.w	r8, r8, #1
 800545c:	f88a 2000 	strb.w	r2, [sl]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	3201      	adds	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e7a0      	b.n	80053aa <_dtoa_r+0x62a>
 8005468:	2200      	movs	r2, #0
 800546a:	4b6f      	ldr	r3, [pc, #444]	@ (8005628 <_dtoa_r+0x8a8>)
 800546c:	f7fb f834 	bl	80004d8 <__aeabi_dmul>
 8005470:	2200      	movs	r2, #0
 8005472:	2300      	movs	r3, #0
 8005474:	4604      	mov	r4, r0
 8005476:	460d      	mov	r5, r1
 8005478:	f7fb fa96 	bl	80009a8 <__aeabi_dcmpeq>
 800547c:	2800      	cmp	r0, #0
 800547e:	d09f      	beq.n	80053c0 <_dtoa_r+0x640>
 8005480:	e7d1      	b.n	8005426 <_dtoa_r+0x6a6>
 8005482:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005484:	2a00      	cmp	r2, #0
 8005486:	f000 80ea 	beq.w	800565e <_dtoa_r+0x8de>
 800548a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800548c:	2a01      	cmp	r2, #1
 800548e:	f300 80cd 	bgt.w	800562c <_dtoa_r+0x8ac>
 8005492:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005494:	2a00      	cmp	r2, #0
 8005496:	f000 80c1 	beq.w	800561c <_dtoa_r+0x89c>
 800549a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800549e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054a0:	9e04      	ldr	r6, [sp, #16]
 80054a2:	9a04      	ldr	r2, [sp, #16]
 80054a4:	2101      	movs	r1, #1
 80054a6:	441a      	add	r2, r3
 80054a8:	9204      	str	r2, [sp, #16]
 80054aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054ac:	4648      	mov	r0, r9
 80054ae:	441a      	add	r2, r3
 80054b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80054b2:	f000 fc75 	bl	8005da0 <__i2b>
 80054b6:	4605      	mov	r5, r0
 80054b8:	b166      	cbz	r6, 80054d4 <_dtoa_r+0x754>
 80054ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dd09      	ble.n	80054d4 <_dtoa_r+0x754>
 80054c0:	42b3      	cmp	r3, r6
 80054c2:	bfa8      	it	ge
 80054c4:	4633      	movge	r3, r6
 80054c6:	9a04      	ldr	r2, [sp, #16]
 80054c8:	1af6      	subs	r6, r6, r3
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	9204      	str	r2, [sp, #16]
 80054ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80054d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054d6:	b30b      	cbz	r3, 800551c <_dtoa_r+0x79c>
 80054d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80c6 	beq.w	800566c <_dtoa_r+0x8ec>
 80054e0:	2c00      	cmp	r4, #0
 80054e2:	f000 80c0 	beq.w	8005666 <_dtoa_r+0x8e6>
 80054e6:	4629      	mov	r1, r5
 80054e8:	4622      	mov	r2, r4
 80054ea:	4648      	mov	r0, r9
 80054ec:	f000 fd10 	bl	8005f10 <__pow5mult>
 80054f0:	9a03      	ldr	r2, [sp, #12]
 80054f2:	4601      	mov	r1, r0
 80054f4:	4605      	mov	r5, r0
 80054f6:	4648      	mov	r0, r9
 80054f8:	f000 fc68 	bl	8005dcc <__multiply>
 80054fc:	9903      	ldr	r1, [sp, #12]
 80054fe:	4680      	mov	r8, r0
 8005500:	4648      	mov	r0, r9
 8005502:	f000 fb4f 	bl	8005ba4 <_Bfree>
 8005506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005508:	1b1b      	subs	r3, r3, r4
 800550a:	930a      	str	r3, [sp, #40]	@ 0x28
 800550c:	f000 80b1 	beq.w	8005672 <_dtoa_r+0x8f2>
 8005510:	4641      	mov	r1, r8
 8005512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005514:	4648      	mov	r0, r9
 8005516:	f000 fcfb 	bl	8005f10 <__pow5mult>
 800551a:	9003      	str	r0, [sp, #12]
 800551c:	2101      	movs	r1, #1
 800551e:	4648      	mov	r0, r9
 8005520:	f000 fc3e 	bl	8005da0 <__i2b>
 8005524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005526:	4604      	mov	r4, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 81d8 	beq.w	80058de <_dtoa_r+0xb5e>
 800552e:	461a      	mov	r2, r3
 8005530:	4601      	mov	r1, r0
 8005532:	4648      	mov	r0, r9
 8005534:	f000 fcec 	bl	8005f10 <__pow5mult>
 8005538:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800553a:	4604      	mov	r4, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	f300 809f 	bgt.w	8005680 <_dtoa_r+0x900>
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 8097 	bne.w	8005678 <_dtoa_r+0x8f8>
 800554a:	9b07      	ldr	r3, [sp, #28]
 800554c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 8093 	bne.w	800567c <_dtoa_r+0x8fc>
 8005556:	9b07      	ldr	r3, [sp, #28]
 8005558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800555c:	0d1b      	lsrs	r3, r3, #20
 800555e:	051b      	lsls	r3, r3, #20
 8005560:	b133      	cbz	r3, 8005570 <_dtoa_r+0x7f0>
 8005562:	9b04      	ldr	r3, [sp, #16]
 8005564:	3301      	adds	r3, #1
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800556a:	3301      	adds	r3, #1
 800556c:	9309      	str	r3, [sp, #36]	@ 0x24
 800556e:	2301      	movs	r3, #1
 8005570:	930a      	str	r3, [sp, #40]	@ 0x28
 8005572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 81b8 	beq.w	80058ea <_dtoa_r+0xb6a>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005580:	6918      	ldr	r0, [r3, #16]
 8005582:	f000 fbc1 	bl	8005d08 <__hi0bits>
 8005586:	f1c0 0020 	rsb	r0, r0, #32
 800558a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800558c:	4418      	add	r0, r3
 800558e:	f010 001f 	ands.w	r0, r0, #31
 8005592:	f000 8082 	beq.w	800569a <_dtoa_r+0x91a>
 8005596:	f1c0 0320 	rsb	r3, r0, #32
 800559a:	2b04      	cmp	r3, #4
 800559c:	dd73      	ble.n	8005686 <_dtoa_r+0x906>
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	f1c0 001c 	rsb	r0, r0, #28
 80055a4:	4403      	add	r3, r0
 80055a6:	9304      	str	r3, [sp, #16]
 80055a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055aa:	4406      	add	r6, r0
 80055ac:	4403      	add	r3, r0
 80055ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b0:	9b04      	ldr	r3, [sp, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	dd05      	ble.n	80055c2 <_dtoa_r+0x842>
 80055b6:	461a      	mov	r2, r3
 80055b8:	4648      	mov	r0, r9
 80055ba:	9903      	ldr	r1, [sp, #12]
 80055bc:	f000 fd02 	bl	8005fc4 <__lshift>
 80055c0:	9003      	str	r0, [sp, #12]
 80055c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dd05      	ble.n	80055d4 <_dtoa_r+0x854>
 80055c8:	4621      	mov	r1, r4
 80055ca:	461a      	mov	r2, r3
 80055cc:	4648      	mov	r0, r9
 80055ce:	f000 fcf9 	bl	8005fc4 <__lshift>
 80055d2:	4604      	mov	r4, r0
 80055d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d061      	beq.n	800569e <_dtoa_r+0x91e>
 80055da:	4621      	mov	r1, r4
 80055dc:	9803      	ldr	r0, [sp, #12]
 80055de:	f000 fd5d 	bl	800609c <__mcmp>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	da5b      	bge.n	800569e <_dtoa_r+0x91e>
 80055e6:	2300      	movs	r3, #0
 80055e8:	220a      	movs	r2, #10
 80055ea:	4648      	mov	r0, r9
 80055ec:	9903      	ldr	r1, [sp, #12]
 80055ee:	f000 fafb 	bl	8005be8 <__multadd>
 80055f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80055f8:	9003      	str	r0, [sp, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8177 	beq.w	80058ee <_dtoa_r+0xb6e>
 8005600:	4629      	mov	r1, r5
 8005602:	2300      	movs	r3, #0
 8005604:	220a      	movs	r2, #10
 8005606:	4648      	mov	r0, r9
 8005608:	f000 faee 	bl	8005be8 <__multadd>
 800560c:	f1bb 0f00 	cmp.w	fp, #0
 8005610:	4605      	mov	r5, r0
 8005612:	dc6f      	bgt.n	80056f4 <_dtoa_r+0x974>
 8005614:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005616:	2b02      	cmp	r3, #2
 8005618:	dc49      	bgt.n	80056ae <_dtoa_r+0x92e>
 800561a:	e06b      	b.n	80056f4 <_dtoa_r+0x974>
 800561c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800561e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005622:	e73c      	b.n	800549e <_dtoa_r+0x71e>
 8005624:	3fe00000 	.word	0x3fe00000
 8005628:	40240000 	.word	0x40240000
 800562c:	9b08      	ldr	r3, [sp, #32]
 800562e:	1e5c      	subs	r4, r3, #1
 8005630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005632:	42a3      	cmp	r3, r4
 8005634:	db09      	blt.n	800564a <_dtoa_r+0x8ca>
 8005636:	1b1c      	subs	r4, r3, r4
 8005638:	9b08      	ldr	r3, [sp, #32]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f6bf af30 	bge.w	80054a0 <_dtoa_r+0x720>
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	9a08      	ldr	r2, [sp, #32]
 8005644:	1a9e      	subs	r6, r3, r2
 8005646:	2300      	movs	r3, #0
 8005648:	e72b      	b.n	80054a2 <_dtoa_r+0x722>
 800564a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800564c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800564e:	1ae3      	subs	r3, r4, r3
 8005650:	441a      	add	r2, r3
 8005652:	940a      	str	r4, [sp, #40]	@ 0x28
 8005654:	9e04      	ldr	r6, [sp, #16]
 8005656:	2400      	movs	r4, #0
 8005658:	9b08      	ldr	r3, [sp, #32]
 800565a:	920e      	str	r2, [sp, #56]	@ 0x38
 800565c:	e721      	b.n	80054a2 <_dtoa_r+0x722>
 800565e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005660:	9e04      	ldr	r6, [sp, #16]
 8005662:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005664:	e728      	b.n	80054b8 <_dtoa_r+0x738>
 8005666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800566a:	e751      	b.n	8005510 <_dtoa_r+0x790>
 800566c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800566e:	9903      	ldr	r1, [sp, #12]
 8005670:	e750      	b.n	8005514 <_dtoa_r+0x794>
 8005672:	f8cd 800c 	str.w	r8, [sp, #12]
 8005676:	e751      	b.n	800551c <_dtoa_r+0x79c>
 8005678:	2300      	movs	r3, #0
 800567a:	e779      	b.n	8005570 <_dtoa_r+0x7f0>
 800567c:	9b06      	ldr	r3, [sp, #24]
 800567e:	e777      	b.n	8005570 <_dtoa_r+0x7f0>
 8005680:	2300      	movs	r3, #0
 8005682:	930a      	str	r3, [sp, #40]	@ 0x28
 8005684:	e779      	b.n	800557a <_dtoa_r+0x7fa>
 8005686:	d093      	beq.n	80055b0 <_dtoa_r+0x830>
 8005688:	9a04      	ldr	r2, [sp, #16]
 800568a:	331c      	adds	r3, #28
 800568c:	441a      	add	r2, r3
 800568e:	9204      	str	r2, [sp, #16]
 8005690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005692:	441e      	add	r6, r3
 8005694:	441a      	add	r2, r3
 8005696:	9209      	str	r2, [sp, #36]	@ 0x24
 8005698:	e78a      	b.n	80055b0 <_dtoa_r+0x830>
 800569a:	4603      	mov	r3, r0
 800569c:	e7f4      	b.n	8005688 <_dtoa_r+0x908>
 800569e:	9b08      	ldr	r3, [sp, #32]
 80056a0:	46b8      	mov	r8, r7
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	dc20      	bgt.n	80056e8 <_dtoa_r+0x968>
 80056a6:	469b      	mov	fp, r3
 80056a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	dd1e      	ble.n	80056ec <_dtoa_r+0x96c>
 80056ae:	f1bb 0f00 	cmp.w	fp, #0
 80056b2:	f47f adb1 	bne.w	8005218 <_dtoa_r+0x498>
 80056b6:	4621      	mov	r1, r4
 80056b8:	465b      	mov	r3, fp
 80056ba:	2205      	movs	r2, #5
 80056bc:	4648      	mov	r0, r9
 80056be:	f000 fa93 	bl	8005be8 <__multadd>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4604      	mov	r4, r0
 80056c6:	9803      	ldr	r0, [sp, #12]
 80056c8:	f000 fce8 	bl	800609c <__mcmp>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f77f ada3 	ble.w	8005218 <_dtoa_r+0x498>
 80056d2:	4656      	mov	r6, sl
 80056d4:	2331      	movs	r3, #49	@ 0x31
 80056d6:	f108 0801 	add.w	r8, r8, #1
 80056da:	f806 3b01 	strb.w	r3, [r6], #1
 80056de:	e59f      	b.n	8005220 <_dtoa_r+0x4a0>
 80056e0:	46b8      	mov	r8, r7
 80056e2:	9c08      	ldr	r4, [sp, #32]
 80056e4:	4625      	mov	r5, r4
 80056e6:	e7f4      	b.n	80056d2 <_dtoa_r+0x952>
 80056e8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80056ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8101 	beq.w	80058f6 <_dtoa_r+0xb76>
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	dd05      	ble.n	8005704 <_dtoa_r+0x984>
 80056f8:	4629      	mov	r1, r5
 80056fa:	4632      	mov	r2, r6
 80056fc:	4648      	mov	r0, r9
 80056fe:	f000 fc61 	bl	8005fc4 <__lshift>
 8005702:	4605      	mov	r5, r0
 8005704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d05c      	beq.n	80057c4 <_dtoa_r+0xa44>
 800570a:	4648      	mov	r0, r9
 800570c:	6869      	ldr	r1, [r5, #4]
 800570e:	f000 fa09 	bl	8005b24 <_Balloc>
 8005712:	4606      	mov	r6, r0
 8005714:	b928      	cbnz	r0, 8005722 <_dtoa_r+0x9a2>
 8005716:	4602      	mov	r2, r0
 8005718:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800571c:	4b80      	ldr	r3, [pc, #512]	@ (8005920 <_dtoa_r+0xba0>)
 800571e:	f7ff bb43 	b.w	8004da8 <_dtoa_r+0x28>
 8005722:	692a      	ldr	r2, [r5, #16]
 8005724:	f105 010c 	add.w	r1, r5, #12
 8005728:	3202      	adds	r2, #2
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	300c      	adds	r0, #12
 800572e:	f7ff fa8c 	bl	8004c4a <memcpy>
 8005732:	2201      	movs	r2, #1
 8005734:	4631      	mov	r1, r6
 8005736:	4648      	mov	r0, r9
 8005738:	f000 fc44 	bl	8005fc4 <__lshift>
 800573c:	462f      	mov	r7, r5
 800573e:	4605      	mov	r5, r0
 8005740:	f10a 0301 	add.w	r3, sl, #1
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	eb0a 030b 	add.w	r3, sl, fp
 800574a:	930a      	str	r3, [sp, #40]	@ 0x28
 800574c:	9b06      	ldr	r3, [sp, #24]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	9309      	str	r3, [sp, #36]	@ 0x24
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	4621      	mov	r1, r4
 8005758:	9803      	ldr	r0, [sp, #12]
 800575a:	f103 3bff 	add.w	fp, r3, #4294967295
 800575e:	f7ff fa87 	bl	8004c70 <quorem>
 8005762:	4603      	mov	r3, r0
 8005764:	4639      	mov	r1, r7
 8005766:	3330      	adds	r3, #48	@ 0x30
 8005768:	9006      	str	r0, [sp, #24]
 800576a:	9803      	ldr	r0, [sp, #12]
 800576c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800576e:	f000 fc95 	bl	800609c <__mcmp>
 8005772:	462a      	mov	r2, r5
 8005774:	9008      	str	r0, [sp, #32]
 8005776:	4621      	mov	r1, r4
 8005778:	4648      	mov	r0, r9
 800577a:	f000 fcab 	bl	80060d4 <__mdiff>
 800577e:	68c2      	ldr	r2, [r0, #12]
 8005780:	4606      	mov	r6, r0
 8005782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005784:	bb02      	cbnz	r2, 80057c8 <_dtoa_r+0xa48>
 8005786:	4601      	mov	r1, r0
 8005788:	9803      	ldr	r0, [sp, #12]
 800578a:	f000 fc87 	bl	800609c <__mcmp>
 800578e:	4602      	mov	r2, r0
 8005790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005792:	4631      	mov	r1, r6
 8005794:	4648      	mov	r0, r9
 8005796:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800579a:	f000 fa03 	bl	8005ba4 <_Bfree>
 800579e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80057a2:	9e04      	ldr	r6, [sp, #16]
 80057a4:	ea42 0103 	orr.w	r1, r2, r3
 80057a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057aa:	4319      	orrs	r1, r3
 80057ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057ae:	d10d      	bne.n	80057cc <_dtoa_r+0xa4c>
 80057b0:	2b39      	cmp	r3, #57	@ 0x39
 80057b2:	d027      	beq.n	8005804 <_dtoa_r+0xa84>
 80057b4:	9a08      	ldr	r2, [sp, #32]
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	dd01      	ble.n	80057be <_dtoa_r+0xa3e>
 80057ba:	9b06      	ldr	r3, [sp, #24]
 80057bc:	3331      	adds	r3, #49	@ 0x31
 80057be:	f88b 3000 	strb.w	r3, [fp]
 80057c2:	e52e      	b.n	8005222 <_dtoa_r+0x4a2>
 80057c4:	4628      	mov	r0, r5
 80057c6:	e7b9      	b.n	800573c <_dtoa_r+0x9bc>
 80057c8:	2201      	movs	r2, #1
 80057ca:	e7e2      	b.n	8005792 <_dtoa_r+0xa12>
 80057cc:	9908      	ldr	r1, [sp, #32]
 80057ce:	2900      	cmp	r1, #0
 80057d0:	db04      	blt.n	80057dc <_dtoa_r+0xa5c>
 80057d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80057d4:	4301      	orrs	r1, r0
 80057d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057d8:	4301      	orrs	r1, r0
 80057da:	d120      	bne.n	800581e <_dtoa_r+0xa9e>
 80057dc:	2a00      	cmp	r2, #0
 80057de:	ddee      	ble.n	80057be <_dtoa_r+0xa3e>
 80057e0:	2201      	movs	r2, #1
 80057e2:	9903      	ldr	r1, [sp, #12]
 80057e4:	4648      	mov	r0, r9
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	f000 fbec 	bl	8005fc4 <__lshift>
 80057ec:	4621      	mov	r1, r4
 80057ee:	9003      	str	r0, [sp, #12]
 80057f0:	f000 fc54 	bl	800609c <__mcmp>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	dc02      	bgt.n	8005800 <_dtoa_r+0xa80>
 80057fa:	d1e0      	bne.n	80057be <_dtoa_r+0xa3e>
 80057fc:	07da      	lsls	r2, r3, #31
 80057fe:	d5de      	bpl.n	80057be <_dtoa_r+0xa3e>
 8005800:	2b39      	cmp	r3, #57	@ 0x39
 8005802:	d1da      	bne.n	80057ba <_dtoa_r+0xa3a>
 8005804:	2339      	movs	r3, #57	@ 0x39
 8005806:	f88b 3000 	strb.w	r3, [fp]
 800580a:	4633      	mov	r3, r6
 800580c:	461e      	mov	r6, r3
 800580e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005812:	3b01      	subs	r3, #1
 8005814:	2a39      	cmp	r2, #57	@ 0x39
 8005816:	d04e      	beq.n	80058b6 <_dtoa_r+0xb36>
 8005818:	3201      	adds	r2, #1
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	e501      	b.n	8005222 <_dtoa_r+0x4a2>
 800581e:	2a00      	cmp	r2, #0
 8005820:	dd03      	ble.n	800582a <_dtoa_r+0xaaa>
 8005822:	2b39      	cmp	r3, #57	@ 0x39
 8005824:	d0ee      	beq.n	8005804 <_dtoa_r+0xa84>
 8005826:	3301      	adds	r3, #1
 8005828:	e7c9      	b.n	80057be <_dtoa_r+0xa3e>
 800582a:	9a04      	ldr	r2, [sp, #16]
 800582c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800582e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005832:	428a      	cmp	r2, r1
 8005834:	d028      	beq.n	8005888 <_dtoa_r+0xb08>
 8005836:	2300      	movs	r3, #0
 8005838:	220a      	movs	r2, #10
 800583a:	9903      	ldr	r1, [sp, #12]
 800583c:	4648      	mov	r0, r9
 800583e:	f000 f9d3 	bl	8005be8 <__multadd>
 8005842:	42af      	cmp	r7, r5
 8005844:	9003      	str	r0, [sp, #12]
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f04f 020a 	mov.w	r2, #10
 800584e:	4639      	mov	r1, r7
 8005850:	4648      	mov	r0, r9
 8005852:	d107      	bne.n	8005864 <_dtoa_r+0xae4>
 8005854:	f000 f9c8 	bl	8005be8 <__multadd>
 8005858:	4607      	mov	r7, r0
 800585a:	4605      	mov	r5, r0
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	3301      	adds	r3, #1
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	e777      	b.n	8005754 <_dtoa_r+0x9d4>
 8005864:	f000 f9c0 	bl	8005be8 <__multadd>
 8005868:	4629      	mov	r1, r5
 800586a:	4607      	mov	r7, r0
 800586c:	2300      	movs	r3, #0
 800586e:	220a      	movs	r2, #10
 8005870:	4648      	mov	r0, r9
 8005872:	f000 f9b9 	bl	8005be8 <__multadd>
 8005876:	4605      	mov	r5, r0
 8005878:	e7f0      	b.n	800585c <_dtoa_r+0xadc>
 800587a:	f1bb 0f00 	cmp.w	fp, #0
 800587e:	bfcc      	ite	gt
 8005880:	465e      	movgt	r6, fp
 8005882:	2601      	movle	r6, #1
 8005884:	2700      	movs	r7, #0
 8005886:	4456      	add	r6, sl
 8005888:	2201      	movs	r2, #1
 800588a:	9903      	ldr	r1, [sp, #12]
 800588c:	4648      	mov	r0, r9
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	f000 fb98 	bl	8005fc4 <__lshift>
 8005894:	4621      	mov	r1, r4
 8005896:	9003      	str	r0, [sp, #12]
 8005898:	f000 fc00 	bl	800609c <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	dcb4      	bgt.n	800580a <_dtoa_r+0xa8a>
 80058a0:	d102      	bne.n	80058a8 <_dtoa_r+0xb28>
 80058a2:	9b04      	ldr	r3, [sp, #16]
 80058a4:	07db      	lsls	r3, r3, #31
 80058a6:	d4b0      	bmi.n	800580a <_dtoa_r+0xa8a>
 80058a8:	4633      	mov	r3, r6
 80058aa:	461e      	mov	r6, r3
 80058ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058b0:	2a30      	cmp	r2, #48	@ 0x30
 80058b2:	d0fa      	beq.n	80058aa <_dtoa_r+0xb2a>
 80058b4:	e4b5      	b.n	8005222 <_dtoa_r+0x4a2>
 80058b6:	459a      	cmp	sl, r3
 80058b8:	d1a8      	bne.n	800580c <_dtoa_r+0xa8c>
 80058ba:	2331      	movs	r3, #49	@ 0x31
 80058bc:	f108 0801 	add.w	r8, r8, #1
 80058c0:	f88a 3000 	strb.w	r3, [sl]
 80058c4:	e4ad      	b.n	8005222 <_dtoa_r+0x4a2>
 80058c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005924 <_dtoa_r+0xba4>
 80058cc:	b11b      	cbz	r3, 80058d6 <_dtoa_r+0xb56>
 80058ce:	f10a 0308 	add.w	r3, sl, #8
 80058d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4650      	mov	r0, sl
 80058d8:	b017      	add	sp, #92	@ 0x5c
 80058da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	f77f ae2e 	ble.w	8005542 <_dtoa_r+0x7c2>
 80058e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ea:	2001      	movs	r0, #1
 80058ec:	e64d      	b.n	800558a <_dtoa_r+0x80a>
 80058ee:	f1bb 0f00 	cmp.w	fp, #0
 80058f2:	f77f aed9 	ble.w	80056a8 <_dtoa_r+0x928>
 80058f6:	4656      	mov	r6, sl
 80058f8:	4621      	mov	r1, r4
 80058fa:	9803      	ldr	r0, [sp, #12]
 80058fc:	f7ff f9b8 	bl	8004c70 <quorem>
 8005900:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005904:	f806 3b01 	strb.w	r3, [r6], #1
 8005908:	eba6 020a 	sub.w	r2, r6, sl
 800590c:	4593      	cmp	fp, r2
 800590e:	ddb4      	ble.n	800587a <_dtoa_r+0xafa>
 8005910:	2300      	movs	r3, #0
 8005912:	220a      	movs	r2, #10
 8005914:	4648      	mov	r0, r9
 8005916:	9903      	ldr	r1, [sp, #12]
 8005918:	f000 f966 	bl	8005be8 <__multadd>
 800591c:	9003      	str	r0, [sp, #12]
 800591e:	e7eb      	b.n	80058f8 <_dtoa_r+0xb78>
 8005920:	08008a73 	.word	0x08008a73
 8005924:	080089f7 	.word	0x080089f7

08005928 <_free_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4605      	mov	r5, r0
 800592c:	2900      	cmp	r1, #0
 800592e:	d040      	beq.n	80059b2 <_free_r+0x8a>
 8005930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005934:	1f0c      	subs	r4, r1, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	bfb8      	it	lt
 800593a:	18e4      	addlt	r4, r4, r3
 800593c:	f000 f8e6 	bl	8005b0c <__malloc_lock>
 8005940:	4a1c      	ldr	r2, [pc, #112]	@ (80059b4 <_free_r+0x8c>)
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	b933      	cbnz	r3, 8005954 <_free_r+0x2c>
 8005946:	6063      	str	r3, [r4, #4]
 8005948:	6014      	str	r4, [r2, #0]
 800594a:	4628      	mov	r0, r5
 800594c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005950:	f000 b8e2 	b.w	8005b18 <__malloc_unlock>
 8005954:	42a3      	cmp	r3, r4
 8005956:	d908      	bls.n	800596a <_free_r+0x42>
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	1821      	adds	r1, r4, r0
 800595c:	428b      	cmp	r3, r1
 800595e:	bf01      	itttt	eq
 8005960:	6819      	ldreq	r1, [r3, #0]
 8005962:	685b      	ldreq	r3, [r3, #4]
 8005964:	1809      	addeq	r1, r1, r0
 8005966:	6021      	streq	r1, [r4, #0]
 8005968:	e7ed      	b.n	8005946 <_free_r+0x1e>
 800596a:	461a      	mov	r2, r3
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b10b      	cbz	r3, 8005974 <_free_r+0x4c>
 8005970:	42a3      	cmp	r3, r4
 8005972:	d9fa      	bls.n	800596a <_free_r+0x42>
 8005974:	6811      	ldr	r1, [r2, #0]
 8005976:	1850      	adds	r0, r2, r1
 8005978:	42a0      	cmp	r0, r4
 800597a:	d10b      	bne.n	8005994 <_free_r+0x6c>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	4401      	add	r1, r0
 8005980:	1850      	adds	r0, r2, r1
 8005982:	4283      	cmp	r3, r0
 8005984:	6011      	str	r1, [r2, #0]
 8005986:	d1e0      	bne.n	800594a <_free_r+0x22>
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4408      	add	r0, r1
 800598e:	6010      	str	r0, [r2, #0]
 8005990:	6053      	str	r3, [r2, #4]
 8005992:	e7da      	b.n	800594a <_free_r+0x22>
 8005994:	d902      	bls.n	800599c <_free_r+0x74>
 8005996:	230c      	movs	r3, #12
 8005998:	602b      	str	r3, [r5, #0]
 800599a:	e7d6      	b.n	800594a <_free_r+0x22>
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	1821      	adds	r1, r4, r0
 80059a0:	428b      	cmp	r3, r1
 80059a2:	bf01      	itttt	eq
 80059a4:	6819      	ldreq	r1, [r3, #0]
 80059a6:	685b      	ldreq	r3, [r3, #4]
 80059a8:	1809      	addeq	r1, r1, r0
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6054      	str	r4, [r2, #4]
 80059b0:	e7cb      	b.n	800594a <_free_r+0x22>
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000824 	.word	0x20000824

080059b8 <malloc>:
 80059b8:	4b02      	ldr	r3, [pc, #8]	@ (80059c4 <malloc+0xc>)
 80059ba:	4601      	mov	r1, r0
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	f000 b825 	b.w	8005a0c <_malloc_r>
 80059c2:	bf00      	nop
 80059c4:	20000018 	.word	0x20000018

080059c8 <sbrk_aligned>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005a08 <sbrk_aligned+0x40>)
 80059cc:	460c      	mov	r4, r1
 80059ce:	6831      	ldr	r1, [r6, #0]
 80059d0:	4605      	mov	r5, r0
 80059d2:	b911      	cbnz	r1, 80059da <sbrk_aligned+0x12>
 80059d4:	f001 fdee 	bl	80075b4 <_sbrk_r>
 80059d8:	6030      	str	r0, [r6, #0]
 80059da:	4621      	mov	r1, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	f001 fde9 	bl	80075b4 <_sbrk_r>
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	d103      	bne.n	80059ee <sbrk_aligned+0x26>
 80059e6:	f04f 34ff 	mov.w	r4, #4294967295
 80059ea:	4620      	mov	r0, r4
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	1cc4      	adds	r4, r0, #3
 80059f0:	f024 0403 	bic.w	r4, r4, #3
 80059f4:	42a0      	cmp	r0, r4
 80059f6:	d0f8      	beq.n	80059ea <sbrk_aligned+0x22>
 80059f8:	1a21      	subs	r1, r4, r0
 80059fa:	4628      	mov	r0, r5
 80059fc:	f001 fdda 	bl	80075b4 <_sbrk_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d1f2      	bne.n	80059ea <sbrk_aligned+0x22>
 8005a04:	e7ef      	b.n	80059e6 <sbrk_aligned+0x1e>
 8005a06:	bf00      	nop
 8005a08:	20000820 	.word	0x20000820

08005a0c <_malloc_r>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	1ccd      	adds	r5, r1, #3
 8005a12:	f025 0503 	bic.w	r5, r5, #3
 8005a16:	3508      	adds	r5, #8
 8005a18:	2d0c      	cmp	r5, #12
 8005a1a:	bf38      	it	cc
 8005a1c:	250c      	movcc	r5, #12
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	4606      	mov	r6, r0
 8005a22:	db01      	blt.n	8005a28 <_malloc_r+0x1c>
 8005a24:	42a9      	cmp	r1, r5
 8005a26:	d904      	bls.n	8005a32 <_malloc_r+0x26>
 8005a28:	230c      	movs	r3, #12
 8005a2a:	6033      	str	r3, [r6, #0]
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b08 <_malloc_r+0xfc>
 8005a36:	f000 f869 	bl	8005b0c <__malloc_lock>
 8005a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3e:	461c      	mov	r4, r3
 8005a40:	bb44      	cbnz	r4, 8005a94 <_malloc_r+0x88>
 8005a42:	4629      	mov	r1, r5
 8005a44:	4630      	mov	r0, r6
 8005a46:	f7ff ffbf 	bl	80059c8 <sbrk_aligned>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	d158      	bne.n	8005b02 <_malloc_r+0xf6>
 8005a50:	f8d8 4000 	ldr.w	r4, [r8]
 8005a54:	4627      	mov	r7, r4
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	d143      	bne.n	8005ae2 <_malloc_r+0xd6>
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	d04b      	beq.n	8005af6 <_malloc_r+0xea>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	4639      	mov	r1, r7
 8005a62:	4630      	mov	r0, r6
 8005a64:	eb04 0903 	add.w	r9, r4, r3
 8005a68:	f001 fda4 	bl	80075b4 <_sbrk_r>
 8005a6c:	4581      	cmp	r9, r0
 8005a6e:	d142      	bne.n	8005af6 <_malloc_r+0xea>
 8005a70:	6821      	ldr	r1, [r4, #0]
 8005a72:	4630      	mov	r0, r6
 8005a74:	1a6d      	subs	r5, r5, r1
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7ff ffa6 	bl	80059c8 <sbrk_aligned>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d03a      	beq.n	8005af6 <_malloc_r+0xea>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	442b      	add	r3, r5
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	f8d8 3000 	ldr.w	r3, [r8]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	bb62      	cbnz	r2, 8005ae8 <_malloc_r+0xdc>
 8005a8e:	f8c8 7000 	str.w	r7, [r8]
 8005a92:	e00f      	b.n	8005ab4 <_malloc_r+0xa8>
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	1b52      	subs	r2, r2, r5
 8005a98:	d420      	bmi.n	8005adc <_malloc_r+0xd0>
 8005a9a:	2a0b      	cmp	r2, #11
 8005a9c:	d917      	bls.n	8005ace <_malloc_r+0xc2>
 8005a9e:	1961      	adds	r1, r4, r5
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	6025      	str	r5, [r4, #0]
 8005aa4:	bf18      	it	ne
 8005aa6:	6059      	strne	r1, [r3, #4]
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	bf08      	it	eq
 8005aac:	f8c8 1000 	streq.w	r1, [r8]
 8005ab0:	5162      	str	r2, [r4, r5]
 8005ab2:	604b      	str	r3, [r1, #4]
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 f82f 	bl	8005b18 <__malloc_unlock>
 8005aba:	f104 000b 	add.w	r0, r4, #11
 8005abe:	1d23      	adds	r3, r4, #4
 8005ac0:	f020 0007 	bic.w	r0, r0, #7
 8005ac4:	1ac2      	subs	r2, r0, r3
 8005ac6:	bf1c      	itt	ne
 8005ac8:	1a1b      	subne	r3, r3, r0
 8005aca:	50a3      	strne	r3, [r4, r2]
 8005acc:	e7af      	b.n	8005a2e <_malloc_r+0x22>
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	bf0c      	ite	eq
 8005ad4:	f8c8 2000 	streq.w	r2, [r8]
 8005ad8:	605a      	strne	r2, [r3, #4]
 8005ada:	e7eb      	b.n	8005ab4 <_malloc_r+0xa8>
 8005adc:	4623      	mov	r3, r4
 8005ade:	6864      	ldr	r4, [r4, #4]
 8005ae0:	e7ae      	b.n	8005a40 <_malloc_r+0x34>
 8005ae2:	463c      	mov	r4, r7
 8005ae4:	687f      	ldr	r7, [r7, #4]
 8005ae6:	e7b6      	b.n	8005a56 <_malloc_r+0x4a>
 8005ae8:	461a      	mov	r2, r3
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d1fb      	bne.n	8005ae8 <_malloc_r+0xdc>
 8005af0:	2300      	movs	r3, #0
 8005af2:	6053      	str	r3, [r2, #4]
 8005af4:	e7de      	b.n	8005ab4 <_malloc_r+0xa8>
 8005af6:	230c      	movs	r3, #12
 8005af8:	4630      	mov	r0, r6
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	f000 f80c 	bl	8005b18 <__malloc_unlock>
 8005b00:	e794      	b.n	8005a2c <_malloc_r+0x20>
 8005b02:	6005      	str	r5, [r0, #0]
 8005b04:	e7d6      	b.n	8005ab4 <_malloc_r+0xa8>
 8005b06:	bf00      	nop
 8005b08:	20000824 	.word	0x20000824

08005b0c <__malloc_lock>:
 8005b0c:	4801      	ldr	r0, [pc, #4]	@ (8005b14 <__malloc_lock+0x8>)
 8005b0e:	f7ff b88c 	b.w	8004c2a <__retarget_lock_acquire_recursive>
 8005b12:	bf00      	nop
 8005b14:	2000081c 	.word	0x2000081c

08005b18 <__malloc_unlock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	@ (8005b20 <__malloc_unlock+0x8>)
 8005b1a:	f7ff b887 	b.w	8004c2c <__retarget_lock_release_recursive>
 8005b1e:	bf00      	nop
 8005b20:	2000081c 	.word	0x2000081c

08005b24 <_Balloc>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	69c6      	ldr	r6, [r0, #28]
 8005b28:	4604      	mov	r4, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	b976      	cbnz	r6, 8005b4c <_Balloc+0x28>
 8005b2e:	2010      	movs	r0, #16
 8005b30:	f7ff ff42 	bl	80059b8 <malloc>
 8005b34:	4602      	mov	r2, r0
 8005b36:	61e0      	str	r0, [r4, #28]
 8005b38:	b920      	cbnz	r0, 8005b44 <_Balloc+0x20>
 8005b3a:	216b      	movs	r1, #107	@ 0x6b
 8005b3c:	4b17      	ldr	r3, [pc, #92]	@ (8005b9c <_Balloc+0x78>)
 8005b3e:	4818      	ldr	r0, [pc, #96]	@ (8005ba0 <_Balloc+0x7c>)
 8005b40:	f001 fd4e 	bl	80075e0 <__assert_func>
 8005b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b48:	6006      	str	r6, [r0, #0]
 8005b4a:	60c6      	str	r6, [r0, #12]
 8005b4c:	69e6      	ldr	r6, [r4, #28]
 8005b4e:	68f3      	ldr	r3, [r6, #12]
 8005b50:	b183      	cbz	r3, 8005b74 <_Balloc+0x50>
 8005b52:	69e3      	ldr	r3, [r4, #28]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b5a:	b9b8      	cbnz	r0, 8005b8c <_Balloc+0x68>
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005b62:	1d72      	adds	r2, r6, #5
 8005b64:	4620      	mov	r0, r4
 8005b66:	0092      	lsls	r2, r2, #2
 8005b68:	f001 fd58 	bl	800761c <_calloc_r>
 8005b6c:	b160      	cbz	r0, 8005b88 <_Balloc+0x64>
 8005b6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b72:	e00e      	b.n	8005b92 <_Balloc+0x6e>
 8005b74:	2221      	movs	r2, #33	@ 0x21
 8005b76:	2104      	movs	r1, #4
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f001 fd4f 	bl	800761c <_calloc_r>
 8005b7e:	69e3      	ldr	r3, [r4, #28]
 8005b80:	60f0      	str	r0, [r6, #12]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e4      	bne.n	8005b52 <_Balloc+0x2e>
 8005b88:	2000      	movs	r0, #0
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	6802      	ldr	r2, [r0, #0]
 8005b8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b92:	2300      	movs	r3, #0
 8005b94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b98:	e7f7      	b.n	8005b8a <_Balloc+0x66>
 8005b9a:	bf00      	nop
 8005b9c:	08008a04 	.word	0x08008a04
 8005ba0:	08008a84 	.word	0x08008a84

08005ba4 <_Bfree>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	69c6      	ldr	r6, [r0, #28]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	b976      	cbnz	r6, 8005bcc <_Bfree+0x28>
 8005bae:	2010      	movs	r0, #16
 8005bb0:	f7ff ff02 	bl	80059b8 <malloc>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	61e8      	str	r0, [r5, #28]
 8005bb8:	b920      	cbnz	r0, 8005bc4 <_Bfree+0x20>
 8005bba:	218f      	movs	r1, #143	@ 0x8f
 8005bbc:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <_Bfree+0x3c>)
 8005bbe:	4809      	ldr	r0, [pc, #36]	@ (8005be4 <_Bfree+0x40>)
 8005bc0:	f001 fd0e 	bl	80075e0 <__assert_func>
 8005bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bc8:	6006      	str	r6, [r0, #0]
 8005bca:	60c6      	str	r6, [r0, #12]
 8005bcc:	b13c      	cbz	r4, 8005bde <_Bfree+0x3a>
 8005bce:	69eb      	ldr	r3, [r5, #28]
 8005bd0:	6862      	ldr	r2, [r4, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bd8:	6021      	str	r1, [r4, #0]
 8005bda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
 8005be0:	08008a04 	.word	0x08008a04
 8005be4:	08008a84 	.word	0x08008a84

08005be8 <__multadd>:
 8005be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bec:	4607      	mov	r7, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	461e      	mov	r6, r3
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	690d      	ldr	r5, [r1, #16]
 8005bf6:	f101 0c14 	add.w	ip, r1, #20
 8005bfa:	f8dc 3000 	ldr.w	r3, [ip]
 8005bfe:	3001      	adds	r0, #1
 8005c00:	b299      	uxth	r1, r3
 8005c02:	fb02 6101 	mla	r1, r2, r1, r6
 8005c06:	0c1e      	lsrs	r6, r3, #16
 8005c08:	0c0b      	lsrs	r3, r1, #16
 8005c0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005c0e:	b289      	uxth	r1, r1
 8005c10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c14:	4285      	cmp	r5, r0
 8005c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c1e:	dcec      	bgt.n	8005bfa <__multadd+0x12>
 8005c20:	b30e      	cbz	r6, 8005c66 <__multadd+0x7e>
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dc19      	bgt.n	8005c5c <__multadd+0x74>
 8005c28:	6861      	ldr	r1, [r4, #4]
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	3101      	adds	r1, #1
 8005c2e:	f7ff ff79 	bl	8005b24 <_Balloc>
 8005c32:	4680      	mov	r8, r0
 8005c34:	b928      	cbnz	r0, 8005c42 <__multadd+0x5a>
 8005c36:	4602      	mov	r2, r0
 8005c38:	21ba      	movs	r1, #186	@ 0xba
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <__multadd+0x84>)
 8005c3c:	480c      	ldr	r0, [pc, #48]	@ (8005c70 <__multadd+0x88>)
 8005c3e:	f001 fccf 	bl	80075e0 <__assert_func>
 8005c42:	6922      	ldr	r2, [r4, #16]
 8005c44:	f104 010c 	add.w	r1, r4, #12
 8005c48:	3202      	adds	r2, #2
 8005c4a:	0092      	lsls	r2, r2, #2
 8005c4c:	300c      	adds	r0, #12
 8005c4e:	f7fe fffc 	bl	8004c4a <memcpy>
 8005c52:	4621      	mov	r1, r4
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7ff ffa5 	bl	8005ba4 <_Bfree>
 8005c5a:	4644      	mov	r4, r8
 8005c5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c60:	3501      	adds	r5, #1
 8005c62:	615e      	str	r6, [r3, #20]
 8005c64:	6125      	str	r5, [r4, #16]
 8005c66:	4620      	mov	r0, r4
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6c:	08008a73 	.word	0x08008a73
 8005c70:	08008a84 	.word	0x08008a84

08005c74 <__s2b>:
 8005c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c78:	4615      	mov	r5, r2
 8005c7a:	2209      	movs	r2, #9
 8005c7c:	461f      	mov	r7, r3
 8005c7e:	3308      	adds	r3, #8
 8005c80:	460c      	mov	r4, r1
 8005c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c86:	4606      	mov	r6, r0
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	db09      	blt.n	8005ca4 <__s2b+0x30>
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff ff47 	bl	8005b24 <_Balloc>
 8005c96:	b940      	cbnz	r0, 8005caa <__s2b+0x36>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	21d3      	movs	r1, #211	@ 0xd3
 8005c9c:	4b18      	ldr	r3, [pc, #96]	@ (8005d00 <__s2b+0x8c>)
 8005c9e:	4819      	ldr	r0, [pc, #100]	@ (8005d04 <__s2b+0x90>)
 8005ca0:	f001 fc9e 	bl	80075e0 <__assert_func>
 8005ca4:	0052      	lsls	r2, r2, #1
 8005ca6:	3101      	adds	r1, #1
 8005ca8:	e7f0      	b.n	8005c8c <__s2b+0x18>
 8005caa:	9b08      	ldr	r3, [sp, #32]
 8005cac:	2d09      	cmp	r5, #9
 8005cae:	6143      	str	r3, [r0, #20]
 8005cb0:	f04f 0301 	mov.w	r3, #1
 8005cb4:	6103      	str	r3, [r0, #16]
 8005cb6:	dd16      	ble.n	8005ce6 <__s2b+0x72>
 8005cb8:	f104 0909 	add.w	r9, r4, #9
 8005cbc:	46c8      	mov	r8, r9
 8005cbe:	442c      	add	r4, r5
 8005cc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	4630      	mov	r0, r6
 8005cca:	3b30      	subs	r3, #48	@ 0x30
 8005ccc:	f7ff ff8c 	bl	8005be8 <__multadd>
 8005cd0:	45a0      	cmp	r8, r4
 8005cd2:	d1f5      	bne.n	8005cc0 <__s2b+0x4c>
 8005cd4:	f1a5 0408 	sub.w	r4, r5, #8
 8005cd8:	444c      	add	r4, r9
 8005cda:	1b2d      	subs	r5, r5, r4
 8005cdc:	1963      	adds	r3, r4, r5
 8005cde:	42bb      	cmp	r3, r7
 8005ce0:	db04      	blt.n	8005cec <__s2b+0x78>
 8005ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce6:	2509      	movs	r5, #9
 8005ce8:	340a      	adds	r4, #10
 8005cea:	e7f6      	b.n	8005cda <__s2b+0x66>
 8005cec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005cf0:	4601      	mov	r1, r0
 8005cf2:	220a      	movs	r2, #10
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	3b30      	subs	r3, #48	@ 0x30
 8005cf8:	f7ff ff76 	bl	8005be8 <__multadd>
 8005cfc:	e7ee      	b.n	8005cdc <__s2b+0x68>
 8005cfe:	bf00      	nop
 8005d00:	08008a73 	.word	0x08008a73
 8005d04:	08008a84 	.word	0x08008a84

08005d08 <__hi0bits>:
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d0e:	bf3a      	itte	cc
 8005d10:	0403      	lslcc	r3, r0, #16
 8005d12:	2010      	movcc	r0, #16
 8005d14:	2000      	movcs	r0, #0
 8005d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1a:	bf3c      	itt	cc
 8005d1c:	021b      	lslcc	r3, r3, #8
 8005d1e:	3008      	addcc	r0, #8
 8005d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d24:	bf3c      	itt	cc
 8005d26:	011b      	lslcc	r3, r3, #4
 8005d28:	3004      	addcc	r0, #4
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2e:	bf3c      	itt	cc
 8005d30:	009b      	lslcc	r3, r3, #2
 8005d32:	3002      	addcc	r0, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db05      	blt.n	8005d44 <__hi0bits+0x3c>
 8005d38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d3c:	f100 0001 	add.w	r0, r0, #1
 8005d40:	bf08      	it	eq
 8005d42:	2020      	moveq	r0, #32
 8005d44:	4770      	bx	lr

08005d46 <__lo0bits>:
 8005d46:	6803      	ldr	r3, [r0, #0]
 8005d48:	4602      	mov	r2, r0
 8005d4a:	f013 0007 	ands.w	r0, r3, #7
 8005d4e:	d00b      	beq.n	8005d68 <__lo0bits+0x22>
 8005d50:	07d9      	lsls	r1, r3, #31
 8005d52:	d421      	bmi.n	8005d98 <__lo0bits+0x52>
 8005d54:	0798      	lsls	r0, r3, #30
 8005d56:	bf49      	itett	mi
 8005d58:	085b      	lsrmi	r3, r3, #1
 8005d5a:	089b      	lsrpl	r3, r3, #2
 8005d5c:	2001      	movmi	r0, #1
 8005d5e:	6013      	strmi	r3, [r2, #0]
 8005d60:	bf5c      	itt	pl
 8005d62:	2002      	movpl	r0, #2
 8005d64:	6013      	strpl	r3, [r2, #0]
 8005d66:	4770      	bx	lr
 8005d68:	b299      	uxth	r1, r3
 8005d6a:	b909      	cbnz	r1, 8005d70 <__lo0bits+0x2a>
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	b2d9      	uxtb	r1, r3
 8005d72:	b909      	cbnz	r1, 8005d78 <__lo0bits+0x32>
 8005d74:	3008      	adds	r0, #8
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	0719      	lsls	r1, r3, #28
 8005d7a:	bf04      	itt	eq
 8005d7c:	091b      	lsreq	r3, r3, #4
 8005d7e:	3004      	addeq	r0, #4
 8005d80:	0799      	lsls	r1, r3, #30
 8005d82:	bf04      	itt	eq
 8005d84:	089b      	lsreq	r3, r3, #2
 8005d86:	3002      	addeq	r0, #2
 8005d88:	07d9      	lsls	r1, r3, #31
 8005d8a:	d403      	bmi.n	8005d94 <__lo0bits+0x4e>
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	f100 0001 	add.w	r0, r0, #1
 8005d92:	d003      	beq.n	8005d9c <__lo0bits+0x56>
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4770      	bx	lr
 8005d98:	2000      	movs	r0, #0
 8005d9a:	4770      	bx	lr
 8005d9c:	2020      	movs	r0, #32
 8005d9e:	4770      	bx	lr

08005da0 <__i2b>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	460c      	mov	r4, r1
 8005da4:	2101      	movs	r1, #1
 8005da6:	f7ff febd 	bl	8005b24 <_Balloc>
 8005daa:	4602      	mov	r2, r0
 8005dac:	b928      	cbnz	r0, 8005dba <__i2b+0x1a>
 8005dae:	f240 1145 	movw	r1, #325	@ 0x145
 8005db2:	4b04      	ldr	r3, [pc, #16]	@ (8005dc4 <__i2b+0x24>)
 8005db4:	4804      	ldr	r0, [pc, #16]	@ (8005dc8 <__i2b+0x28>)
 8005db6:	f001 fc13 	bl	80075e0 <__assert_func>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	6144      	str	r4, [r0, #20]
 8005dbe:	6103      	str	r3, [r0, #16]
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08008a73 	.word	0x08008a73
 8005dc8:	08008a84 	.word	0x08008a84

08005dcc <__multiply>:
 8005dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	4617      	mov	r7, r2
 8005dd2:	690a      	ldr	r2, [r1, #16]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4689      	mov	r9, r1
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	bfa2      	ittt	ge
 8005ddc:	463b      	movge	r3, r7
 8005dde:	460f      	movge	r7, r1
 8005de0:	4699      	movge	r9, r3
 8005de2:	693d      	ldr	r5, [r7, #16]
 8005de4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	eb05 060a 	add.w	r6, r5, sl
 8005df0:	42b3      	cmp	r3, r6
 8005df2:	b085      	sub	sp, #20
 8005df4:	bfb8      	it	lt
 8005df6:	3101      	addlt	r1, #1
 8005df8:	f7ff fe94 	bl	8005b24 <_Balloc>
 8005dfc:	b930      	cbnz	r0, 8005e0c <__multiply+0x40>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e04:	4b40      	ldr	r3, [pc, #256]	@ (8005f08 <__multiply+0x13c>)
 8005e06:	4841      	ldr	r0, [pc, #260]	@ (8005f0c <__multiply+0x140>)
 8005e08:	f001 fbea 	bl	80075e0 <__assert_func>
 8005e0c:	f100 0414 	add.w	r4, r0, #20
 8005e10:	4623      	mov	r3, r4
 8005e12:	2200      	movs	r2, #0
 8005e14:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005e18:	4573      	cmp	r3, lr
 8005e1a:	d320      	bcc.n	8005e5e <__multiply+0x92>
 8005e1c:	f107 0814 	add.w	r8, r7, #20
 8005e20:	f109 0114 	add.w	r1, r9, #20
 8005e24:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005e28:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005e2c:	9302      	str	r3, [sp, #8]
 8005e2e:	1beb      	subs	r3, r5, r7
 8005e30:	3b15      	subs	r3, #21
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	3304      	adds	r3, #4
 8005e38:	3715      	adds	r7, #21
 8005e3a:	42bd      	cmp	r5, r7
 8005e3c:	bf38      	it	cc
 8005e3e:	2304      	movcc	r3, #4
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	9103      	str	r1, [sp, #12]
 8005e46:	428b      	cmp	r3, r1
 8005e48:	d80c      	bhi.n	8005e64 <__multiply+0x98>
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	dd03      	ble.n	8005e56 <__multiply+0x8a>
 8005e4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d055      	beq.n	8005f02 <__multiply+0x136>
 8005e56:	6106      	str	r6, [r0, #16]
 8005e58:	b005      	add	sp, #20
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	f843 2b04 	str.w	r2, [r3], #4
 8005e62:	e7d9      	b.n	8005e18 <__multiply+0x4c>
 8005e64:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e68:	f1ba 0f00 	cmp.w	sl, #0
 8005e6c:	d01f      	beq.n	8005eae <__multiply+0xe2>
 8005e6e:	46c4      	mov	ip, r8
 8005e70:	46a1      	mov	r9, r4
 8005e72:	2700      	movs	r7, #0
 8005e74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e78:	f8d9 3000 	ldr.w	r3, [r9]
 8005e7c:	fa1f fb82 	uxth.w	fp, r2
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e86:	443b      	add	r3, r7
 8005e88:	f8d9 7000 	ldr.w	r7, [r9]
 8005e8c:	0c12      	lsrs	r2, r2, #16
 8005e8e:	0c3f      	lsrs	r7, r7, #16
 8005e90:	fb0a 7202 	mla	r2, sl, r2, r7
 8005e94:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e9e:	4565      	cmp	r5, ip
 8005ea0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005ea4:	f849 3b04 	str.w	r3, [r9], #4
 8005ea8:	d8e4      	bhi.n	8005e74 <__multiply+0xa8>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	50e7      	str	r7, [r4, r3]
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	3104      	adds	r1, #4
 8005eb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005eb6:	f1b9 0f00 	cmp.w	r9, #0
 8005eba:	d020      	beq.n	8005efe <__multiply+0x132>
 8005ebc:	4647      	mov	r7, r8
 8005ebe:	46a4      	mov	ip, r4
 8005ec0:	f04f 0a00 	mov.w	sl, #0
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f8b7 b000 	ldrh.w	fp, [r7]
 8005eca:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	fb09 220b 	mla	r2, r9, fp, r2
 8005ed4:	4452      	add	r2, sl
 8005ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eda:	f84c 3b04 	str.w	r3, [ip], #4
 8005ede:	f857 3b04 	ldr.w	r3, [r7], #4
 8005ee2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ee6:	f8bc 3000 	ldrh.w	r3, [ip]
 8005eea:	42bd      	cmp	r5, r7
 8005eec:	fb09 330a 	mla	r3, r9, sl, r3
 8005ef0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005ef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ef8:	d8e5      	bhi.n	8005ec6 <__multiply+0xfa>
 8005efa:	9a01      	ldr	r2, [sp, #4]
 8005efc:	50a3      	str	r3, [r4, r2]
 8005efe:	3404      	adds	r4, #4
 8005f00:	e79f      	b.n	8005e42 <__multiply+0x76>
 8005f02:	3e01      	subs	r6, #1
 8005f04:	e7a1      	b.n	8005e4a <__multiply+0x7e>
 8005f06:	bf00      	nop
 8005f08:	08008a73 	.word	0x08008a73
 8005f0c:	08008a84 	.word	0x08008a84

08005f10 <__pow5mult>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	4615      	mov	r5, r2
 8005f16:	f012 0203 	ands.w	r2, r2, #3
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	460e      	mov	r6, r1
 8005f1e:	d007      	beq.n	8005f30 <__pow5mult+0x20>
 8005f20:	4c25      	ldr	r4, [pc, #148]	@ (8005fb8 <__pow5mult+0xa8>)
 8005f22:	3a01      	subs	r2, #1
 8005f24:	2300      	movs	r3, #0
 8005f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f2a:	f7ff fe5d 	bl	8005be8 <__multadd>
 8005f2e:	4606      	mov	r6, r0
 8005f30:	10ad      	asrs	r5, r5, #2
 8005f32:	d03d      	beq.n	8005fb0 <__pow5mult+0xa0>
 8005f34:	69fc      	ldr	r4, [r7, #28]
 8005f36:	b97c      	cbnz	r4, 8005f58 <__pow5mult+0x48>
 8005f38:	2010      	movs	r0, #16
 8005f3a:	f7ff fd3d 	bl	80059b8 <malloc>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	61f8      	str	r0, [r7, #28]
 8005f42:	b928      	cbnz	r0, 8005f50 <__pow5mult+0x40>
 8005f44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f48:	4b1c      	ldr	r3, [pc, #112]	@ (8005fbc <__pow5mult+0xac>)
 8005f4a:	481d      	ldr	r0, [pc, #116]	@ (8005fc0 <__pow5mult+0xb0>)
 8005f4c:	f001 fb48 	bl	80075e0 <__assert_func>
 8005f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f54:	6004      	str	r4, [r0, #0]
 8005f56:	60c4      	str	r4, [r0, #12]
 8005f58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f60:	b94c      	cbnz	r4, 8005f76 <__pow5mult+0x66>
 8005f62:	f240 2171 	movw	r1, #625	@ 0x271
 8005f66:	4638      	mov	r0, r7
 8005f68:	f7ff ff1a 	bl	8005da0 <__i2b>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	f04f 0900 	mov.w	r9, #0
 8005f7a:	07eb      	lsls	r3, r5, #31
 8005f7c:	d50a      	bpl.n	8005f94 <__pow5mult+0x84>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4622      	mov	r2, r4
 8005f82:	4638      	mov	r0, r7
 8005f84:	f7ff ff22 	bl	8005dcc <__multiply>
 8005f88:	4680      	mov	r8, r0
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff fe09 	bl	8005ba4 <_Bfree>
 8005f92:	4646      	mov	r6, r8
 8005f94:	106d      	asrs	r5, r5, #1
 8005f96:	d00b      	beq.n	8005fb0 <__pow5mult+0xa0>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	b938      	cbnz	r0, 8005fac <__pow5mult+0x9c>
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff ff13 	bl	8005dcc <__multiply>
 8005fa6:	6020      	str	r0, [r4, #0]
 8005fa8:	f8c0 9000 	str.w	r9, [r0]
 8005fac:	4604      	mov	r4, r0
 8005fae:	e7e4      	b.n	8005f7a <__pow5mult+0x6a>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb6:	bf00      	nop
 8005fb8:	08008b94 	.word	0x08008b94
 8005fbc:	08008a04 	.word	0x08008a04
 8005fc0:	08008a84 	.word	0x08008a84

08005fc4 <__lshift>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	4607      	mov	r7, r0
 8005fcc:	4691      	mov	r9, r2
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	6849      	ldr	r1, [r1, #4]
 8005fd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fd6:	68a3      	ldr	r3, [r4, #8]
 8005fd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fdc:	f108 0601 	add.w	r6, r8, #1
 8005fe0:	42b3      	cmp	r3, r6
 8005fe2:	db0b      	blt.n	8005ffc <__lshift+0x38>
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff fd9d 	bl	8005b24 <_Balloc>
 8005fea:	4605      	mov	r5, r0
 8005fec:	b948      	cbnz	r0, 8006002 <__lshift+0x3e>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ff4:	4b27      	ldr	r3, [pc, #156]	@ (8006094 <__lshift+0xd0>)
 8005ff6:	4828      	ldr	r0, [pc, #160]	@ (8006098 <__lshift+0xd4>)
 8005ff8:	f001 faf2 	bl	80075e0 <__assert_func>
 8005ffc:	3101      	adds	r1, #1
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	e7ee      	b.n	8005fe0 <__lshift+0x1c>
 8006002:	2300      	movs	r3, #0
 8006004:	f100 0114 	add.w	r1, r0, #20
 8006008:	f100 0210 	add.w	r2, r0, #16
 800600c:	4618      	mov	r0, r3
 800600e:	4553      	cmp	r3, sl
 8006010:	db33      	blt.n	800607a <__lshift+0xb6>
 8006012:	6920      	ldr	r0, [r4, #16]
 8006014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006018:	f104 0314 	add.w	r3, r4, #20
 800601c:	f019 091f 	ands.w	r9, r9, #31
 8006020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006028:	d02b      	beq.n	8006082 <__lshift+0xbe>
 800602a:	468a      	mov	sl, r1
 800602c:	2200      	movs	r2, #0
 800602e:	f1c9 0e20 	rsb	lr, r9, #32
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	fa00 f009 	lsl.w	r0, r0, r9
 8006038:	4310      	orrs	r0, r2
 800603a:	f84a 0b04 	str.w	r0, [sl], #4
 800603e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006042:	459c      	cmp	ip, r3
 8006044:	fa22 f20e 	lsr.w	r2, r2, lr
 8006048:	d8f3      	bhi.n	8006032 <__lshift+0x6e>
 800604a:	ebac 0304 	sub.w	r3, ip, r4
 800604e:	3b15      	subs	r3, #21
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	3304      	adds	r3, #4
 8006056:	f104 0015 	add.w	r0, r4, #21
 800605a:	4560      	cmp	r0, ip
 800605c:	bf88      	it	hi
 800605e:	2304      	movhi	r3, #4
 8006060:	50ca      	str	r2, [r1, r3]
 8006062:	b10a      	cbz	r2, 8006068 <__lshift+0xa4>
 8006064:	f108 0602 	add.w	r6, r8, #2
 8006068:	3e01      	subs	r6, #1
 800606a:	4638      	mov	r0, r7
 800606c:	4621      	mov	r1, r4
 800606e:	612e      	str	r6, [r5, #16]
 8006070:	f7ff fd98 	bl	8005ba4 <_Bfree>
 8006074:	4628      	mov	r0, r5
 8006076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607a:	f842 0f04 	str.w	r0, [r2, #4]!
 800607e:	3301      	adds	r3, #1
 8006080:	e7c5      	b.n	800600e <__lshift+0x4a>
 8006082:	3904      	subs	r1, #4
 8006084:	f853 2b04 	ldr.w	r2, [r3], #4
 8006088:	459c      	cmp	ip, r3
 800608a:	f841 2f04 	str.w	r2, [r1, #4]!
 800608e:	d8f9      	bhi.n	8006084 <__lshift+0xc0>
 8006090:	e7ea      	b.n	8006068 <__lshift+0xa4>
 8006092:	bf00      	nop
 8006094:	08008a73 	.word	0x08008a73
 8006098:	08008a84 	.word	0x08008a84

0800609c <__mcmp>:
 800609c:	4603      	mov	r3, r0
 800609e:	690a      	ldr	r2, [r1, #16]
 80060a0:	6900      	ldr	r0, [r0, #16]
 80060a2:	b530      	push	{r4, r5, lr}
 80060a4:	1a80      	subs	r0, r0, r2
 80060a6:	d10e      	bne.n	80060c6 <__mcmp+0x2a>
 80060a8:	3314      	adds	r3, #20
 80060aa:	3114      	adds	r1, #20
 80060ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060bc:	4295      	cmp	r5, r2
 80060be:	d003      	beq.n	80060c8 <__mcmp+0x2c>
 80060c0:	d205      	bcs.n	80060ce <__mcmp+0x32>
 80060c2:	f04f 30ff 	mov.w	r0, #4294967295
 80060c6:	bd30      	pop	{r4, r5, pc}
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d3f3      	bcc.n	80060b4 <__mcmp+0x18>
 80060cc:	e7fb      	b.n	80060c6 <__mcmp+0x2a>
 80060ce:	2001      	movs	r0, #1
 80060d0:	e7f9      	b.n	80060c6 <__mcmp+0x2a>
	...

080060d4 <__mdiff>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	4689      	mov	r9, r1
 80060da:	4606      	mov	r6, r0
 80060dc:	4611      	mov	r1, r2
 80060de:	4648      	mov	r0, r9
 80060e0:	4614      	mov	r4, r2
 80060e2:	f7ff ffdb 	bl	800609c <__mcmp>
 80060e6:	1e05      	subs	r5, r0, #0
 80060e8:	d112      	bne.n	8006110 <__mdiff+0x3c>
 80060ea:	4629      	mov	r1, r5
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff fd19 	bl	8005b24 <_Balloc>
 80060f2:	4602      	mov	r2, r0
 80060f4:	b928      	cbnz	r0, 8006102 <__mdiff+0x2e>
 80060f6:	f240 2137 	movw	r1, #567	@ 0x237
 80060fa:	4b3e      	ldr	r3, [pc, #248]	@ (80061f4 <__mdiff+0x120>)
 80060fc:	483e      	ldr	r0, [pc, #248]	@ (80061f8 <__mdiff+0x124>)
 80060fe:	f001 fa6f 	bl	80075e0 <__assert_func>
 8006102:	2301      	movs	r3, #1
 8006104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006108:	4610      	mov	r0, r2
 800610a:	b003      	add	sp, #12
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	bfbc      	itt	lt
 8006112:	464b      	movlt	r3, r9
 8006114:	46a1      	movlt	r9, r4
 8006116:	4630      	mov	r0, r6
 8006118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800611c:	bfba      	itte	lt
 800611e:	461c      	movlt	r4, r3
 8006120:	2501      	movlt	r5, #1
 8006122:	2500      	movge	r5, #0
 8006124:	f7ff fcfe 	bl	8005b24 <_Balloc>
 8006128:	4602      	mov	r2, r0
 800612a:	b918      	cbnz	r0, 8006134 <__mdiff+0x60>
 800612c:	f240 2145 	movw	r1, #581	@ 0x245
 8006130:	4b30      	ldr	r3, [pc, #192]	@ (80061f4 <__mdiff+0x120>)
 8006132:	e7e3      	b.n	80060fc <__mdiff+0x28>
 8006134:	f100 0b14 	add.w	fp, r0, #20
 8006138:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800613c:	f109 0310 	add.w	r3, r9, #16
 8006140:	60c5      	str	r5, [r0, #12]
 8006142:	f04f 0c00 	mov.w	ip, #0
 8006146:	f109 0514 	add.w	r5, r9, #20
 800614a:	46d9      	mov	r9, fp
 800614c:	6926      	ldr	r6, [r4, #16]
 800614e:	f104 0e14 	add.w	lr, r4, #20
 8006152:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006156:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	9b01      	ldr	r3, [sp, #4]
 800615e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006162:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006166:	b281      	uxth	r1, r0
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	fa1f f38a 	uxth.w	r3, sl
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	0c00      	lsrs	r0, r0, #16
 8006172:	4463      	add	r3, ip
 8006174:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006178:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800617c:	b29b      	uxth	r3, r3
 800617e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006182:	4576      	cmp	r6, lr
 8006184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006188:	f849 3b04 	str.w	r3, [r9], #4
 800618c:	d8e6      	bhi.n	800615c <__mdiff+0x88>
 800618e:	1b33      	subs	r3, r6, r4
 8006190:	3b15      	subs	r3, #21
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	3415      	adds	r4, #21
 8006198:	3304      	adds	r3, #4
 800619a:	42a6      	cmp	r6, r4
 800619c:	bf38      	it	cc
 800619e:	2304      	movcc	r3, #4
 80061a0:	441d      	add	r5, r3
 80061a2:	445b      	add	r3, fp
 80061a4:	461e      	mov	r6, r3
 80061a6:	462c      	mov	r4, r5
 80061a8:	4544      	cmp	r4, r8
 80061aa:	d30e      	bcc.n	80061ca <__mdiff+0xf6>
 80061ac:	f108 0103 	add.w	r1, r8, #3
 80061b0:	1b49      	subs	r1, r1, r5
 80061b2:	f021 0103 	bic.w	r1, r1, #3
 80061b6:	3d03      	subs	r5, #3
 80061b8:	45a8      	cmp	r8, r5
 80061ba:	bf38      	it	cc
 80061bc:	2100      	movcc	r1, #0
 80061be:	440b      	add	r3, r1
 80061c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061c4:	b199      	cbz	r1, 80061ee <__mdiff+0x11a>
 80061c6:	6117      	str	r7, [r2, #16]
 80061c8:	e79e      	b.n	8006108 <__mdiff+0x34>
 80061ca:	46e6      	mov	lr, ip
 80061cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80061d0:	fa1f fc81 	uxth.w	ip, r1
 80061d4:	44f4      	add	ip, lr
 80061d6:	0c08      	lsrs	r0, r1, #16
 80061d8:	4471      	add	r1, lr
 80061da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80061de:	b289      	uxth	r1, r1
 80061e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061e8:	f846 1b04 	str.w	r1, [r6], #4
 80061ec:	e7dc      	b.n	80061a8 <__mdiff+0xd4>
 80061ee:	3f01      	subs	r7, #1
 80061f0:	e7e6      	b.n	80061c0 <__mdiff+0xec>
 80061f2:	bf00      	nop
 80061f4:	08008a73 	.word	0x08008a73
 80061f8:	08008a84 	.word	0x08008a84

080061fc <__ulp>:
 80061fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006238 <__ulp+0x3c>)
 80061fe:	400b      	ands	r3, r1
 8006200:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006204:	2b00      	cmp	r3, #0
 8006206:	dc08      	bgt.n	800621a <__ulp+0x1e>
 8006208:	425b      	negs	r3, r3
 800620a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800620e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006212:	da04      	bge.n	800621e <__ulp+0x22>
 8006214:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006218:	4113      	asrs	r3, r2
 800621a:	2200      	movs	r2, #0
 800621c:	e008      	b.n	8006230 <__ulp+0x34>
 800621e:	f1a2 0314 	sub.w	r3, r2, #20
 8006222:	2b1e      	cmp	r3, #30
 8006224:	bfd6      	itet	le
 8006226:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800622a:	2201      	movgt	r2, #1
 800622c:	40da      	lsrle	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	7ff00000 	.word	0x7ff00000

0800623c <__b2d>:
 800623c:	6902      	ldr	r2, [r0, #16]
 800623e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006240:	f100 0614 	add.w	r6, r0, #20
 8006244:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006248:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800624c:	4f1e      	ldr	r7, [pc, #120]	@ (80062c8 <__b2d+0x8c>)
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff fd5a 	bl	8005d08 <__hi0bits>
 8006254:	4603      	mov	r3, r0
 8006256:	f1c0 0020 	rsb	r0, r0, #32
 800625a:	2b0a      	cmp	r3, #10
 800625c:	f1a2 0504 	sub.w	r5, r2, #4
 8006260:	6008      	str	r0, [r1, #0]
 8006262:	dc12      	bgt.n	800628a <__b2d+0x4e>
 8006264:	42ae      	cmp	r6, r5
 8006266:	bf2c      	ite	cs
 8006268:	2200      	movcs	r2, #0
 800626a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800626e:	f1c3 0c0b 	rsb	ip, r3, #11
 8006272:	3315      	adds	r3, #21
 8006274:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006278:	fa04 f303 	lsl.w	r3, r4, r3
 800627c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006280:	ea4e 0107 	orr.w	r1, lr, r7
 8006284:	431a      	orrs	r2, r3
 8006286:	4610      	mov	r0, r2
 8006288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800628a:	42ae      	cmp	r6, r5
 800628c:	bf36      	itet	cc
 800628e:	f1a2 0508 	subcc.w	r5, r2, #8
 8006292:	2200      	movcs	r2, #0
 8006294:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006298:	3b0b      	subs	r3, #11
 800629a:	d012      	beq.n	80062c2 <__b2d+0x86>
 800629c:	f1c3 0720 	rsb	r7, r3, #32
 80062a0:	fa22 f107 	lsr.w	r1, r2, r7
 80062a4:	409c      	lsls	r4, r3
 80062a6:	430c      	orrs	r4, r1
 80062a8:	42b5      	cmp	r5, r6
 80062aa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80062ae:	bf94      	ite	ls
 80062b0:	2400      	movls	r4, #0
 80062b2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80062b6:	409a      	lsls	r2, r3
 80062b8:	40fc      	lsrs	r4, r7
 80062ba:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80062be:	4322      	orrs	r2, r4
 80062c0:	e7e1      	b.n	8006286 <__b2d+0x4a>
 80062c2:	ea44 0107 	orr.w	r1, r4, r7
 80062c6:	e7de      	b.n	8006286 <__b2d+0x4a>
 80062c8:	3ff00000 	.word	0x3ff00000

080062cc <__d2b>:
 80062cc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80062d0:	2101      	movs	r1, #1
 80062d2:	4690      	mov	r8, r2
 80062d4:	4699      	mov	r9, r3
 80062d6:	9e08      	ldr	r6, [sp, #32]
 80062d8:	f7ff fc24 	bl	8005b24 <_Balloc>
 80062dc:	4604      	mov	r4, r0
 80062de:	b930      	cbnz	r0, 80062ee <__d2b+0x22>
 80062e0:	4602      	mov	r2, r0
 80062e2:	f240 310f 	movw	r1, #783	@ 0x30f
 80062e6:	4b23      	ldr	r3, [pc, #140]	@ (8006374 <__d2b+0xa8>)
 80062e8:	4823      	ldr	r0, [pc, #140]	@ (8006378 <__d2b+0xac>)
 80062ea:	f001 f979 	bl	80075e0 <__assert_func>
 80062ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062f6:	b10d      	cbz	r5, 80062fc <__d2b+0x30>
 80062f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	f1b8 0300 	subs.w	r3, r8, #0
 8006302:	d024      	beq.n	800634e <__d2b+0x82>
 8006304:	4668      	mov	r0, sp
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	f7ff fd1d 	bl	8005d46 <__lo0bits>
 800630c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006310:	b1d8      	cbz	r0, 800634a <__d2b+0x7e>
 8006312:	f1c0 0320 	rsb	r3, r0, #32
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	430b      	orrs	r3, r1
 800631c:	40c2      	lsrs	r2, r0
 800631e:	6163      	str	r3, [r4, #20]
 8006320:	9201      	str	r2, [sp, #4]
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf0c      	ite	eq
 8006328:	2201      	moveq	r2, #1
 800632a:	2202      	movne	r2, #2
 800632c:	61a3      	str	r3, [r4, #24]
 800632e:	6122      	str	r2, [r4, #16]
 8006330:	b1ad      	cbz	r5, 800635e <__d2b+0x92>
 8006332:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006336:	4405      	add	r5, r0
 8006338:	6035      	str	r5, [r6, #0]
 800633a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800633e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006340:	6018      	str	r0, [r3, #0]
 8006342:	4620      	mov	r0, r4
 8006344:	b002      	add	sp, #8
 8006346:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800634a:	6161      	str	r1, [r4, #20]
 800634c:	e7e9      	b.n	8006322 <__d2b+0x56>
 800634e:	a801      	add	r0, sp, #4
 8006350:	f7ff fcf9 	bl	8005d46 <__lo0bits>
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	6163      	str	r3, [r4, #20]
 800635a:	3020      	adds	r0, #32
 800635c:	e7e7      	b.n	800632e <__d2b+0x62>
 800635e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006362:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006366:	6030      	str	r0, [r6, #0]
 8006368:	6918      	ldr	r0, [r3, #16]
 800636a:	f7ff fccd 	bl	8005d08 <__hi0bits>
 800636e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006372:	e7e4      	b.n	800633e <__d2b+0x72>
 8006374:	08008a73 	.word	0x08008a73
 8006378:	08008a84 	.word	0x08008a84

0800637c <__ratio>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	b085      	sub	sp, #20
 8006382:	e9cd 1000 	strd	r1, r0, [sp]
 8006386:	a902      	add	r1, sp, #8
 8006388:	f7ff ff58 	bl	800623c <__b2d>
 800638c:	468b      	mov	fp, r1
 800638e:	4606      	mov	r6, r0
 8006390:	460f      	mov	r7, r1
 8006392:	9800      	ldr	r0, [sp, #0]
 8006394:	a903      	add	r1, sp, #12
 8006396:	f7ff ff51 	bl	800623c <__b2d>
 800639a:	460d      	mov	r5, r1
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	4689      	mov	r9, r1
 80063a0:	6919      	ldr	r1, [r3, #16]
 80063a2:	9b00      	ldr	r3, [sp, #0]
 80063a4:	4604      	mov	r4, r0
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	4630      	mov	r0, r6
 80063aa:	1ac9      	subs	r1, r1, r3
 80063ac:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfcd      	iteet	gt
 80063ba:	463a      	movgt	r2, r7
 80063bc:	462a      	movle	r2, r5
 80063be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80063c2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80063c6:	bfd8      	it	le
 80063c8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80063cc:	464b      	mov	r3, r9
 80063ce:	4622      	mov	r2, r4
 80063d0:	4659      	mov	r1, fp
 80063d2:	f7fa f9ab 	bl	800072c <__aeabi_ddiv>
 80063d6:	b005      	add	sp, #20
 80063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063dc <__copybits>:
 80063dc:	3901      	subs	r1, #1
 80063de:	b570      	push	{r4, r5, r6, lr}
 80063e0:	1149      	asrs	r1, r1, #5
 80063e2:	6914      	ldr	r4, [r2, #16]
 80063e4:	3101      	adds	r1, #1
 80063e6:	f102 0314 	add.w	r3, r2, #20
 80063ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80063ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80063f2:	1f05      	subs	r5, r0, #4
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d30c      	bcc.n	8006412 <__copybits+0x36>
 80063f8:	1aa3      	subs	r3, r4, r2
 80063fa:	3b11      	subs	r3, #17
 80063fc:	f023 0303 	bic.w	r3, r3, #3
 8006400:	3211      	adds	r2, #17
 8006402:	42a2      	cmp	r2, r4
 8006404:	bf88      	it	hi
 8006406:	2300      	movhi	r3, #0
 8006408:	4418      	add	r0, r3
 800640a:	2300      	movs	r3, #0
 800640c:	4288      	cmp	r0, r1
 800640e:	d305      	bcc.n	800641c <__copybits+0x40>
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	f853 6b04 	ldr.w	r6, [r3], #4
 8006416:	f845 6f04 	str.w	r6, [r5, #4]!
 800641a:	e7eb      	b.n	80063f4 <__copybits+0x18>
 800641c:	f840 3b04 	str.w	r3, [r0], #4
 8006420:	e7f4      	b.n	800640c <__copybits+0x30>

08006422 <__any_on>:
 8006422:	f100 0214 	add.w	r2, r0, #20
 8006426:	6900      	ldr	r0, [r0, #16]
 8006428:	114b      	asrs	r3, r1, #5
 800642a:	4298      	cmp	r0, r3
 800642c:	b510      	push	{r4, lr}
 800642e:	db11      	blt.n	8006454 <__any_on+0x32>
 8006430:	dd0a      	ble.n	8006448 <__any_on+0x26>
 8006432:	f011 011f 	ands.w	r1, r1, #31
 8006436:	d007      	beq.n	8006448 <__any_on+0x26>
 8006438:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800643c:	fa24 f001 	lsr.w	r0, r4, r1
 8006440:	fa00 f101 	lsl.w	r1, r0, r1
 8006444:	428c      	cmp	r4, r1
 8006446:	d10b      	bne.n	8006460 <__any_on+0x3e>
 8006448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800644c:	4293      	cmp	r3, r2
 800644e:	d803      	bhi.n	8006458 <__any_on+0x36>
 8006450:	2000      	movs	r0, #0
 8006452:	bd10      	pop	{r4, pc}
 8006454:	4603      	mov	r3, r0
 8006456:	e7f7      	b.n	8006448 <__any_on+0x26>
 8006458:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800645c:	2900      	cmp	r1, #0
 800645e:	d0f5      	beq.n	800644c <__any_on+0x2a>
 8006460:	2001      	movs	r0, #1
 8006462:	e7f6      	b.n	8006452 <__any_on+0x30>

08006464 <sulp>:
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	460f      	mov	r7, r1
 800646a:	4690      	mov	r8, r2
 800646c:	f7ff fec6 	bl	80061fc <__ulp>
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
 8006474:	f1b8 0f00 	cmp.w	r8, #0
 8006478:	d011      	beq.n	800649e <sulp+0x3a>
 800647a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800647e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006482:	2b00      	cmp	r3, #0
 8006484:	dd0b      	ble.n	800649e <sulp+0x3a>
 8006486:	2400      	movs	r4, #0
 8006488:	051b      	lsls	r3, r3, #20
 800648a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800648e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006492:	4622      	mov	r2, r4
 8006494:	462b      	mov	r3, r5
 8006496:	f7fa f81f 	bl	80004d8 <__aeabi_dmul>
 800649a:	4604      	mov	r4, r0
 800649c:	460d      	mov	r5, r1
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080064a8 <_strtod_l>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	b09f      	sub	sp, #124	@ 0x7c
 80064ae:	9217      	str	r2, [sp, #92]	@ 0x5c
 80064b0:	2200      	movs	r2, #0
 80064b2:	460c      	mov	r4, r1
 80064b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80064b6:	f04f 0a00 	mov.w	sl, #0
 80064ba:	f04f 0b00 	mov.w	fp, #0
 80064be:	460a      	mov	r2, r1
 80064c0:	9005      	str	r0, [sp, #20]
 80064c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80064c4:	7811      	ldrb	r1, [r2, #0]
 80064c6:	292b      	cmp	r1, #43	@ 0x2b
 80064c8:	d048      	beq.n	800655c <_strtod_l+0xb4>
 80064ca:	d836      	bhi.n	800653a <_strtod_l+0x92>
 80064cc:	290d      	cmp	r1, #13
 80064ce:	d830      	bhi.n	8006532 <_strtod_l+0x8a>
 80064d0:	2908      	cmp	r1, #8
 80064d2:	d830      	bhi.n	8006536 <_strtod_l+0x8e>
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d039      	beq.n	800654c <_strtod_l+0xa4>
 80064d8:	2200      	movs	r2, #0
 80064da:	920e      	str	r2, [sp, #56]	@ 0x38
 80064dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80064de:	782a      	ldrb	r2, [r5, #0]
 80064e0:	2a30      	cmp	r2, #48	@ 0x30
 80064e2:	f040 80b0 	bne.w	8006646 <_strtod_l+0x19e>
 80064e6:	786a      	ldrb	r2, [r5, #1]
 80064e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80064ec:	2a58      	cmp	r2, #88	@ 0x58
 80064ee:	d16c      	bne.n	80065ca <_strtod_l+0x122>
 80064f0:	9302      	str	r3, [sp, #8]
 80064f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064f4:	4a8f      	ldr	r2, [pc, #572]	@ (8006734 <_strtod_l+0x28c>)
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	9805      	ldr	r0, [sp, #20]
 80064fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006500:	a919      	add	r1, sp, #100	@ 0x64
 8006502:	f001 f907 	bl	8007714 <__gethex>
 8006506:	f010 060f 	ands.w	r6, r0, #15
 800650a:	4604      	mov	r4, r0
 800650c:	d005      	beq.n	800651a <_strtod_l+0x72>
 800650e:	2e06      	cmp	r6, #6
 8006510:	d126      	bne.n	8006560 <_strtod_l+0xb8>
 8006512:	2300      	movs	r3, #0
 8006514:	3501      	adds	r5, #1
 8006516:	9519      	str	r5, [sp, #100]	@ 0x64
 8006518:	930e      	str	r3, [sp, #56]	@ 0x38
 800651a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8582 	bne.w	8007026 <_strtod_l+0xb7e>
 8006522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006524:	b1bb      	cbz	r3, 8006556 <_strtod_l+0xae>
 8006526:	4650      	mov	r0, sl
 8006528:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800652c:	b01f      	add	sp, #124	@ 0x7c
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	2920      	cmp	r1, #32
 8006534:	d1d0      	bne.n	80064d8 <_strtod_l+0x30>
 8006536:	3201      	adds	r2, #1
 8006538:	e7c3      	b.n	80064c2 <_strtod_l+0x1a>
 800653a:	292d      	cmp	r1, #45	@ 0x2d
 800653c:	d1cc      	bne.n	80064d8 <_strtod_l+0x30>
 800653e:	2101      	movs	r1, #1
 8006540:	910e      	str	r1, [sp, #56]	@ 0x38
 8006542:	1c51      	adds	r1, r2, #1
 8006544:	9119      	str	r1, [sp, #100]	@ 0x64
 8006546:	7852      	ldrb	r2, [r2, #1]
 8006548:	2a00      	cmp	r2, #0
 800654a:	d1c7      	bne.n	80064dc <_strtod_l+0x34>
 800654c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800654e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8566 	bne.w	8007022 <_strtod_l+0xb7a>
 8006556:	4650      	mov	r0, sl
 8006558:	4659      	mov	r1, fp
 800655a:	e7e7      	b.n	800652c <_strtod_l+0x84>
 800655c:	2100      	movs	r1, #0
 800655e:	e7ef      	b.n	8006540 <_strtod_l+0x98>
 8006560:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006562:	b13a      	cbz	r2, 8006574 <_strtod_l+0xcc>
 8006564:	2135      	movs	r1, #53	@ 0x35
 8006566:	a81c      	add	r0, sp, #112	@ 0x70
 8006568:	f7ff ff38 	bl	80063dc <__copybits>
 800656c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800656e:	9805      	ldr	r0, [sp, #20]
 8006570:	f7ff fb18 	bl	8005ba4 <_Bfree>
 8006574:	3e01      	subs	r6, #1
 8006576:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006578:	2e04      	cmp	r6, #4
 800657a:	d806      	bhi.n	800658a <_strtod_l+0xe2>
 800657c:	e8df f006 	tbb	[pc, r6]
 8006580:	201d0314 	.word	0x201d0314
 8006584:	14          	.byte	0x14
 8006585:	00          	.byte	0x00
 8006586:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800658a:	05e1      	lsls	r1, r4, #23
 800658c:	bf48      	it	mi
 800658e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006592:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006596:	0d1b      	lsrs	r3, r3, #20
 8006598:	051b      	lsls	r3, r3, #20
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1bd      	bne.n	800651a <_strtod_l+0x72>
 800659e:	f7fe fb19 	bl	8004bd4 <__errno>
 80065a2:	2322      	movs	r3, #34	@ 0x22
 80065a4:	6003      	str	r3, [r0, #0]
 80065a6:	e7b8      	b.n	800651a <_strtod_l+0x72>
 80065a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80065ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80065b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80065b4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80065b8:	e7e7      	b.n	800658a <_strtod_l+0xe2>
 80065ba:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006738 <_strtod_l+0x290>
 80065be:	e7e4      	b.n	800658a <_strtod_l+0xe2>
 80065c0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80065c4:	f04f 3aff 	mov.w	sl, #4294967295
 80065c8:	e7df      	b.n	800658a <_strtod_l+0xe2>
 80065ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b30      	cmp	r3, #48	@ 0x30
 80065d4:	d0f9      	beq.n	80065ca <_strtod_l+0x122>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d09f      	beq.n	800651a <_strtod_l+0x72>
 80065da:	2301      	movs	r3, #1
 80065dc:	2700      	movs	r7, #0
 80065de:	220a      	movs	r2, #10
 80065e0:	46b9      	mov	r9, r7
 80065e2:	9308      	str	r3, [sp, #32]
 80065e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065e6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80065e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80065ea:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80065ec:	7805      	ldrb	r5, [r0, #0]
 80065ee:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80065f2:	b2d9      	uxtb	r1, r3
 80065f4:	2909      	cmp	r1, #9
 80065f6:	d928      	bls.n	800664a <_strtod_l+0x1a2>
 80065f8:	2201      	movs	r2, #1
 80065fa:	4950      	ldr	r1, [pc, #320]	@ (800673c <_strtod_l+0x294>)
 80065fc:	f000 ffc8 	bl	8007590 <strncmp>
 8006600:	2800      	cmp	r0, #0
 8006602:	d032      	beq.n	800666a <_strtod_l+0x1c2>
 8006604:	2000      	movs	r0, #0
 8006606:	462a      	mov	r2, r5
 8006608:	4603      	mov	r3, r0
 800660a:	464d      	mov	r5, r9
 800660c:	900a      	str	r0, [sp, #40]	@ 0x28
 800660e:	2a65      	cmp	r2, #101	@ 0x65
 8006610:	d001      	beq.n	8006616 <_strtod_l+0x16e>
 8006612:	2a45      	cmp	r2, #69	@ 0x45
 8006614:	d114      	bne.n	8006640 <_strtod_l+0x198>
 8006616:	b91d      	cbnz	r5, 8006620 <_strtod_l+0x178>
 8006618:	9a08      	ldr	r2, [sp, #32]
 800661a:	4302      	orrs	r2, r0
 800661c:	d096      	beq.n	800654c <_strtod_l+0xa4>
 800661e:	2500      	movs	r5, #0
 8006620:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006622:	1c62      	adds	r2, r4, #1
 8006624:	9219      	str	r2, [sp, #100]	@ 0x64
 8006626:	7862      	ldrb	r2, [r4, #1]
 8006628:	2a2b      	cmp	r2, #43	@ 0x2b
 800662a:	d07a      	beq.n	8006722 <_strtod_l+0x27a>
 800662c:	2a2d      	cmp	r2, #45	@ 0x2d
 800662e:	d07e      	beq.n	800672e <_strtod_l+0x286>
 8006630:	f04f 0c00 	mov.w	ip, #0
 8006634:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006638:	2909      	cmp	r1, #9
 800663a:	f240 8085 	bls.w	8006748 <_strtod_l+0x2a0>
 800663e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006640:	f04f 0800 	mov.w	r8, #0
 8006644:	e0a5      	b.n	8006792 <_strtod_l+0x2ea>
 8006646:	2300      	movs	r3, #0
 8006648:	e7c8      	b.n	80065dc <_strtod_l+0x134>
 800664a:	f1b9 0f08 	cmp.w	r9, #8
 800664e:	bfd8      	it	le
 8006650:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006652:	f100 0001 	add.w	r0, r0, #1
 8006656:	bfd6      	itet	le
 8006658:	fb02 3301 	mlale	r3, r2, r1, r3
 800665c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006660:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006662:	f109 0901 	add.w	r9, r9, #1
 8006666:	9019      	str	r0, [sp, #100]	@ 0x64
 8006668:	e7bf      	b.n	80065ea <_strtod_l+0x142>
 800666a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006670:	785a      	ldrb	r2, [r3, #1]
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	d03b      	beq.n	80066f0 <_strtod_l+0x248>
 8006678:	464d      	mov	r5, r9
 800667a:	900a      	str	r0, [sp, #40]	@ 0x28
 800667c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006680:	2b09      	cmp	r3, #9
 8006682:	d912      	bls.n	80066aa <_strtod_l+0x202>
 8006684:	2301      	movs	r3, #1
 8006686:	e7c2      	b.n	800660e <_strtod_l+0x166>
 8006688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800668a:	3001      	adds	r0, #1
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006690:	785a      	ldrb	r2, [r3, #1]
 8006692:	2a30      	cmp	r2, #48	@ 0x30
 8006694:	d0f8      	beq.n	8006688 <_strtod_l+0x1e0>
 8006696:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800669a:	2b08      	cmp	r3, #8
 800669c:	f200 84c8 	bhi.w	8007030 <_strtod_l+0xb88>
 80066a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80066a2:	2000      	movs	r0, #0
 80066a4:	4605      	mov	r5, r0
 80066a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80066aa:	3a30      	subs	r2, #48	@ 0x30
 80066ac:	f100 0301 	add.w	r3, r0, #1
 80066b0:	d018      	beq.n	80066e4 <_strtod_l+0x23c>
 80066b2:	462e      	mov	r6, r5
 80066b4:	f04f 0e0a 	mov.w	lr, #10
 80066b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066ba:	4419      	add	r1, r3
 80066bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80066be:	1c71      	adds	r1, r6, #1
 80066c0:	eba1 0c05 	sub.w	ip, r1, r5
 80066c4:	4563      	cmp	r3, ip
 80066c6:	dc15      	bgt.n	80066f4 <_strtod_l+0x24c>
 80066c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80066cc:	182b      	adds	r3, r5, r0
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	f105 0501 	add.w	r5, r5, #1
 80066d4:	4405      	add	r5, r0
 80066d6:	dc1a      	bgt.n	800670e <_strtod_l+0x266>
 80066d8:	230a      	movs	r3, #10
 80066da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066dc:	fb03 2301 	mla	r3, r3, r1, r2
 80066e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066e2:	2300      	movs	r3, #0
 80066e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066e6:	4618      	mov	r0, r3
 80066e8:	1c51      	adds	r1, r2, #1
 80066ea:	9119      	str	r1, [sp, #100]	@ 0x64
 80066ec:	7852      	ldrb	r2, [r2, #1]
 80066ee:	e7c5      	b.n	800667c <_strtod_l+0x1d4>
 80066f0:	4648      	mov	r0, r9
 80066f2:	e7ce      	b.n	8006692 <_strtod_l+0x1ea>
 80066f4:	2e08      	cmp	r6, #8
 80066f6:	dc05      	bgt.n	8006704 <_strtod_l+0x25c>
 80066f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80066fa:	fb0e f606 	mul.w	r6, lr, r6
 80066fe:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006700:	460e      	mov	r6, r1
 8006702:	e7dc      	b.n	80066be <_strtod_l+0x216>
 8006704:	2910      	cmp	r1, #16
 8006706:	bfd8      	it	le
 8006708:	fb0e f707 	mulle.w	r7, lr, r7
 800670c:	e7f8      	b.n	8006700 <_strtod_l+0x258>
 800670e:	2b0f      	cmp	r3, #15
 8006710:	bfdc      	itt	le
 8006712:	230a      	movle	r3, #10
 8006714:	fb03 2707 	mlale	r7, r3, r7, r2
 8006718:	e7e3      	b.n	80066e2 <_strtod_l+0x23a>
 800671a:	2300      	movs	r3, #0
 800671c:	930a      	str	r3, [sp, #40]	@ 0x28
 800671e:	2301      	movs	r3, #1
 8006720:	e77a      	b.n	8006618 <_strtod_l+0x170>
 8006722:	f04f 0c00 	mov.w	ip, #0
 8006726:	1ca2      	adds	r2, r4, #2
 8006728:	9219      	str	r2, [sp, #100]	@ 0x64
 800672a:	78a2      	ldrb	r2, [r4, #2]
 800672c:	e782      	b.n	8006634 <_strtod_l+0x18c>
 800672e:	f04f 0c01 	mov.w	ip, #1
 8006732:	e7f8      	b.n	8006726 <_strtod_l+0x27e>
 8006734:	08008ca4 	.word	0x08008ca4
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	08008add 	.word	0x08008add
 8006740:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006742:	1c51      	adds	r1, r2, #1
 8006744:	9119      	str	r1, [sp, #100]	@ 0x64
 8006746:	7852      	ldrb	r2, [r2, #1]
 8006748:	2a30      	cmp	r2, #48	@ 0x30
 800674a:	d0f9      	beq.n	8006740 <_strtod_l+0x298>
 800674c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006750:	2908      	cmp	r1, #8
 8006752:	f63f af75 	bhi.w	8006640 <_strtod_l+0x198>
 8006756:	f04f 080a 	mov.w	r8, #10
 800675a:	3a30      	subs	r2, #48	@ 0x30
 800675c:	9209      	str	r2, [sp, #36]	@ 0x24
 800675e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006760:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006762:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006764:	1c56      	adds	r6, r2, #1
 8006766:	9619      	str	r6, [sp, #100]	@ 0x64
 8006768:	7852      	ldrb	r2, [r2, #1]
 800676a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800676e:	f1be 0f09 	cmp.w	lr, #9
 8006772:	d939      	bls.n	80067e8 <_strtod_l+0x340>
 8006774:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006776:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800677a:	1a76      	subs	r6, r6, r1
 800677c:	2e08      	cmp	r6, #8
 800677e:	dc03      	bgt.n	8006788 <_strtod_l+0x2e0>
 8006780:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006782:	4588      	cmp	r8, r1
 8006784:	bfa8      	it	ge
 8006786:	4688      	movge	r8, r1
 8006788:	f1bc 0f00 	cmp.w	ip, #0
 800678c:	d001      	beq.n	8006792 <_strtod_l+0x2ea>
 800678e:	f1c8 0800 	rsb	r8, r8, #0
 8006792:	2d00      	cmp	r5, #0
 8006794:	d14e      	bne.n	8006834 <_strtod_l+0x38c>
 8006796:	9908      	ldr	r1, [sp, #32]
 8006798:	4308      	orrs	r0, r1
 800679a:	f47f aebe 	bne.w	800651a <_strtod_l+0x72>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f47f aed4 	bne.w	800654c <_strtod_l+0xa4>
 80067a4:	2a69      	cmp	r2, #105	@ 0x69
 80067a6:	d028      	beq.n	80067fa <_strtod_l+0x352>
 80067a8:	dc25      	bgt.n	80067f6 <_strtod_l+0x34e>
 80067aa:	2a49      	cmp	r2, #73	@ 0x49
 80067ac:	d025      	beq.n	80067fa <_strtod_l+0x352>
 80067ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80067b0:	f47f aecc 	bne.w	800654c <_strtod_l+0xa4>
 80067b4:	4999      	ldr	r1, [pc, #612]	@ (8006a1c <_strtod_l+0x574>)
 80067b6:	a819      	add	r0, sp, #100	@ 0x64
 80067b8:	f001 f9ce 	bl	8007b58 <__match>
 80067bc:	2800      	cmp	r0, #0
 80067be:	f43f aec5 	beq.w	800654c <_strtod_l+0xa4>
 80067c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b28      	cmp	r3, #40	@ 0x28
 80067c8:	d12e      	bne.n	8006828 <_strtod_l+0x380>
 80067ca:	4995      	ldr	r1, [pc, #596]	@ (8006a20 <_strtod_l+0x578>)
 80067cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80067ce:	a819      	add	r0, sp, #100	@ 0x64
 80067d0:	f001 f9d6 	bl	8007b80 <__hexnan>
 80067d4:	2805      	cmp	r0, #5
 80067d6:	d127      	bne.n	8006828 <_strtod_l+0x380>
 80067d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80067da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80067de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80067e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80067e6:	e698      	b.n	800651a <_strtod_l+0x72>
 80067e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067ea:	fb08 2101 	mla	r1, r8, r1, r2
 80067ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80067f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80067f4:	e7b5      	b.n	8006762 <_strtod_l+0x2ba>
 80067f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80067f8:	e7da      	b.n	80067b0 <_strtod_l+0x308>
 80067fa:	498a      	ldr	r1, [pc, #552]	@ (8006a24 <_strtod_l+0x57c>)
 80067fc:	a819      	add	r0, sp, #100	@ 0x64
 80067fe:	f001 f9ab 	bl	8007b58 <__match>
 8006802:	2800      	cmp	r0, #0
 8006804:	f43f aea2 	beq.w	800654c <_strtod_l+0xa4>
 8006808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800680a:	4987      	ldr	r1, [pc, #540]	@ (8006a28 <_strtod_l+0x580>)
 800680c:	3b01      	subs	r3, #1
 800680e:	a819      	add	r0, sp, #100	@ 0x64
 8006810:	9319      	str	r3, [sp, #100]	@ 0x64
 8006812:	f001 f9a1 	bl	8007b58 <__match>
 8006816:	b910      	cbnz	r0, 800681e <_strtod_l+0x376>
 8006818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800681a:	3301      	adds	r3, #1
 800681c:	9319      	str	r3, [sp, #100]	@ 0x64
 800681e:	f04f 0a00 	mov.w	sl, #0
 8006822:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006a2c <_strtod_l+0x584>
 8006826:	e678      	b.n	800651a <_strtod_l+0x72>
 8006828:	4881      	ldr	r0, [pc, #516]	@ (8006a30 <_strtod_l+0x588>)
 800682a:	f000 fed3 	bl	80075d4 <nan>
 800682e:	4682      	mov	sl, r0
 8006830:	468b      	mov	fp, r1
 8006832:	e672      	b.n	800651a <_strtod_l+0x72>
 8006834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006836:	f1b9 0f00 	cmp.w	r9, #0
 800683a:	bf08      	it	eq
 800683c:	46a9      	moveq	r9, r5
 800683e:	eba8 0303 	sub.w	r3, r8, r3
 8006842:	2d10      	cmp	r5, #16
 8006844:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006846:	462c      	mov	r4, r5
 8006848:	9309      	str	r3, [sp, #36]	@ 0x24
 800684a:	bfa8      	it	ge
 800684c:	2410      	movge	r4, #16
 800684e:	f7f9 fdc9 	bl	80003e4 <__aeabi_ui2d>
 8006852:	2d09      	cmp	r5, #9
 8006854:	4682      	mov	sl, r0
 8006856:	468b      	mov	fp, r1
 8006858:	dc11      	bgt.n	800687e <_strtod_l+0x3d6>
 800685a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	f43f ae5c 	beq.w	800651a <_strtod_l+0x72>
 8006862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006864:	dd76      	ble.n	8006954 <_strtod_l+0x4ac>
 8006866:	2b16      	cmp	r3, #22
 8006868:	dc5d      	bgt.n	8006926 <_strtod_l+0x47e>
 800686a:	4972      	ldr	r1, [pc, #456]	@ (8006a34 <_strtod_l+0x58c>)
 800686c:	4652      	mov	r2, sl
 800686e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006872:	465b      	mov	r3, fp
 8006874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006878:	f7f9 fe2e 	bl	80004d8 <__aeabi_dmul>
 800687c:	e7d7      	b.n	800682e <_strtod_l+0x386>
 800687e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a34 <_strtod_l+0x58c>)
 8006880:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006884:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006888:	f7f9 fe26 	bl	80004d8 <__aeabi_dmul>
 800688c:	4682      	mov	sl, r0
 800688e:	4638      	mov	r0, r7
 8006890:	468b      	mov	fp, r1
 8006892:	f7f9 fda7 	bl	80003e4 <__aeabi_ui2d>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4650      	mov	r0, sl
 800689c:	4659      	mov	r1, fp
 800689e:	f7f9 fc65 	bl	800016c <__adddf3>
 80068a2:	2d0f      	cmp	r5, #15
 80068a4:	4682      	mov	sl, r0
 80068a6:	468b      	mov	fp, r1
 80068a8:	ddd7      	ble.n	800685a <_strtod_l+0x3b2>
 80068aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ac:	1b2c      	subs	r4, r5, r4
 80068ae:	441c      	add	r4, r3
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	f340 8093 	ble.w	80069dc <_strtod_l+0x534>
 80068b6:	f014 030f 	ands.w	r3, r4, #15
 80068ba:	d00a      	beq.n	80068d2 <_strtod_l+0x42a>
 80068bc:	495d      	ldr	r1, [pc, #372]	@ (8006a34 <_strtod_l+0x58c>)
 80068be:	4652      	mov	r2, sl
 80068c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c8:	465b      	mov	r3, fp
 80068ca:	f7f9 fe05 	bl	80004d8 <__aeabi_dmul>
 80068ce:	4682      	mov	sl, r0
 80068d0:	468b      	mov	fp, r1
 80068d2:	f034 040f 	bics.w	r4, r4, #15
 80068d6:	d073      	beq.n	80069c0 <_strtod_l+0x518>
 80068d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80068dc:	dd49      	ble.n	8006972 <_strtod_l+0x4ca>
 80068de:	2400      	movs	r4, #0
 80068e0:	46a0      	mov	r8, r4
 80068e2:	46a1      	mov	r9, r4
 80068e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068e6:	2322      	movs	r3, #34	@ 0x22
 80068e8:	f04f 0a00 	mov.w	sl, #0
 80068ec:	9a05      	ldr	r2, [sp, #20]
 80068ee:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006a2c <_strtod_l+0x584>
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f43f ae0f 	beq.w	800651a <_strtod_l+0x72>
 80068fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068fe:	9805      	ldr	r0, [sp, #20]
 8006900:	f7ff f950 	bl	8005ba4 <_Bfree>
 8006904:	4649      	mov	r1, r9
 8006906:	9805      	ldr	r0, [sp, #20]
 8006908:	f7ff f94c 	bl	8005ba4 <_Bfree>
 800690c:	4641      	mov	r1, r8
 800690e:	9805      	ldr	r0, [sp, #20]
 8006910:	f7ff f948 	bl	8005ba4 <_Bfree>
 8006914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006916:	9805      	ldr	r0, [sp, #20]
 8006918:	f7ff f944 	bl	8005ba4 <_Bfree>
 800691c:	4621      	mov	r1, r4
 800691e:	9805      	ldr	r0, [sp, #20]
 8006920:	f7ff f940 	bl	8005ba4 <_Bfree>
 8006924:	e5f9      	b.n	800651a <_strtod_l+0x72>
 8006926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006928:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800692c:	4293      	cmp	r3, r2
 800692e:	dbbc      	blt.n	80068aa <_strtod_l+0x402>
 8006930:	4c40      	ldr	r4, [pc, #256]	@ (8006a34 <_strtod_l+0x58c>)
 8006932:	f1c5 050f 	rsb	r5, r5, #15
 8006936:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800693a:	4652      	mov	r2, sl
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	465b      	mov	r3, fp
 8006942:	f7f9 fdc9 	bl	80004d8 <__aeabi_dmul>
 8006946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006948:	1b5d      	subs	r5, r3, r5
 800694a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800694e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006952:	e791      	b.n	8006878 <_strtod_l+0x3d0>
 8006954:	3316      	adds	r3, #22
 8006956:	dba8      	blt.n	80068aa <_strtod_l+0x402>
 8006958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800695a:	4650      	mov	r0, sl
 800695c:	eba3 0808 	sub.w	r8, r3, r8
 8006960:	4b34      	ldr	r3, [pc, #208]	@ (8006a34 <_strtod_l+0x58c>)
 8006962:	4659      	mov	r1, fp
 8006964:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006968:	e9d8 2300 	ldrd	r2, r3, [r8]
 800696c:	f7f9 fede 	bl	800072c <__aeabi_ddiv>
 8006970:	e75d      	b.n	800682e <_strtod_l+0x386>
 8006972:	2300      	movs	r3, #0
 8006974:	4650      	mov	r0, sl
 8006976:	4659      	mov	r1, fp
 8006978:	461e      	mov	r6, r3
 800697a:	4f2f      	ldr	r7, [pc, #188]	@ (8006a38 <_strtod_l+0x590>)
 800697c:	1124      	asrs	r4, r4, #4
 800697e:	2c01      	cmp	r4, #1
 8006980:	dc21      	bgt.n	80069c6 <_strtod_l+0x51e>
 8006982:	b10b      	cbz	r3, 8006988 <_strtod_l+0x4e0>
 8006984:	4682      	mov	sl, r0
 8006986:	468b      	mov	fp, r1
 8006988:	492b      	ldr	r1, [pc, #172]	@ (8006a38 <_strtod_l+0x590>)
 800698a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800698e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006992:	4652      	mov	r2, sl
 8006994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006998:	465b      	mov	r3, fp
 800699a:	f7f9 fd9d 	bl	80004d8 <__aeabi_dmul>
 800699e:	4b23      	ldr	r3, [pc, #140]	@ (8006a2c <_strtod_l+0x584>)
 80069a0:	460a      	mov	r2, r1
 80069a2:	400b      	ands	r3, r1
 80069a4:	4925      	ldr	r1, [pc, #148]	@ (8006a3c <_strtod_l+0x594>)
 80069a6:	4682      	mov	sl, r0
 80069a8:	428b      	cmp	r3, r1
 80069aa:	d898      	bhi.n	80068de <_strtod_l+0x436>
 80069ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bf86      	itte	hi
 80069b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80069b8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006a40 <_strtod_l+0x598>
 80069bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80069c0:	2300      	movs	r3, #0
 80069c2:	9308      	str	r3, [sp, #32]
 80069c4:	e076      	b.n	8006ab4 <_strtod_l+0x60c>
 80069c6:	07e2      	lsls	r2, r4, #31
 80069c8:	d504      	bpl.n	80069d4 <_strtod_l+0x52c>
 80069ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ce:	f7f9 fd83 	bl	80004d8 <__aeabi_dmul>
 80069d2:	2301      	movs	r3, #1
 80069d4:	3601      	adds	r6, #1
 80069d6:	1064      	asrs	r4, r4, #1
 80069d8:	3708      	adds	r7, #8
 80069da:	e7d0      	b.n	800697e <_strtod_l+0x4d6>
 80069dc:	d0f0      	beq.n	80069c0 <_strtod_l+0x518>
 80069de:	4264      	negs	r4, r4
 80069e0:	f014 020f 	ands.w	r2, r4, #15
 80069e4:	d00a      	beq.n	80069fc <_strtod_l+0x554>
 80069e6:	4b13      	ldr	r3, [pc, #76]	@ (8006a34 <_strtod_l+0x58c>)
 80069e8:	4650      	mov	r0, sl
 80069ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ee:	4659      	mov	r1, fp
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fe9a 	bl	800072c <__aeabi_ddiv>
 80069f8:	4682      	mov	sl, r0
 80069fa:	468b      	mov	fp, r1
 80069fc:	1124      	asrs	r4, r4, #4
 80069fe:	d0df      	beq.n	80069c0 <_strtod_l+0x518>
 8006a00:	2c1f      	cmp	r4, #31
 8006a02:	dd1f      	ble.n	8006a44 <_strtod_l+0x59c>
 8006a04:	2400      	movs	r4, #0
 8006a06:	46a0      	mov	r8, r4
 8006a08:	46a1      	mov	r9, r4
 8006a0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a0c:	2322      	movs	r3, #34	@ 0x22
 8006a0e:	9a05      	ldr	r2, [sp, #20]
 8006a10:	f04f 0a00 	mov.w	sl, #0
 8006a14:	f04f 0b00 	mov.w	fp, #0
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e76b      	b.n	80068f4 <_strtod_l+0x44c>
 8006a1c:	080089cb 	.word	0x080089cb
 8006a20:	08008c90 	.word	0x08008c90
 8006a24:	080089c3 	.word	0x080089c3
 8006a28:	080089fa 	.word	0x080089fa
 8006a2c:	7ff00000 	.word	0x7ff00000
 8006a30:	08008b33 	.word	0x08008b33
 8006a34:	08008bc8 	.word	0x08008bc8
 8006a38:	08008ba0 	.word	0x08008ba0
 8006a3c:	7ca00000 	.word	0x7ca00000
 8006a40:	7fefffff 	.word	0x7fefffff
 8006a44:	f014 0310 	ands.w	r3, r4, #16
 8006a48:	bf18      	it	ne
 8006a4a:	236a      	movne	r3, #106	@ 0x6a
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	9308      	str	r3, [sp, #32]
 8006a50:	4659      	mov	r1, fp
 8006a52:	2300      	movs	r3, #0
 8006a54:	4e77      	ldr	r6, [pc, #476]	@ (8006c34 <_strtod_l+0x78c>)
 8006a56:	07e7      	lsls	r7, r4, #31
 8006a58:	d504      	bpl.n	8006a64 <_strtod_l+0x5bc>
 8006a5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a5e:	f7f9 fd3b 	bl	80004d8 <__aeabi_dmul>
 8006a62:	2301      	movs	r3, #1
 8006a64:	1064      	asrs	r4, r4, #1
 8006a66:	f106 0608 	add.w	r6, r6, #8
 8006a6a:	d1f4      	bne.n	8006a56 <_strtod_l+0x5ae>
 8006a6c:	b10b      	cbz	r3, 8006a72 <_strtod_l+0x5ca>
 8006a6e:	4682      	mov	sl, r0
 8006a70:	468b      	mov	fp, r1
 8006a72:	9b08      	ldr	r3, [sp, #32]
 8006a74:	b1b3      	cbz	r3, 8006aa4 <_strtod_l+0x5fc>
 8006a76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	4659      	mov	r1, fp
 8006a82:	dd0f      	ble.n	8006aa4 <_strtod_l+0x5fc>
 8006a84:	2b1f      	cmp	r3, #31
 8006a86:	dd58      	ble.n	8006b3a <_strtod_l+0x692>
 8006a88:	2b34      	cmp	r3, #52	@ 0x34
 8006a8a:	bfd8      	it	le
 8006a8c:	f04f 33ff 	movle.w	r3, #4294967295
 8006a90:	f04f 0a00 	mov.w	sl, #0
 8006a94:	bfcf      	iteee	gt
 8006a96:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006a9a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006a9e:	4093      	lslle	r3, r2
 8006aa0:	ea03 0b01 	andle.w	fp, r3, r1
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	f7f9 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d1a7      	bne.n	8006a04 <_strtod_l+0x55c>
 8006ab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006abc:	462b      	mov	r3, r5
 8006abe:	9805      	ldr	r0, [sp, #20]
 8006ac0:	f7ff f8d8 	bl	8005c74 <__s2b>
 8006ac4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af09 	beq.w	80068de <_strtod_l+0x436>
 8006acc:	2400      	movs	r4, #0
 8006ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	eba3 0308 	sub.w	r3, r3, r8
 8006ad8:	bfa8      	it	ge
 8006ada:	2300      	movge	r3, #0
 8006adc:	46a0      	mov	r8, r4
 8006ade:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ae0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ae4:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ae8:	9805      	ldr	r0, [sp, #20]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	f7ff f81a 	bl	8005b24 <_Balloc>
 8006af0:	4681      	mov	r9, r0
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f43f aef7 	beq.w	80068e6 <_strtod_l+0x43e>
 8006af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006afa:	300c      	adds	r0, #12
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	f103 010c 	add.w	r1, r3, #12
 8006b02:	3202      	adds	r2, #2
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	f7fe f8a0 	bl	8004c4a <memcpy>
 8006b0a:	ab1c      	add	r3, sp, #112	@ 0x70
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4652      	mov	r2, sl
 8006b14:	465b      	mov	r3, fp
 8006b16:	9805      	ldr	r0, [sp, #20]
 8006b18:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006b1c:	f7ff fbd6 	bl	80062cc <__d2b>
 8006b20:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f43f aedf 	beq.w	80068e6 <_strtod_l+0x43e>
 8006b28:	2101      	movs	r1, #1
 8006b2a:	9805      	ldr	r0, [sp, #20]
 8006b2c:	f7ff f938 	bl	8005da0 <__i2b>
 8006b30:	4680      	mov	r8, r0
 8006b32:	b948      	cbnz	r0, 8006b48 <_strtod_l+0x6a0>
 8006b34:	f04f 0800 	mov.w	r8, #0
 8006b38:	e6d5      	b.n	80068e6 <_strtod_l+0x43e>
 8006b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	ea03 0a0a 	and.w	sl, r3, sl
 8006b46:	e7ad      	b.n	8006aa4 <_strtod_l+0x5fc>
 8006b48:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006b4a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006b4c:	2d00      	cmp	r5, #0
 8006b4e:	bfab      	itete	ge
 8006b50:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006b52:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006b54:	18ef      	addge	r7, r5, r3
 8006b56:	1b5e      	sublt	r6, r3, r5
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	bfa8      	it	ge
 8006b5c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006b5e:	eba5 0503 	sub.w	r5, r5, r3
 8006b62:	4415      	add	r5, r2
 8006b64:	4b34      	ldr	r3, [pc, #208]	@ (8006c38 <_strtod_l+0x790>)
 8006b66:	f105 35ff 	add.w	r5, r5, #4294967295
 8006b6a:	bfb8      	it	lt
 8006b6c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006b74:	da50      	bge.n	8006c18 <_strtod_l+0x770>
 8006b76:	1b5b      	subs	r3, r3, r5
 8006b78:	2b1f      	cmp	r3, #31
 8006b7a:	f04f 0101 	mov.w	r1, #1
 8006b7e:	eba2 0203 	sub.w	r2, r2, r3
 8006b82:	dc3d      	bgt.n	8006c00 <_strtod_l+0x758>
 8006b84:	fa01 f303 	lsl.w	r3, r1, r3
 8006b88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b8e:	18bd      	adds	r5, r7, r2
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	42af      	cmp	r7, r5
 8006b94:	4416      	add	r6, r2
 8006b96:	441e      	add	r6, r3
 8006b98:	463b      	mov	r3, r7
 8006b9a:	bfa8      	it	ge
 8006b9c:	462b      	movge	r3, r5
 8006b9e:	42b3      	cmp	r3, r6
 8006ba0:	bfa8      	it	ge
 8006ba2:	4633      	movge	r3, r6
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bfc2      	ittt	gt
 8006ba8:	1aed      	subgt	r5, r5, r3
 8006baa:	1af6      	subgt	r6, r6, r3
 8006bac:	1aff      	subgt	r7, r7, r3
 8006bae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dd16      	ble.n	8006be2 <_strtod_l+0x73a>
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	9805      	ldr	r0, [sp, #20]
 8006bba:	f7ff f9a9 	bl	8005f10 <__pow5mult>
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0b7      	beq.n	8006b34 <_strtod_l+0x68c>
 8006bc4:	4601      	mov	r1, r0
 8006bc6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bc8:	9805      	ldr	r0, [sp, #20]
 8006bca:	f7ff f8ff 	bl	8005dcc <__multiply>
 8006bce:	900a      	str	r0, [sp, #40]	@ 0x28
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f43f ae88 	beq.w	80068e6 <_strtod_l+0x43e>
 8006bd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bd8:	9805      	ldr	r0, [sp, #20]
 8006bda:	f7fe ffe3 	bl	8005ba4 <_Bfree>
 8006bde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006be2:	2d00      	cmp	r5, #0
 8006be4:	dc1d      	bgt.n	8006c22 <_strtod_l+0x77a>
 8006be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dd27      	ble.n	8006c3c <_strtod_l+0x794>
 8006bec:	4649      	mov	r1, r9
 8006bee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006bf0:	9805      	ldr	r0, [sp, #20]
 8006bf2:	f7ff f98d 	bl	8005f10 <__pow5mult>
 8006bf6:	4681      	mov	r9, r0
 8006bf8:	bb00      	cbnz	r0, 8006c3c <_strtod_l+0x794>
 8006bfa:	f04f 0900 	mov.w	r9, #0
 8006bfe:	e672      	b.n	80068e6 <_strtod_l+0x43e>
 8006c00:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006c04:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006c08:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006c0c:	35e2      	adds	r5, #226	@ 0xe2
 8006c0e:	fa01 f305 	lsl.w	r3, r1, r5
 8006c12:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c14:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006c16:	e7ba      	b.n	8006b8e <_strtod_l+0x6e6>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c20:	e7b5      	b.n	8006b8e <_strtod_l+0x6e6>
 8006c22:	462a      	mov	r2, r5
 8006c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c26:	9805      	ldr	r0, [sp, #20]
 8006c28:	f7ff f9cc 	bl	8005fc4 <__lshift>
 8006c2c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d1d9      	bne.n	8006be6 <_strtod_l+0x73e>
 8006c32:	e658      	b.n	80068e6 <_strtod_l+0x43e>
 8006c34:	08008cb8 	.word	0x08008cb8
 8006c38:	fffffc02 	.word	0xfffffc02
 8006c3c:	2e00      	cmp	r6, #0
 8006c3e:	dd07      	ble.n	8006c50 <_strtod_l+0x7a8>
 8006c40:	4649      	mov	r1, r9
 8006c42:	4632      	mov	r2, r6
 8006c44:	9805      	ldr	r0, [sp, #20]
 8006c46:	f7ff f9bd 	bl	8005fc4 <__lshift>
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d0d4      	beq.n	8006bfa <_strtod_l+0x752>
 8006c50:	2f00      	cmp	r7, #0
 8006c52:	dd08      	ble.n	8006c66 <_strtod_l+0x7be>
 8006c54:	4641      	mov	r1, r8
 8006c56:	463a      	mov	r2, r7
 8006c58:	9805      	ldr	r0, [sp, #20]
 8006c5a:	f7ff f9b3 	bl	8005fc4 <__lshift>
 8006c5e:	4680      	mov	r8, r0
 8006c60:	2800      	cmp	r0, #0
 8006c62:	f43f ae40 	beq.w	80068e6 <_strtod_l+0x43e>
 8006c66:	464a      	mov	r2, r9
 8006c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c6a:	9805      	ldr	r0, [sp, #20]
 8006c6c:	f7ff fa32 	bl	80060d4 <__mdiff>
 8006c70:	4604      	mov	r4, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f43f ae37 	beq.w	80068e6 <_strtod_l+0x43e>
 8006c78:	68c3      	ldr	r3, [r0, #12]
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60c3      	str	r3, [r0, #12]
 8006c82:	f7ff fa0b 	bl	800609c <__mcmp>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	da3d      	bge.n	8006d06 <_strtod_l+0x85e>
 8006c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c8c:	ea53 030a 	orrs.w	r3, r3, sl
 8006c90:	d163      	bne.n	8006d5a <_strtod_l+0x8b2>
 8006c92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d15f      	bne.n	8006d5a <_strtod_l+0x8b2>
 8006c9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c9e:	0d1b      	lsrs	r3, r3, #20
 8006ca0:	051b      	lsls	r3, r3, #20
 8006ca2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ca6:	d958      	bls.n	8006d5a <_strtod_l+0x8b2>
 8006ca8:	6963      	ldr	r3, [r4, #20]
 8006caa:	b913      	cbnz	r3, 8006cb2 <_strtod_l+0x80a>
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	dd53      	ble.n	8006d5a <_strtod_l+0x8b2>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	9805      	ldr	r0, [sp, #20]
 8006cb8:	f7ff f984 	bl	8005fc4 <__lshift>
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	f7ff f9ec 	bl	800609c <__mcmp>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	dd48      	ble.n	8006d5a <_strtod_l+0x8b2>
 8006cc8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ccc:	9a08      	ldr	r2, [sp, #32]
 8006cce:	0d1b      	lsrs	r3, r3, #20
 8006cd0:	051b      	lsls	r3, r3, #20
 8006cd2:	2a00      	cmp	r2, #0
 8006cd4:	d062      	beq.n	8006d9c <_strtod_l+0x8f4>
 8006cd6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006cda:	d85f      	bhi.n	8006d9c <_strtod_l+0x8f4>
 8006cdc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ce0:	f67f ae94 	bls.w	8006a0c <_strtod_l+0x564>
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	4ba3      	ldr	r3, [pc, #652]	@ (8006f78 <_strtod_l+0xad0>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f7f9 fbf4 	bl	80004d8 <__aeabi_dmul>
 8006cf0:	4ba2      	ldr	r3, [pc, #648]	@ (8006f7c <_strtod_l+0xad4>)
 8006cf2:	4682      	mov	sl, r0
 8006cf4:	400b      	ands	r3, r1
 8006cf6:	468b      	mov	fp, r1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f adff 	bne.w	80068fc <_strtod_l+0x454>
 8006cfe:	2322      	movs	r3, #34	@ 0x22
 8006d00:	9a05      	ldr	r2, [sp, #20]
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e5fa      	b.n	80068fc <_strtod_l+0x454>
 8006d06:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006d0a:	d165      	bne.n	8006dd8 <_strtod_l+0x930>
 8006d0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006d0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d12:	b35a      	cbz	r2, 8006d6c <_strtod_l+0x8c4>
 8006d14:	4a9a      	ldr	r2, [pc, #616]	@ (8006f80 <_strtod_l+0xad8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d12b      	bne.n	8006d72 <_strtod_l+0x8ca>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	b303      	cbz	r3, 8006d62 <_strtod_l+0x8ba>
 8006d20:	465a      	mov	r2, fp
 8006d22:	4b96      	ldr	r3, [pc, #600]	@ (8006f7c <_strtod_l+0xad4>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2e:	d81b      	bhi.n	8006d68 <_strtod_l+0x8c0>
 8006d30:	0d1b      	lsrs	r3, r3, #20
 8006d32:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d119      	bne.n	8006d72 <_strtod_l+0x8ca>
 8006d3e:	4b91      	ldr	r3, [pc, #580]	@ (8006f84 <_strtod_l+0xadc>)
 8006d40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d102      	bne.n	8006d4c <_strtod_l+0x8a4>
 8006d46:	3101      	adds	r1, #1
 8006d48:	f43f adcd 	beq.w	80068e6 <_strtod_l+0x43e>
 8006d4c:	f04f 0a00 	mov.w	sl, #0
 8006d50:	4b8a      	ldr	r3, [pc, #552]	@ (8006f7c <_strtod_l+0xad4>)
 8006d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d54:	401a      	ands	r2, r3
 8006d56:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1c1      	bne.n	8006ce4 <_strtod_l+0x83c>
 8006d60:	e5cc      	b.n	80068fc <_strtod_l+0x454>
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295
 8006d66:	e7e8      	b.n	8006d3a <_strtod_l+0x892>
 8006d68:	4613      	mov	r3, r2
 8006d6a:	e7e6      	b.n	8006d3a <_strtod_l+0x892>
 8006d6c:	ea53 030a 	orrs.w	r3, r3, sl
 8006d70:	d0aa      	beq.n	8006cc8 <_strtod_l+0x820>
 8006d72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d74:	b1db      	cbz	r3, 8006dae <_strtod_l+0x906>
 8006d76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d78:	4213      	tst	r3, r2
 8006d7a:	d0ee      	beq.n	8006d5a <_strtod_l+0x8b2>
 8006d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d7e:	4650      	mov	r0, sl
 8006d80:	4659      	mov	r1, fp
 8006d82:	9a08      	ldr	r2, [sp, #32]
 8006d84:	b1bb      	cbz	r3, 8006db6 <_strtod_l+0x90e>
 8006d86:	f7ff fb6d 	bl	8006464 <sulp>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d92:	f7f9 f9eb 	bl	800016c <__adddf3>
 8006d96:	4682      	mov	sl, r0
 8006d98:	468b      	mov	fp, r1
 8006d9a:	e7de      	b.n	8006d5a <_strtod_l+0x8b2>
 8006d9c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006da0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006da4:	f04f 3aff 	mov.w	sl, #4294967295
 8006da8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006dac:	e7d5      	b.n	8006d5a <_strtod_l+0x8b2>
 8006dae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006db0:	ea13 0f0a 	tst.w	r3, sl
 8006db4:	e7e1      	b.n	8006d7a <_strtod_l+0x8d2>
 8006db6:	f7ff fb55 	bl	8006464 <sulp>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dc2:	f7f9 f9d1 	bl	8000168 <__aeabi_dsub>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4682      	mov	sl, r0
 8006dcc:	468b      	mov	fp, r1
 8006dce:	f7f9 fdeb 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d0c1      	beq.n	8006d5a <_strtod_l+0x8b2>
 8006dd6:	e619      	b.n	8006a0c <_strtod_l+0x564>
 8006dd8:	4641      	mov	r1, r8
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff face 	bl	800637c <__ratio>
 8006de0:	2200      	movs	r2, #0
 8006de2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	f7f9 fdf1 	bl	80009d0 <__aeabi_dcmple>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d06d      	beq.n	8006ece <_strtod_l+0xa26>
 8006df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d178      	bne.n	8006eea <_strtod_l+0xa42>
 8006df8:	f1ba 0f00 	cmp.w	sl, #0
 8006dfc:	d156      	bne.n	8006eac <_strtod_l+0xa04>
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d158      	bne.n	8006eba <_strtod_l+0xa12>
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8006f88 <_strtod_l+0xae0>)
 8006e10:	f7f9 fdd4 	bl	80009bc <__aeabi_dcmplt>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d157      	bne.n	8006ec8 <_strtod_l+0xa20>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006f8c <_strtod_l+0xae4>)
 8006e20:	f7f9 fb5a 	bl	80004d8 <__aeabi_dmul>
 8006e24:	4606      	mov	r6, r0
 8006e26:	460f      	mov	r7, r1
 8006e28:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006e2c:	9606      	str	r6, [sp, #24]
 8006e2e:	9307      	str	r3, [sp, #28]
 8006e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e34:	4d51      	ldr	r5, [pc, #324]	@ (8006f7c <_strtod_l+0xad4>)
 8006e36:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e3c:	401d      	ands	r5, r3
 8006e3e:	4b54      	ldr	r3, [pc, #336]	@ (8006f90 <_strtod_l+0xae8>)
 8006e40:	429d      	cmp	r5, r3
 8006e42:	f040 80ab 	bne.w	8006f9c <_strtod_l+0xaf4>
 8006e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e48:	4650      	mov	r0, sl
 8006e4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006e4e:	4659      	mov	r1, fp
 8006e50:	f7ff f9d4 	bl	80061fc <__ulp>
 8006e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e58:	f7f9 fb3e 	bl	80004d8 <__aeabi_dmul>
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	465b      	mov	r3, fp
 8006e60:	f7f9 f984 	bl	800016c <__adddf3>
 8006e64:	460b      	mov	r3, r1
 8006e66:	4945      	ldr	r1, [pc, #276]	@ (8006f7c <_strtod_l+0xad4>)
 8006e68:	4a4a      	ldr	r2, [pc, #296]	@ (8006f94 <_strtod_l+0xaec>)
 8006e6a:	4019      	ands	r1, r3
 8006e6c:	4291      	cmp	r1, r2
 8006e6e:	4682      	mov	sl, r0
 8006e70:	d942      	bls.n	8006ef8 <_strtod_l+0xa50>
 8006e72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e74:	4b43      	ldr	r3, [pc, #268]	@ (8006f84 <_strtod_l+0xadc>)
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d103      	bne.n	8006e82 <_strtod_l+0x9da>
 8006e7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	f43f ad32 	beq.w	80068e6 <_strtod_l+0x43e>
 8006e82:	f04f 3aff 	mov.w	sl, #4294967295
 8006e86:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006f84 <_strtod_l+0xadc>
 8006e8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e8c:	9805      	ldr	r0, [sp, #20]
 8006e8e:	f7fe fe89 	bl	8005ba4 <_Bfree>
 8006e92:	4649      	mov	r1, r9
 8006e94:	9805      	ldr	r0, [sp, #20]
 8006e96:	f7fe fe85 	bl	8005ba4 <_Bfree>
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	9805      	ldr	r0, [sp, #20]
 8006e9e:	f7fe fe81 	bl	8005ba4 <_Bfree>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	9805      	ldr	r0, [sp, #20]
 8006ea6:	f7fe fe7d 	bl	8005ba4 <_Bfree>
 8006eaa:	e61c      	b.n	8006ae6 <_strtod_l+0x63e>
 8006eac:	f1ba 0f01 	cmp.w	sl, #1
 8006eb0:	d103      	bne.n	8006eba <_strtod_l+0xa12>
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f43f ada9 	beq.w	8006a0c <_strtod_l+0x564>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4b36      	ldr	r3, [pc, #216]	@ (8006f98 <_strtod_l+0xaf0>)
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ec4:	4f30      	ldr	r7, [pc, #192]	@ (8006f88 <_strtod_l+0xae0>)
 8006ec6:	e7b3      	b.n	8006e30 <_strtod_l+0x988>
 8006ec8:	2600      	movs	r6, #0
 8006eca:	4f30      	ldr	r7, [pc, #192]	@ (8006f8c <_strtod_l+0xae4>)
 8006ecc:	e7ac      	b.n	8006e28 <_strtod_l+0x980>
 8006ece:	4630      	mov	r0, r6
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8006f8c <_strtod_l+0xae4>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f7f9 faff 	bl	80004d8 <__aeabi_dmul>
 8006eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0a1      	beq.n	8006e28 <_strtod_l+0x980>
 8006ee4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006ee8:	e7a2      	b.n	8006e30 <_strtod_l+0x988>
 8006eea:	2200      	movs	r2, #0
 8006eec:	4b26      	ldr	r3, [pc, #152]	@ (8006f88 <_strtod_l+0xae0>)
 8006eee:	4616      	mov	r6, r2
 8006ef0:	461f      	mov	r7, r3
 8006ef2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ef6:	e79b      	b.n	8006e30 <_strtod_l+0x988>
 8006ef8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1c1      	bne.n	8006e8a <_strtod_l+0x9e2>
 8006f06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f0a:	0d1b      	lsrs	r3, r3, #20
 8006f0c:	051b      	lsls	r3, r3, #20
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	d1bb      	bne.n	8006e8a <_strtod_l+0x9e2>
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7fa f885 	bl	8001024 <__aeabi_d2lz>
 8006f1a:	f7f9 faaf 	bl	800047c <__aeabi_l2d>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4630      	mov	r0, r6
 8006f24:	4639      	mov	r1, r7
 8006f26:	f7f9 f91f 	bl	8000168 <__aeabi_dsub>
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006f32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006f36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f38:	ea46 060a 	orr.w	r6, r6, sl
 8006f3c:	431e      	orrs	r6, r3
 8006f3e:	d06a      	beq.n	8007016 <_strtod_l+0xb6e>
 8006f40:	a309      	add	r3, pc, #36	@ (adr r3, 8006f68 <_strtod_l+0xac0>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 fd39 	bl	80009bc <__aeabi_dcmplt>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f47f acd6 	bne.w	80068fc <_strtod_l+0x454>
 8006f50:	a307      	add	r3, pc, #28	@ (adr r3, 8006f70 <_strtod_l+0xac8>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f5a:	f7f9 fd4d 	bl	80009f8 <__aeabi_dcmpgt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d093      	beq.n	8006e8a <_strtod_l+0x9e2>
 8006f62:	e4cb      	b.n	80068fc <_strtod_l+0x454>
 8006f64:	f3af 8000 	nop.w
 8006f68:	94a03595 	.word	0x94a03595
 8006f6c:	3fdfffff 	.word	0x3fdfffff
 8006f70:	35afe535 	.word	0x35afe535
 8006f74:	3fe00000 	.word	0x3fe00000
 8006f78:	39500000 	.word	0x39500000
 8006f7c:	7ff00000 	.word	0x7ff00000
 8006f80:	000fffff 	.word	0x000fffff
 8006f84:	7fefffff 	.word	0x7fefffff
 8006f88:	3ff00000 	.word	0x3ff00000
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	7fe00000 	.word	0x7fe00000
 8006f94:	7c9fffff 	.word	0x7c9fffff
 8006f98:	bff00000 	.word	0xbff00000
 8006f9c:	9b08      	ldr	r3, [sp, #32]
 8006f9e:	b323      	cbz	r3, 8006fea <_strtod_l+0xb42>
 8006fa0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006fa4:	d821      	bhi.n	8006fea <_strtod_l+0xb42>
 8006fa6:	a328      	add	r3, pc, #160	@ (adr r3, 8007048 <_strtod_l+0xba0>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 fd0e 	bl	80009d0 <__aeabi_dcmple>
 8006fb4:	b1a0      	cbz	r0, 8006fe0 <_strtod_l+0xb38>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7f9 fd65 	bl	8000a88 <__aeabi_d2uiz>
 8006fbe:	2801      	cmp	r0, #1
 8006fc0:	bf38      	it	cc
 8006fc2:	2001      	movcc	r0, #1
 8006fc4:	f7f9 fa0e 	bl	80003e4 <__aeabi_ui2d>
 8006fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	b9fb      	cbnz	r3, 8007010 <_strtod_l+0xb68>
 8006fd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006fd4:	9014      	str	r0, [sp, #80]	@ 0x50
 8006fd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8006fd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006fdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006fe0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fe2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006fe6:	1b5b      	subs	r3, r3, r5
 8006fe8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ff2:	f7ff f903 	bl	80061fc <__ulp>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	f7f9 fa6b 	bl	80004d8 <__aeabi_dmul>
 8007002:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007006:	f7f9 f8b1 	bl	800016c <__adddf3>
 800700a:	4682      	mov	sl, r0
 800700c:	468b      	mov	fp, r1
 800700e:	e775      	b.n	8006efc <_strtod_l+0xa54>
 8007010:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007014:	e7e0      	b.n	8006fd8 <_strtod_l+0xb30>
 8007016:	a30e      	add	r3, pc, #56	@ (adr r3, 8007050 <_strtod_l+0xba8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 fcce 	bl	80009bc <__aeabi_dcmplt>
 8007020:	e79d      	b.n	8006f5e <_strtod_l+0xab6>
 8007022:	2300      	movs	r3, #0
 8007024:	930e      	str	r3, [sp, #56]	@ 0x38
 8007026:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007028:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	f7ff ba79 	b.w	8006522 <_strtod_l+0x7a>
 8007030:	2a65      	cmp	r2, #101	@ 0x65
 8007032:	f43f ab72 	beq.w	800671a <_strtod_l+0x272>
 8007036:	2a45      	cmp	r2, #69	@ 0x45
 8007038:	f43f ab6f 	beq.w	800671a <_strtod_l+0x272>
 800703c:	2301      	movs	r3, #1
 800703e:	f7ff bbaa 	b.w	8006796 <_strtod_l+0x2ee>
 8007042:	bf00      	nop
 8007044:	f3af 8000 	nop.w
 8007048:	ffc00000 	.word	0xffc00000
 800704c:	41dfffff 	.word	0x41dfffff
 8007050:	94a03595 	.word	0x94a03595
 8007054:	3fcfffff 	.word	0x3fcfffff

08007058 <_strtod_r>:
 8007058:	4b01      	ldr	r3, [pc, #4]	@ (8007060 <_strtod_r+0x8>)
 800705a:	f7ff ba25 	b.w	80064a8 <_strtod_l>
 800705e:	bf00      	nop
 8007060:	20000068 	.word	0x20000068

08007064 <_strtol_l.isra.0>:
 8007064:	2b24      	cmp	r3, #36	@ 0x24
 8007066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706a:	4686      	mov	lr, r0
 800706c:	4690      	mov	r8, r2
 800706e:	d801      	bhi.n	8007074 <_strtol_l.isra.0+0x10>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d106      	bne.n	8007082 <_strtol_l.isra.0+0x1e>
 8007074:	f7fd fdae 	bl	8004bd4 <__errno>
 8007078:	2316      	movs	r3, #22
 800707a:	6003      	str	r3, [r0, #0]
 800707c:	2000      	movs	r0, #0
 800707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007082:	460d      	mov	r5, r1
 8007084:	4833      	ldr	r0, [pc, #204]	@ (8007154 <_strtol_l.isra.0+0xf0>)
 8007086:	462a      	mov	r2, r5
 8007088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800708c:	5d06      	ldrb	r6, [r0, r4]
 800708e:	f016 0608 	ands.w	r6, r6, #8
 8007092:	d1f8      	bne.n	8007086 <_strtol_l.isra.0+0x22>
 8007094:	2c2d      	cmp	r4, #45	@ 0x2d
 8007096:	d110      	bne.n	80070ba <_strtol_l.isra.0+0x56>
 8007098:	2601      	movs	r6, #1
 800709a:	782c      	ldrb	r4, [r5, #0]
 800709c:	1c95      	adds	r5, r2, #2
 800709e:	f033 0210 	bics.w	r2, r3, #16
 80070a2:	d115      	bne.n	80070d0 <_strtol_l.isra.0+0x6c>
 80070a4:	2c30      	cmp	r4, #48	@ 0x30
 80070a6:	d10d      	bne.n	80070c4 <_strtol_l.isra.0+0x60>
 80070a8:	782a      	ldrb	r2, [r5, #0]
 80070aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070ae:	2a58      	cmp	r2, #88	@ 0x58
 80070b0:	d108      	bne.n	80070c4 <_strtol_l.isra.0+0x60>
 80070b2:	786c      	ldrb	r4, [r5, #1]
 80070b4:	3502      	adds	r5, #2
 80070b6:	2310      	movs	r3, #16
 80070b8:	e00a      	b.n	80070d0 <_strtol_l.isra.0+0x6c>
 80070ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80070bc:	bf04      	itt	eq
 80070be:	782c      	ldrbeq	r4, [r5, #0]
 80070c0:	1c95      	addeq	r5, r2, #2
 80070c2:	e7ec      	b.n	800709e <_strtol_l.isra.0+0x3a>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f6      	bne.n	80070b6 <_strtol_l.isra.0+0x52>
 80070c8:	2c30      	cmp	r4, #48	@ 0x30
 80070ca:	bf14      	ite	ne
 80070cc:	230a      	movne	r3, #10
 80070ce:	2308      	moveq	r3, #8
 80070d0:	2200      	movs	r2, #0
 80070d2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80070d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070da:	fbbc f9f3 	udiv	r9, ip, r3
 80070de:	4610      	mov	r0, r2
 80070e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80070e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80070e8:	2f09      	cmp	r7, #9
 80070ea:	d80f      	bhi.n	800710c <_strtol_l.isra.0+0xa8>
 80070ec:	463c      	mov	r4, r7
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	dd1b      	ble.n	800712a <_strtol_l.isra.0+0xc6>
 80070f2:	1c57      	adds	r7, r2, #1
 80070f4:	d007      	beq.n	8007106 <_strtol_l.isra.0+0xa2>
 80070f6:	4581      	cmp	r9, r0
 80070f8:	d314      	bcc.n	8007124 <_strtol_l.isra.0+0xc0>
 80070fa:	d101      	bne.n	8007100 <_strtol_l.isra.0+0x9c>
 80070fc:	45a2      	cmp	sl, r4
 80070fe:	db11      	blt.n	8007124 <_strtol_l.isra.0+0xc0>
 8007100:	2201      	movs	r2, #1
 8007102:	fb00 4003 	mla	r0, r0, r3, r4
 8007106:	f815 4b01 	ldrb.w	r4, [r5], #1
 800710a:	e7eb      	b.n	80070e4 <_strtol_l.isra.0+0x80>
 800710c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007110:	2f19      	cmp	r7, #25
 8007112:	d801      	bhi.n	8007118 <_strtol_l.isra.0+0xb4>
 8007114:	3c37      	subs	r4, #55	@ 0x37
 8007116:	e7ea      	b.n	80070ee <_strtol_l.isra.0+0x8a>
 8007118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800711c:	2f19      	cmp	r7, #25
 800711e:	d804      	bhi.n	800712a <_strtol_l.isra.0+0xc6>
 8007120:	3c57      	subs	r4, #87	@ 0x57
 8007122:	e7e4      	b.n	80070ee <_strtol_l.isra.0+0x8a>
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	e7ed      	b.n	8007106 <_strtol_l.isra.0+0xa2>
 800712a:	1c53      	adds	r3, r2, #1
 800712c:	d108      	bne.n	8007140 <_strtol_l.isra.0+0xdc>
 800712e:	2322      	movs	r3, #34	@ 0x22
 8007130:	4660      	mov	r0, ip
 8007132:	f8ce 3000 	str.w	r3, [lr]
 8007136:	f1b8 0f00 	cmp.w	r8, #0
 800713a:	d0a0      	beq.n	800707e <_strtol_l.isra.0+0x1a>
 800713c:	1e69      	subs	r1, r5, #1
 800713e:	e006      	b.n	800714e <_strtol_l.isra.0+0xea>
 8007140:	b106      	cbz	r6, 8007144 <_strtol_l.isra.0+0xe0>
 8007142:	4240      	negs	r0, r0
 8007144:	f1b8 0f00 	cmp.w	r8, #0
 8007148:	d099      	beq.n	800707e <_strtol_l.isra.0+0x1a>
 800714a:	2a00      	cmp	r2, #0
 800714c:	d1f6      	bne.n	800713c <_strtol_l.isra.0+0xd8>
 800714e:	f8c8 1000 	str.w	r1, [r8]
 8007152:	e794      	b.n	800707e <_strtol_l.isra.0+0x1a>
 8007154:	08008ce1 	.word	0x08008ce1

08007158 <_strtol_r>:
 8007158:	f7ff bf84 	b.w	8007064 <_strtol_l.isra.0>

0800715c <__ssputs_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	461f      	mov	r7, r3
 8007162:	688e      	ldr	r6, [r1, #8]
 8007164:	4682      	mov	sl, r0
 8007166:	42be      	cmp	r6, r7
 8007168:	460c      	mov	r4, r1
 800716a:	4690      	mov	r8, r2
 800716c:	680b      	ldr	r3, [r1, #0]
 800716e:	d82d      	bhi.n	80071cc <__ssputs_r+0x70>
 8007170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007178:	d026      	beq.n	80071c8 <__ssputs_r+0x6c>
 800717a:	6965      	ldr	r5, [r4, #20]
 800717c:	6909      	ldr	r1, [r1, #16]
 800717e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007182:	eba3 0901 	sub.w	r9, r3, r1
 8007186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800718a:	1c7b      	adds	r3, r7, #1
 800718c:	444b      	add	r3, r9
 800718e:	106d      	asrs	r5, r5, #1
 8007190:	429d      	cmp	r5, r3
 8007192:	bf38      	it	cc
 8007194:	461d      	movcc	r5, r3
 8007196:	0553      	lsls	r3, r2, #21
 8007198:	d527      	bpl.n	80071ea <__ssputs_r+0x8e>
 800719a:	4629      	mov	r1, r5
 800719c:	f7fe fc36 	bl	8005a0c <_malloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	b360      	cbz	r0, 80071fe <__ssputs_r+0xa2>
 80071a4:	464a      	mov	r2, r9
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	f7fd fd4f 	bl	8004c4a <memcpy>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	6126      	str	r6, [r4, #16]
 80071ba:	444e      	add	r6, r9
 80071bc:	6026      	str	r6, [r4, #0]
 80071be:	463e      	mov	r6, r7
 80071c0:	6165      	str	r5, [r4, #20]
 80071c2:	eba5 0509 	sub.w	r5, r5, r9
 80071c6:	60a5      	str	r5, [r4, #8]
 80071c8:	42be      	cmp	r6, r7
 80071ca:	d900      	bls.n	80071ce <__ssputs_r+0x72>
 80071cc:	463e      	mov	r6, r7
 80071ce:	4632      	mov	r2, r6
 80071d0:	4641      	mov	r1, r8
 80071d2:	6820      	ldr	r0, [r4, #0]
 80071d4:	f000 f9c2 	bl	800755c <memmove>
 80071d8:	2000      	movs	r0, #0
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	1b9b      	subs	r3, r3, r6
 80071de:	60a3      	str	r3, [r4, #8]
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	4433      	add	r3, r6
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	462a      	mov	r2, r5
 80071ec:	f000 fd75 	bl	8007cda <_realloc_r>
 80071f0:	4606      	mov	r6, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d1e0      	bne.n	80071b8 <__ssputs_r+0x5c>
 80071f6:	4650      	mov	r0, sl
 80071f8:	6921      	ldr	r1, [r4, #16]
 80071fa:	f7fe fb95 	bl	8005928 <_free_r>
 80071fe:	230c      	movs	r3, #12
 8007200:	f8ca 3000 	str.w	r3, [sl]
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	e7e9      	b.n	80071e6 <__ssputs_r+0x8a>
	...

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	4607      	mov	r7, r0
 800721e:	061b      	lsls	r3, r3, #24
 8007220:	460d      	mov	r5, r1
 8007222:	4614      	mov	r4, r2
 8007224:	b09d      	sub	sp, #116	@ 0x74
 8007226:	d510      	bpl.n	800724a <_svfiprintf_r+0x36>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b973      	cbnz	r3, 800724a <_svfiprintf_r+0x36>
 800722c:	2140      	movs	r1, #64	@ 0x40
 800722e:	f7fe fbed 	bl	8005a0c <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b930      	cbnz	r0, 8007246 <_svfiprintf_r+0x32>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	b01d      	add	sp, #116	@ 0x74
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	2340      	movs	r3, #64	@ 0x40
 8007248:	616b      	str	r3, [r5, #20]
 800724a:	2300      	movs	r3, #0
 800724c:	9309      	str	r3, [sp, #36]	@ 0x24
 800724e:	2320      	movs	r3, #32
 8007250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007254:	2330      	movs	r3, #48	@ 0x30
 8007256:	f04f 0901 	mov.w	r9, #1
 800725a:	f8cd 800c 	str.w	r8, [sp, #12]
 800725e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80073f8 <_svfiprintf_r+0x1e4>
 8007262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007266:	4623      	mov	r3, r4
 8007268:	469a      	mov	sl, r3
 800726a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726e:	b10a      	cbz	r2, 8007274 <_svfiprintf_r+0x60>
 8007270:	2a25      	cmp	r2, #37	@ 0x25
 8007272:	d1f9      	bne.n	8007268 <_svfiprintf_r+0x54>
 8007274:	ebba 0b04 	subs.w	fp, sl, r4
 8007278:	d00b      	beq.n	8007292 <_svfiprintf_r+0x7e>
 800727a:	465b      	mov	r3, fp
 800727c:	4622      	mov	r2, r4
 800727e:	4629      	mov	r1, r5
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff ff6b 	bl	800715c <__ssputs_r>
 8007286:	3001      	adds	r0, #1
 8007288:	f000 80a7 	beq.w	80073da <_svfiprintf_r+0x1c6>
 800728c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800728e:	445a      	add	r2, fp
 8007290:	9209      	str	r2, [sp, #36]	@ 0x24
 8007292:	f89a 3000 	ldrb.w	r3, [sl]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 809f 	beq.w	80073da <_svfiprintf_r+0x1c6>
 800729c:	2300      	movs	r3, #0
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a6:	f10a 0a01 	add.w	sl, sl, #1
 80072aa:	9304      	str	r3, [sp, #16]
 80072ac:	9307      	str	r3, [sp, #28]
 80072ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072b4:	4654      	mov	r4, sl
 80072b6:	2205      	movs	r2, #5
 80072b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072bc:	484e      	ldr	r0, [pc, #312]	@ (80073f8 <_svfiprintf_r+0x1e4>)
 80072be:	f7fd fcb6 	bl	8004c2e <memchr>
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	b9d8      	cbnz	r0, 80072fe <_svfiprintf_r+0xea>
 80072c6:	06d0      	lsls	r0, r2, #27
 80072c8:	bf44      	itt	mi
 80072ca:	2320      	movmi	r3, #32
 80072cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d0:	0711      	lsls	r1, r2, #28
 80072d2:	bf44      	itt	mi
 80072d4:	232b      	movmi	r3, #43	@ 0x2b
 80072d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072da:	f89a 3000 	ldrb.w	r3, [sl]
 80072de:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e0:	d015      	beq.n	800730e <_svfiprintf_r+0xfa>
 80072e2:	4654      	mov	r4, sl
 80072e4:	2000      	movs	r0, #0
 80072e6:	f04f 0c0a 	mov.w	ip, #10
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	4621      	mov	r1, r4
 80072ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f2:	3b30      	subs	r3, #48	@ 0x30
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	d94b      	bls.n	8007390 <_svfiprintf_r+0x17c>
 80072f8:	b1b0      	cbz	r0, 8007328 <_svfiprintf_r+0x114>
 80072fa:	9207      	str	r2, [sp, #28]
 80072fc:	e014      	b.n	8007328 <_svfiprintf_r+0x114>
 80072fe:	eba0 0308 	sub.w	r3, r0, r8
 8007302:	fa09 f303 	lsl.w	r3, r9, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	46a2      	mov	sl, r4
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	e7d2      	b.n	80072b4 <_svfiprintf_r+0xa0>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	1d19      	adds	r1, r3, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfbb      	ittet	lt
 800731a:	425b      	neglt	r3, r3
 800731c:	f042 0202 	orrlt.w	r2, r2, #2
 8007320:	9307      	strge	r3, [sp, #28]
 8007322:	9307      	strlt	r3, [sp, #28]
 8007324:	bfb8      	it	lt
 8007326:	9204      	strlt	r2, [sp, #16]
 8007328:	7823      	ldrb	r3, [r4, #0]
 800732a:	2b2e      	cmp	r3, #46	@ 0x2e
 800732c:	d10a      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732e:	7863      	ldrb	r3, [r4, #1]
 8007330:	2b2a      	cmp	r3, #42	@ 0x2a
 8007332:	d132      	bne.n	800739a <_svfiprintf_r+0x186>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	3402      	adds	r4, #2
 8007338:	1d1a      	adds	r2, r3, #4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	9203      	str	r2, [sp, #12]
 800733e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80073fc <_svfiprintf_r+0x1e8>
 8007348:	2203      	movs	r2, #3
 800734a:	4650      	mov	r0, sl
 800734c:	7821      	ldrb	r1, [r4, #0]
 800734e:	f7fd fc6e 	bl	8004c2e <memchr>
 8007352:	b138      	cbz	r0, 8007364 <_svfiprintf_r+0x150>
 8007354:	2240      	movs	r2, #64	@ 0x40
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	eba0 000a 	sub.w	r0, r0, sl
 800735c:	4082      	lsls	r2, r0
 800735e:	4313      	orrs	r3, r2
 8007360:	3401      	adds	r4, #1
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	2206      	movs	r2, #6
 800736a:	4825      	ldr	r0, [pc, #148]	@ (8007400 <_svfiprintf_r+0x1ec>)
 800736c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007370:	f7fd fc5d 	bl	8004c2e <memchr>
 8007374:	2800      	cmp	r0, #0
 8007376:	d036      	beq.n	80073e6 <_svfiprintf_r+0x1d2>
 8007378:	4b22      	ldr	r3, [pc, #136]	@ (8007404 <_svfiprintf_r+0x1f0>)
 800737a:	bb1b      	cbnz	r3, 80073c4 <_svfiprintf_r+0x1b0>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	3307      	adds	r3, #7
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	3308      	adds	r3, #8
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738a:	4433      	add	r3, r6
 800738c:	9309      	str	r3, [sp, #36]	@ 0x24
 800738e:	e76a      	b.n	8007266 <_svfiprintf_r+0x52>
 8007390:	460c      	mov	r4, r1
 8007392:	2001      	movs	r0, #1
 8007394:	fb0c 3202 	mla	r2, ip, r2, r3
 8007398:	e7a8      	b.n	80072ec <_svfiprintf_r+0xd8>
 800739a:	2300      	movs	r3, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4619      	mov	r1, r3
 80073a2:	3401      	adds	r4, #1
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ac:	3a30      	subs	r2, #48	@ 0x30
 80073ae:	2a09      	cmp	r2, #9
 80073b0:	d903      	bls.n	80073ba <_svfiprintf_r+0x1a6>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c6      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b6:	9105      	str	r1, [sp, #20]
 80073b8:	e7c4      	b.n	8007344 <_svfiprintf_r+0x130>
 80073ba:	4604      	mov	r4, r0
 80073bc:	2301      	movs	r3, #1
 80073be:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c2:	e7f0      	b.n	80073a6 <_svfiprintf_r+0x192>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4638      	mov	r0, r7
 80073cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <_svfiprintf_r+0x1f4>)
 80073ce:	a904      	add	r1, sp, #16
 80073d0:	f7fc fcb0 	bl	8003d34 <_printf_float>
 80073d4:	1c42      	adds	r2, r0, #1
 80073d6:	4606      	mov	r6, r0
 80073d8:	d1d6      	bne.n	8007388 <_svfiprintf_r+0x174>
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	065b      	lsls	r3, r3, #25
 80073de:	f53f af2d 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073e4:	e72c      	b.n	8007240 <_svfiprintf_r+0x2c>
 80073e6:	ab03      	add	r3, sp, #12
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	462a      	mov	r2, r5
 80073ec:	4638      	mov	r0, r7
 80073ee:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <_svfiprintf_r+0x1f4>)
 80073f0:	a904      	add	r1, sp, #16
 80073f2:	f7fc ff3d 	bl	8004270 <_printf_i>
 80073f6:	e7ed      	b.n	80073d4 <_svfiprintf_r+0x1c0>
 80073f8:	08008adf 	.word	0x08008adf
 80073fc:	08008ae5 	.word	0x08008ae5
 8007400:	08008ae9 	.word	0x08008ae9
 8007404:	08003d35 	.word	0x08003d35
 8007408:	0800715d 	.word	0x0800715d

0800740c <__sflush_r>:
 800740c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	0716      	lsls	r6, r2, #28
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	d454      	bmi.n	80074c4 <__sflush_r+0xb8>
 800741a:	684b      	ldr	r3, [r1, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc02      	bgt.n	8007426 <__sflush_r+0x1a>
 8007420:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	dd48      	ble.n	80074b8 <__sflush_r+0xac>
 8007426:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007428:	2e00      	cmp	r6, #0
 800742a:	d045      	beq.n	80074b8 <__sflush_r+0xac>
 800742c:	2300      	movs	r3, #0
 800742e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007432:	682f      	ldr	r7, [r5, #0]
 8007434:	6a21      	ldr	r1, [r4, #32]
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	d030      	beq.n	800749c <__sflush_r+0x90>
 800743a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	0759      	lsls	r1, r3, #29
 8007440:	d505      	bpl.n	800744e <__sflush_r+0x42>
 8007442:	6863      	ldr	r3, [r4, #4]
 8007444:	1ad2      	subs	r2, r2, r3
 8007446:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007448:	b10b      	cbz	r3, 800744e <__sflush_r+0x42>
 800744a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800744c:	1ad2      	subs	r2, r2, r3
 800744e:	2300      	movs	r3, #0
 8007450:	4628      	mov	r0, r5
 8007452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007454:	6a21      	ldr	r1, [r4, #32]
 8007456:	47b0      	blx	r6
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	d106      	bne.n	800746c <__sflush_r+0x60>
 800745e:	6829      	ldr	r1, [r5, #0]
 8007460:	291d      	cmp	r1, #29
 8007462:	d82b      	bhi.n	80074bc <__sflush_r+0xb0>
 8007464:	4a28      	ldr	r2, [pc, #160]	@ (8007508 <__sflush_r+0xfc>)
 8007466:	40ca      	lsrs	r2, r1
 8007468:	07d6      	lsls	r6, r2, #31
 800746a:	d527      	bpl.n	80074bc <__sflush_r+0xb0>
 800746c:	2200      	movs	r2, #0
 800746e:	6062      	str	r2, [r4, #4]
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	04d9      	lsls	r1, r3, #19
 8007474:	6022      	str	r2, [r4, #0]
 8007476:	d504      	bpl.n	8007482 <__sflush_r+0x76>
 8007478:	1c42      	adds	r2, r0, #1
 800747a:	d101      	bne.n	8007480 <__sflush_r+0x74>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b903      	cbnz	r3, 8007482 <__sflush_r+0x76>
 8007480:	6560      	str	r0, [r4, #84]	@ 0x54
 8007482:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007484:	602f      	str	r7, [r5, #0]
 8007486:	b1b9      	cbz	r1, 80074b8 <__sflush_r+0xac>
 8007488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800748c:	4299      	cmp	r1, r3
 800748e:	d002      	beq.n	8007496 <__sflush_r+0x8a>
 8007490:	4628      	mov	r0, r5
 8007492:	f7fe fa49 	bl	8005928 <_free_r>
 8007496:	2300      	movs	r3, #0
 8007498:	6363      	str	r3, [r4, #52]	@ 0x34
 800749a:	e00d      	b.n	80074b8 <__sflush_r+0xac>
 800749c:	2301      	movs	r3, #1
 800749e:	4628      	mov	r0, r5
 80074a0:	47b0      	blx	r6
 80074a2:	4602      	mov	r2, r0
 80074a4:	1c50      	adds	r0, r2, #1
 80074a6:	d1c9      	bne.n	800743c <__sflush_r+0x30>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0c6      	beq.n	800743c <__sflush_r+0x30>
 80074ae:	2b1d      	cmp	r3, #29
 80074b0:	d001      	beq.n	80074b6 <__sflush_r+0xaa>
 80074b2:	2b16      	cmp	r3, #22
 80074b4:	d11d      	bne.n	80074f2 <__sflush_r+0xe6>
 80074b6:	602f      	str	r7, [r5, #0]
 80074b8:	2000      	movs	r0, #0
 80074ba:	e021      	b.n	8007500 <__sflush_r+0xf4>
 80074bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c0:	b21b      	sxth	r3, r3
 80074c2:	e01a      	b.n	80074fa <__sflush_r+0xee>
 80074c4:	690f      	ldr	r7, [r1, #16]
 80074c6:	2f00      	cmp	r7, #0
 80074c8:	d0f6      	beq.n	80074b8 <__sflush_r+0xac>
 80074ca:	0793      	lsls	r3, r2, #30
 80074cc:	bf18      	it	ne
 80074ce:	2300      	movne	r3, #0
 80074d0:	680e      	ldr	r6, [r1, #0]
 80074d2:	bf08      	it	eq
 80074d4:	694b      	ldreq	r3, [r1, #20]
 80074d6:	1bf6      	subs	r6, r6, r7
 80074d8:	600f      	str	r7, [r1, #0]
 80074da:	608b      	str	r3, [r1, #8]
 80074dc:	2e00      	cmp	r6, #0
 80074de:	ddeb      	ble.n	80074b8 <__sflush_r+0xac>
 80074e0:	4633      	mov	r3, r6
 80074e2:	463a      	mov	r2, r7
 80074e4:	4628      	mov	r0, r5
 80074e6:	6a21      	ldr	r1, [r4, #32]
 80074e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80074ec:	47e0      	blx	ip
 80074ee:	2800      	cmp	r0, #0
 80074f0:	dc07      	bgt.n	8007502 <__sflush_r+0xf6>
 80074f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007502:	4407      	add	r7, r0
 8007504:	1a36      	subs	r6, r6, r0
 8007506:	e7e9      	b.n	80074dc <__sflush_r+0xd0>
 8007508:	20400001 	.word	0x20400001

0800750c <_fflush_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	4605      	mov	r5, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b913      	cbnz	r3, 800751c <_fflush_r+0x10>
 8007516:	2500      	movs	r5, #0
 8007518:	4628      	mov	r0, r5
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	b118      	cbz	r0, 8007526 <_fflush_r+0x1a>
 800751e:	6a03      	ldr	r3, [r0, #32]
 8007520:	b90b      	cbnz	r3, 8007526 <_fflush_r+0x1a>
 8007522:	f7fd fa59 	bl	80049d8 <__sinit>
 8007526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f3      	beq.n	8007516 <_fflush_r+0xa>
 800752e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007530:	07d0      	lsls	r0, r2, #31
 8007532:	d404      	bmi.n	800753e <_fflush_r+0x32>
 8007534:	0599      	lsls	r1, r3, #22
 8007536:	d402      	bmi.n	800753e <_fflush_r+0x32>
 8007538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800753a:	f7fd fb76 	bl	8004c2a <__retarget_lock_acquire_recursive>
 800753e:	4628      	mov	r0, r5
 8007540:	4621      	mov	r1, r4
 8007542:	f7ff ff63 	bl	800740c <__sflush_r>
 8007546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007548:	4605      	mov	r5, r0
 800754a:	07da      	lsls	r2, r3, #31
 800754c:	d4e4      	bmi.n	8007518 <_fflush_r+0xc>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	059b      	lsls	r3, r3, #22
 8007552:	d4e1      	bmi.n	8007518 <_fflush_r+0xc>
 8007554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007556:	f7fd fb69 	bl	8004c2c <__retarget_lock_release_recursive>
 800755a:	e7dd      	b.n	8007518 <_fflush_r+0xc>

0800755c <memmove>:
 800755c:	4288      	cmp	r0, r1
 800755e:	b510      	push	{r4, lr}
 8007560:	eb01 0402 	add.w	r4, r1, r2
 8007564:	d902      	bls.n	800756c <memmove+0x10>
 8007566:	4284      	cmp	r4, r0
 8007568:	4623      	mov	r3, r4
 800756a:	d807      	bhi.n	800757c <memmove+0x20>
 800756c:	1e43      	subs	r3, r0, #1
 800756e:	42a1      	cmp	r1, r4
 8007570:	d008      	beq.n	8007584 <memmove+0x28>
 8007572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800757a:	e7f8      	b.n	800756e <memmove+0x12>
 800757c:	4601      	mov	r1, r0
 800757e:	4402      	add	r2, r0
 8007580:	428a      	cmp	r2, r1
 8007582:	d100      	bne.n	8007586 <memmove+0x2a>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800758a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800758e:	e7f7      	b.n	8007580 <memmove+0x24>

08007590 <strncmp>:
 8007590:	b510      	push	{r4, lr}
 8007592:	b16a      	cbz	r2, 80075b0 <strncmp+0x20>
 8007594:	3901      	subs	r1, #1
 8007596:	1884      	adds	r4, r0, r2
 8007598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800759c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d103      	bne.n	80075ac <strncmp+0x1c>
 80075a4:	42a0      	cmp	r0, r4
 80075a6:	d001      	beq.n	80075ac <strncmp+0x1c>
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	d1f5      	bne.n	8007598 <strncmp+0x8>
 80075ac:	1ad0      	subs	r0, r2, r3
 80075ae:	bd10      	pop	{r4, pc}
 80075b0:	4610      	mov	r0, r2
 80075b2:	e7fc      	b.n	80075ae <strncmp+0x1e>

080075b4 <_sbrk_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	2300      	movs	r3, #0
 80075b8:	4d05      	ldr	r5, [pc, #20]	@ (80075d0 <_sbrk_r+0x1c>)
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fa fb9a 	bl	8001cf8 <_sbrk>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_sbrk_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_sbrk_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000818 	.word	0x20000818

080075d4 <nan>:
 80075d4:	2000      	movs	r0, #0
 80075d6:	4901      	ldr	r1, [pc, #4]	@ (80075dc <nan+0x8>)
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	7ff80000 	.word	0x7ff80000

080075e0 <__assert_func>:
 80075e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075e2:	4614      	mov	r4, r2
 80075e4:	461a      	mov	r2, r3
 80075e6:	4b09      	ldr	r3, [pc, #36]	@ (800760c <__assert_func+0x2c>)
 80075e8:	4605      	mov	r5, r0
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68d8      	ldr	r0, [r3, #12]
 80075ee:	b14c      	cbz	r4, 8007604 <__assert_func+0x24>
 80075f0:	4b07      	ldr	r3, [pc, #28]	@ (8007610 <__assert_func+0x30>)
 80075f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075f6:	9100      	str	r1, [sp, #0]
 80075f8:	462b      	mov	r3, r5
 80075fa:	4906      	ldr	r1, [pc, #24]	@ (8007614 <__assert_func+0x34>)
 80075fc:	f000 fba8 	bl	8007d50 <fiprintf>
 8007600:	f000 fbb8 	bl	8007d74 <abort>
 8007604:	4b04      	ldr	r3, [pc, #16]	@ (8007618 <__assert_func+0x38>)
 8007606:	461c      	mov	r4, r3
 8007608:	e7f3      	b.n	80075f2 <__assert_func+0x12>
 800760a:	bf00      	nop
 800760c:	20000018 	.word	0x20000018
 8007610:	08008af8 	.word	0x08008af8
 8007614:	08008b05 	.word	0x08008b05
 8007618:	08008b33 	.word	0x08008b33

0800761c <_calloc_r>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	fba1 5402 	umull	r5, r4, r1, r2
 8007622:	b934      	cbnz	r4, 8007632 <_calloc_r+0x16>
 8007624:	4629      	mov	r1, r5
 8007626:	f7fe f9f1 	bl	8005a0c <_malloc_r>
 800762a:	4606      	mov	r6, r0
 800762c:	b928      	cbnz	r0, 800763a <_calloc_r+0x1e>
 800762e:	4630      	mov	r0, r6
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	220c      	movs	r2, #12
 8007634:	2600      	movs	r6, #0
 8007636:	6002      	str	r2, [r0, #0]
 8007638:	e7f9      	b.n	800762e <_calloc_r+0x12>
 800763a:	462a      	mov	r2, r5
 800763c:	4621      	mov	r1, r4
 800763e:	f7fd fa76 	bl	8004b2e <memset>
 8007642:	e7f4      	b.n	800762e <_calloc_r+0x12>

08007644 <rshift>:
 8007644:	6903      	ldr	r3, [r0, #16]
 8007646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800764a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800764e:	f100 0414 	add.w	r4, r0, #20
 8007652:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007656:	dd46      	ble.n	80076e6 <rshift+0xa2>
 8007658:	f011 011f 	ands.w	r1, r1, #31
 800765c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007664:	d10c      	bne.n	8007680 <rshift+0x3c>
 8007666:	4629      	mov	r1, r5
 8007668:	f100 0710 	add.w	r7, r0, #16
 800766c:	42b1      	cmp	r1, r6
 800766e:	d335      	bcc.n	80076dc <rshift+0x98>
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	1eea      	subs	r2, r5, #3
 8007676:	4296      	cmp	r6, r2
 8007678:	bf38      	it	cc
 800767a:	2300      	movcc	r3, #0
 800767c:	4423      	add	r3, r4
 800767e:	e015      	b.n	80076ac <rshift+0x68>
 8007680:	46a1      	mov	r9, r4
 8007682:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007686:	f1c1 0820 	rsb	r8, r1, #32
 800768a:	40cf      	lsrs	r7, r1
 800768c:	f105 0e04 	add.w	lr, r5, #4
 8007690:	4576      	cmp	r6, lr
 8007692:	46f4      	mov	ip, lr
 8007694:	d816      	bhi.n	80076c4 <rshift+0x80>
 8007696:	1a9a      	subs	r2, r3, r2
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	3a04      	subs	r2, #4
 800769c:	3501      	adds	r5, #1
 800769e:	42ae      	cmp	r6, r5
 80076a0:	bf38      	it	cc
 80076a2:	2200      	movcc	r2, #0
 80076a4:	18a3      	adds	r3, r4, r2
 80076a6:	50a7      	str	r7, [r4, r2]
 80076a8:	b107      	cbz	r7, 80076ac <rshift+0x68>
 80076aa:	3304      	adds	r3, #4
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	eba3 0204 	sub.w	r2, r3, r4
 80076b2:	bf08      	it	eq
 80076b4:	2300      	moveq	r3, #0
 80076b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80076ba:	6102      	str	r2, [r0, #16]
 80076bc:	bf08      	it	eq
 80076be:	6143      	streq	r3, [r0, #20]
 80076c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c4:	f8dc c000 	ldr.w	ip, [ip]
 80076c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80076cc:	ea4c 0707 	orr.w	r7, ip, r7
 80076d0:	f849 7b04 	str.w	r7, [r9], #4
 80076d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076d8:	40cf      	lsrs	r7, r1
 80076da:	e7d9      	b.n	8007690 <rshift+0x4c>
 80076dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80076e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80076e4:	e7c2      	b.n	800766c <rshift+0x28>
 80076e6:	4623      	mov	r3, r4
 80076e8:	e7e0      	b.n	80076ac <rshift+0x68>

080076ea <__hexdig_fun>:
 80076ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d802      	bhi.n	80076f8 <__hexdig_fun+0xe>
 80076f2:	3820      	subs	r0, #32
 80076f4:	b2c0      	uxtb	r0, r0
 80076f6:	4770      	bx	lr
 80076f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80076fc:	2b05      	cmp	r3, #5
 80076fe:	d801      	bhi.n	8007704 <__hexdig_fun+0x1a>
 8007700:	3847      	subs	r0, #71	@ 0x47
 8007702:	e7f7      	b.n	80076f4 <__hexdig_fun+0xa>
 8007704:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007708:	2b05      	cmp	r3, #5
 800770a:	d801      	bhi.n	8007710 <__hexdig_fun+0x26>
 800770c:	3827      	subs	r0, #39	@ 0x27
 800770e:	e7f1      	b.n	80076f4 <__hexdig_fun+0xa>
 8007710:	2000      	movs	r0, #0
 8007712:	4770      	bx	lr

08007714 <__gethex>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	468a      	mov	sl, r1
 800771a:	4690      	mov	r8, r2
 800771c:	b085      	sub	sp, #20
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	680b      	ldr	r3, [r1, #0]
 8007722:	9001      	str	r0, [sp, #4]
 8007724:	1c9c      	adds	r4, r3, #2
 8007726:	46a1      	mov	r9, r4
 8007728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800772c:	2830      	cmp	r0, #48	@ 0x30
 800772e:	d0fa      	beq.n	8007726 <__gethex+0x12>
 8007730:	eba9 0303 	sub.w	r3, r9, r3
 8007734:	f1a3 0b02 	sub.w	fp, r3, #2
 8007738:	f7ff ffd7 	bl	80076ea <__hexdig_fun>
 800773c:	4605      	mov	r5, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	d168      	bne.n	8007814 <__gethex+0x100>
 8007742:	2201      	movs	r2, #1
 8007744:	4648      	mov	r0, r9
 8007746:	499f      	ldr	r1, [pc, #636]	@ (80079c4 <__gethex+0x2b0>)
 8007748:	f7ff ff22 	bl	8007590 <strncmp>
 800774c:	4607      	mov	r7, r0
 800774e:	2800      	cmp	r0, #0
 8007750:	d167      	bne.n	8007822 <__gethex+0x10e>
 8007752:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007756:	4626      	mov	r6, r4
 8007758:	f7ff ffc7 	bl	80076ea <__hexdig_fun>
 800775c:	2800      	cmp	r0, #0
 800775e:	d062      	beq.n	8007826 <__gethex+0x112>
 8007760:	4623      	mov	r3, r4
 8007762:	7818      	ldrb	r0, [r3, #0]
 8007764:	4699      	mov	r9, r3
 8007766:	2830      	cmp	r0, #48	@ 0x30
 8007768:	f103 0301 	add.w	r3, r3, #1
 800776c:	d0f9      	beq.n	8007762 <__gethex+0x4e>
 800776e:	f7ff ffbc 	bl	80076ea <__hexdig_fun>
 8007772:	fab0 f580 	clz	r5, r0
 8007776:	f04f 0b01 	mov.w	fp, #1
 800777a:	096d      	lsrs	r5, r5, #5
 800777c:	464a      	mov	r2, r9
 800777e:	4616      	mov	r6, r2
 8007780:	7830      	ldrb	r0, [r6, #0]
 8007782:	3201      	adds	r2, #1
 8007784:	f7ff ffb1 	bl	80076ea <__hexdig_fun>
 8007788:	2800      	cmp	r0, #0
 800778a:	d1f8      	bne.n	800777e <__gethex+0x6a>
 800778c:	2201      	movs	r2, #1
 800778e:	4630      	mov	r0, r6
 8007790:	498c      	ldr	r1, [pc, #560]	@ (80079c4 <__gethex+0x2b0>)
 8007792:	f7ff fefd 	bl	8007590 <strncmp>
 8007796:	2800      	cmp	r0, #0
 8007798:	d13f      	bne.n	800781a <__gethex+0x106>
 800779a:	b944      	cbnz	r4, 80077ae <__gethex+0x9a>
 800779c:	1c74      	adds	r4, r6, #1
 800779e:	4622      	mov	r2, r4
 80077a0:	4616      	mov	r6, r2
 80077a2:	7830      	ldrb	r0, [r6, #0]
 80077a4:	3201      	adds	r2, #1
 80077a6:	f7ff ffa0 	bl	80076ea <__hexdig_fun>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1f8      	bne.n	80077a0 <__gethex+0x8c>
 80077ae:	1ba4      	subs	r4, r4, r6
 80077b0:	00a7      	lsls	r7, r4, #2
 80077b2:	7833      	ldrb	r3, [r6, #0]
 80077b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80077b8:	2b50      	cmp	r3, #80	@ 0x50
 80077ba:	d13e      	bne.n	800783a <__gethex+0x126>
 80077bc:	7873      	ldrb	r3, [r6, #1]
 80077be:	2b2b      	cmp	r3, #43	@ 0x2b
 80077c0:	d033      	beq.n	800782a <__gethex+0x116>
 80077c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80077c4:	d034      	beq.n	8007830 <__gethex+0x11c>
 80077c6:	2400      	movs	r4, #0
 80077c8:	1c71      	adds	r1, r6, #1
 80077ca:	7808      	ldrb	r0, [r1, #0]
 80077cc:	f7ff ff8d 	bl	80076ea <__hexdig_fun>
 80077d0:	1e43      	subs	r3, r0, #1
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b18      	cmp	r3, #24
 80077d6:	d830      	bhi.n	800783a <__gethex+0x126>
 80077d8:	f1a0 0210 	sub.w	r2, r0, #16
 80077dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077e0:	f7ff ff83 	bl	80076ea <__hexdig_fun>
 80077e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80077e8:	fa5f fc8c 	uxtb.w	ip, ip
 80077ec:	f1bc 0f18 	cmp.w	ip, #24
 80077f0:	f04f 030a 	mov.w	r3, #10
 80077f4:	d91e      	bls.n	8007834 <__gethex+0x120>
 80077f6:	b104      	cbz	r4, 80077fa <__gethex+0xe6>
 80077f8:	4252      	negs	r2, r2
 80077fa:	4417      	add	r7, r2
 80077fc:	f8ca 1000 	str.w	r1, [sl]
 8007800:	b1ed      	cbz	r5, 800783e <__gethex+0x12a>
 8007802:	f1bb 0f00 	cmp.w	fp, #0
 8007806:	bf0c      	ite	eq
 8007808:	2506      	moveq	r5, #6
 800780a:	2500      	movne	r5, #0
 800780c:	4628      	mov	r0, r5
 800780e:	b005      	add	sp, #20
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	2500      	movs	r5, #0
 8007816:	462c      	mov	r4, r5
 8007818:	e7b0      	b.n	800777c <__gethex+0x68>
 800781a:	2c00      	cmp	r4, #0
 800781c:	d1c7      	bne.n	80077ae <__gethex+0x9a>
 800781e:	4627      	mov	r7, r4
 8007820:	e7c7      	b.n	80077b2 <__gethex+0x9e>
 8007822:	464e      	mov	r6, r9
 8007824:	462f      	mov	r7, r5
 8007826:	2501      	movs	r5, #1
 8007828:	e7c3      	b.n	80077b2 <__gethex+0x9e>
 800782a:	2400      	movs	r4, #0
 800782c:	1cb1      	adds	r1, r6, #2
 800782e:	e7cc      	b.n	80077ca <__gethex+0xb6>
 8007830:	2401      	movs	r4, #1
 8007832:	e7fb      	b.n	800782c <__gethex+0x118>
 8007834:	fb03 0002 	mla	r0, r3, r2, r0
 8007838:	e7ce      	b.n	80077d8 <__gethex+0xc4>
 800783a:	4631      	mov	r1, r6
 800783c:	e7de      	b.n	80077fc <__gethex+0xe8>
 800783e:	4629      	mov	r1, r5
 8007840:	eba6 0309 	sub.w	r3, r6, r9
 8007844:	3b01      	subs	r3, #1
 8007846:	2b07      	cmp	r3, #7
 8007848:	dc0a      	bgt.n	8007860 <__gethex+0x14c>
 800784a:	9801      	ldr	r0, [sp, #4]
 800784c:	f7fe f96a 	bl	8005b24 <_Balloc>
 8007850:	4604      	mov	r4, r0
 8007852:	b940      	cbnz	r0, 8007866 <__gethex+0x152>
 8007854:	4602      	mov	r2, r0
 8007856:	21e4      	movs	r1, #228	@ 0xe4
 8007858:	4b5b      	ldr	r3, [pc, #364]	@ (80079c8 <__gethex+0x2b4>)
 800785a:	485c      	ldr	r0, [pc, #368]	@ (80079cc <__gethex+0x2b8>)
 800785c:	f7ff fec0 	bl	80075e0 <__assert_func>
 8007860:	3101      	adds	r1, #1
 8007862:	105b      	asrs	r3, r3, #1
 8007864:	e7ef      	b.n	8007846 <__gethex+0x132>
 8007866:	2300      	movs	r3, #0
 8007868:	f100 0a14 	add.w	sl, r0, #20
 800786c:	4655      	mov	r5, sl
 800786e:	469b      	mov	fp, r3
 8007870:	45b1      	cmp	r9, r6
 8007872:	d337      	bcc.n	80078e4 <__gethex+0x1d0>
 8007874:	f845 bb04 	str.w	fp, [r5], #4
 8007878:	eba5 050a 	sub.w	r5, r5, sl
 800787c:	10ad      	asrs	r5, r5, #2
 800787e:	6125      	str	r5, [r4, #16]
 8007880:	4658      	mov	r0, fp
 8007882:	f7fe fa41 	bl	8005d08 <__hi0bits>
 8007886:	016d      	lsls	r5, r5, #5
 8007888:	f8d8 6000 	ldr.w	r6, [r8]
 800788c:	1a2d      	subs	r5, r5, r0
 800788e:	42b5      	cmp	r5, r6
 8007890:	dd54      	ble.n	800793c <__gethex+0x228>
 8007892:	1bad      	subs	r5, r5, r6
 8007894:	4629      	mov	r1, r5
 8007896:	4620      	mov	r0, r4
 8007898:	f7fe fdc3 	bl	8006422 <__any_on>
 800789c:	4681      	mov	r9, r0
 800789e:	b178      	cbz	r0, 80078c0 <__gethex+0x1ac>
 80078a0:	f04f 0901 	mov.w	r9, #1
 80078a4:	1e6b      	subs	r3, r5, #1
 80078a6:	1159      	asrs	r1, r3, #5
 80078a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80078ac:	f003 021f 	and.w	r2, r3, #31
 80078b0:	fa09 f202 	lsl.w	r2, r9, r2
 80078b4:	420a      	tst	r2, r1
 80078b6:	d003      	beq.n	80078c0 <__gethex+0x1ac>
 80078b8:	454b      	cmp	r3, r9
 80078ba:	dc36      	bgt.n	800792a <__gethex+0x216>
 80078bc:	f04f 0902 	mov.w	r9, #2
 80078c0:	4629      	mov	r1, r5
 80078c2:	4620      	mov	r0, r4
 80078c4:	f7ff febe 	bl	8007644 <rshift>
 80078c8:	442f      	add	r7, r5
 80078ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078ce:	42bb      	cmp	r3, r7
 80078d0:	da42      	bge.n	8007958 <__gethex+0x244>
 80078d2:	4621      	mov	r1, r4
 80078d4:	9801      	ldr	r0, [sp, #4]
 80078d6:	f7fe f965 	bl	8005ba4 <_Bfree>
 80078da:	2300      	movs	r3, #0
 80078dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078de:	25a3      	movs	r5, #163	@ 0xa3
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	e793      	b.n	800780c <__gethex+0xf8>
 80078e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80078e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80078ea:	d012      	beq.n	8007912 <__gethex+0x1fe>
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d104      	bne.n	80078fa <__gethex+0x1e6>
 80078f0:	f845 bb04 	str.w	fp, [r5], #4
 80078f4:	f04f 0b00 	mov.w	fp, #0
 80078f8:	465b      	mov	r3, fp
 80078fa:	7830      	ldrb	r0, [r6, #0]
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	f7ff fef4 	bl	80076ea <__hexdig_fun>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	f000 000f 	and.w	r0, r0, #15
 8007908:	4098      	lsls	r0, r3
 800790a:	ea4b 0b00 	orr.w	fp, fp, r0
 800790e:	3304      	adds	r3, #4
 8007910:	e7ae      	b.n	8007870 <__gethex+0x15c>
 8007912:	45b1      	cmp	r9, r6
 8007914:	d8ea      	bhi.n	80078ec <__gethex+0x1d8>
 8007916:	2201      	movs	r2, #1
 8007918:	4630      	mov	r0, r6
 800791a:	492a      	ldr	r1, [pc, #168]	@ (80079c4 <__gethex+0x2b0>)
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	f7ff fe37 	bl	8007590 <strncmp>
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	2800      	cmp	r0, #0
 8007926:	d1e1      	bne.n	80078ec <__gethex+0x1d8>
 8007928:	e7a2      	b.n	8007870 <__gethex+0x15c>
 800792a:	4620      	mov	r0, r4
 800792c:	1ea9      	subs	r1, r5, #2
 800792e:	f7fe fd78 	bl	8006422 <__any_on>
 8007932:	2800      	cmp	r0, #0
 8007934:	d0c2      	beq.n	80078bc <__gethex+0x1a8>
 8007936:	f04f 0903 	mov.w	r9, #3
 800793a:	e7c1      	b.n	80078c0 <__gethex+0x1ac>
 800793c:	da09      	bge.n	8007952 <__gethex+0x23e>
 800793e:	1b75      	subs	r5, r6, r5
 8007940:	4621      	mov	r1, r4
 8007942:	462a      	mov	r2, r5
 8007944:	9801      	ldr	r0, [sp, #4]
 8007946:	f7fe fb3d 	bl	8005fc4 <__lshift>
 800794a:	4604      	mov	r4, r0
 800794c:	1b7f      	subs	r7, r7, r5
 800794e:	f100 0a14 	add.w	sl, r0, #20
 8007952:	f04f 0900 	mov.w	r9, #0
 8007956:	e7b8      	b.n	80078ca <__gethex+0x1b6>
 8007958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800795c:	42bd      	cmp	r5, r7
 800795e:	dd6f      	ble.n	8007a40 <__gethex+0x32c>
 8007960:	1bed      	subs	r5, r5, r7
 8007962:	42ae      	cmp	r6, r5
 8007964:	dc34      	bgt.n	80079d0 <__gethex+0x2bc>
 8007966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d022      	beq.n	80079b4 <__gethex+0x2a0>
 800796e:	2b03      	cmp	r3, #3
 8007970:	d024      	beq.n	80079bc <__gethex+0x2a8>
 8007972:	2b01      	cmp	r3, #1
 8007974:	d115      	bne.n	80079a2 <__gethex+0x28e>
 8007976:	42ae      	cmp	r6, r5
 8007978:	d113      	bne.n	80079a2 <__gethex+0x28e>
 800797a:	2e01      	cmp	r6, #1
 800797c:	d10b      	bne.n	8007996 <__gethex+0x282>
 800797e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007982:	9a02      	ldr	r2, [sp, #8]
 8007984:	2562      	movs	r5, #98	@ 0x62
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	2301      	movs	r3, #1
 800798a:	6123      	str	r3, [r4, #16]
 800798c:	f8ca 3000 	str.w	r3, [sl]
 8007990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007992:	601c      	str	r4, [r3, #0]
 8007994:	e73a      	b.n	800780c <__gethex+0xf8>
 8007996:	4620      	mov	r0, r4
 8007998:	1e71      	subs	r1, r6, #1
 800799a:	f7fe fd42 	bl	8006422 <__any_on>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1ed      	bne.n	800797e <__gethex+0x26a>
 80079a2:	4621      	mov	r1, r4
 80079a4:	9801      	ldr	r0, [sp, #4]
 80079a6:	f7fe f8fd 	bl	8005ba4 <_Bfree>
 80079aa:	2300      	movs	r3, #0
 80079ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ae:	2550      	movs	r5, #80	@ 0x50
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e72b      	b.n	800780c <__gethex+0xf8>
 80079b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f3      	bne.n	80079a2 <__gethex+0x28e>
 80079ba:	e7e0      	b.n	800797e <__gethex+0x26a>
 80079bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1dd      	bne.n	800797e <__gethex+0x26a>
 80079c2:	e7ee      	b.n	80079a2 <__gethex+0x28e>
 80079c4:	08008add 	.word	0x08008add
 80079c8:	08008a73 	.word	0x08008a73
 80079cc:	08008b34 	.word	0x08008b34
 80079d0:	1e6f      	subs	r7, r5, #1
 80079d2:	f1b9 0f00 	cmp.w	r9, #0
 80079d6:	d130      	bne.n	8007a3a <__gethex+0x326>
 80079d8:	b127      	cbz	r7, 80079e4 <__gethex+0x2d0>
 80079da:	4639      	mov	r1, r7
 80079dc:	4620      	mov	r0, r4
 80079de:	f7fe fd20 	bl	8006422 <__any_on>
 80079e2:	4681      	mov	r9, r0
 80079e4:	2301      	movs	r3, #1
 80079e6:	4629      	mov	r1, r5
 80079e8:	1b76      	subs	r6, r6, r5
 80079ea:	2502      	movs	r5, #2
 80079ec:	117a      	asrs	r2, r7, #5
 80079ee:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80079f2:	f007 071f 	and.w	r7, r7, #31
 80079f6:	40bb      	lsls	r3, r7
 80079f8:	4213      	tst	r3, r2
 80079fa:	4620      	mov	r0, r4
 80079fc:	bf18      	it	ne
 80079fe:	f049 0902 	orrne.w	r9, r9, #2
 8007a02:	f7ff fe1f 	bl	8007644 <rshift>
 8007a06:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007a0a:	f1b9 0f00 	cmp.w	r9, #0
 8007a0e:	d047      	beq.n	8007aa0 <__gethex+0x38c>
 8007a10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d015      	beq.n	8007a44 <__gethex+0x330>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d017      	beq.n	8007a4c <__gethex+0x338>
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d109      	bne.n	8007a34 <__gethex+0x320>
 8007a20:	f019 0f02 	tst.w	r9, #2
 8007a24:	d006      	beq.n	8007a34 <__gethex+0x320>
 8007a26:	f8da 3000 	ldr.w	r3, [sl]
 8007a2a:	ea49 0903 	orr.w	r9, r9, r3
 8007a2e:	f019 0f01 	tst.w	r9, #1
 8007a32:	d10e      	bne.n	8007a52 <__gethex+0x33e>
 8007a34:	f045 0510 	orr.w	r5, r5, #16
 8007a38:	e032      	b.n	8007aa0 <__gethex+0x38c>
 8007a3a:	f04f 0901 	mov.w	r9, #1
 8007a3e:	e7d1      	b.n	80079e4 <__gethex+0x2d0>
 8007a40:	2501      	movs	r5, #1
 8007a42:	e7e2      	b.n	8007a0a <__gethex+0x2f6>
 8007a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a46:	f1c3 0301 	rsb	r3, r3, #1
 8007a4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f0      	beq.n	8007a34 <__gethex+0x320>
 8007a52:	f04f 0c00 	mov.w	ip, #0
 8007a56:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a5a:	f104 0314 	add.w	r3, r4, #20
 8007a5e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a62:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007a70:	d01b      	beq.n	8007aaa <__gethex+0x396>
 8007a72:	3201      	adds	r2, #1
 8007a74:	6002      	str	r2, [r0, #0]
 8007a76:	2d02      	cmp	r5, #2
 8007a78:	f104 0314 	add.w	r3, r4, #20
 8007a7c:	d13c      	bne.n	8007af8 <__gethex+0x3e4>
 8007a7e:	f8d8 2000 	ldr.w	r2, [r8]
 8007a82:	3a01      	subs	r2, #1
 8007a84:	42b2      	cmp	r2, r6
 8007a86:	d109      	bne.n	8007a9c <__gethex+0x388>
 8007a88:	2201      	movs	r2, #1
 8007a8a:	1171      	asrs	r1, r6, #5
 8007a8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a90:	f006 061f 	and.w	r6, r6, #31
 8007a94:	fa02 f606 	lsl.w	r6, r2, r6
 8007a98:	421e      	tst	r6, r3
 8007a9a:	d13a      	bne.n	8007b12 <__gethex+0x3fe>
 8007a9c:	f045 0520 	orr.w	r5, r5, #32
 8007aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa2:	601c      	str	r4, [r3, #0]
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	601f      	str	r7, [r3, #0]
 8007aa8:	e6b0      	b.n	800780c <__gethex+0xf8>
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ab0:	d8d9      	bhi.n	8007a66 <__gethex+0x352>
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	459b      	cmp	fp, r3
 8007ab6:	db17      	blt.n	8007ae8 <__gethex+0x3d4>
 8007ab8:	6861      	ldr	r1, [r4, #4]
 8007aba:	9801      	ldr	r0, [sp, #4]
 8007abc:	3101      	adds	r1, #1
 8007abe:	f7fe f831 	bl	8005b24 <_Balloc>
 8007ac2:	4681      	mov	r9, r0
 8007ac4:	b918      	cbnz	r0, 8007ace <__gethex+0x3ba>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	2184      	movs	r1, #132	@ 0x84
 8007aca:	4b19      	ldr	r3, [pc, #100]	@ (8007b30 <__gethex+0x41c>)
 8007acc:	e6c5      	b.n	800785a <__gethex+0x146>
 8007ace:	6922      	ldr	r2, [r4, #16]
 8007ad0:	f104 010c 	add.w	r1, r4, #12
 8007ad4:	3202      	adds	r2, #2
 8007ad6:	0092      	lsls	r2, r2, #2
 8007ad8:	300c      	adds	r0, #12
 8007ada:	f7fd f8b6 	bl	8004c4a <memcpy>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	9801      	ldr	r0, [sp, #4]
 8007ae2:	f7fe f85f 	bl	8005ba4 <_Bfree>
 8007ae6:	464c      	mov	r4, r9
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	6122      	str	r2, [r4, #16]
 8007aee:	2201      	movs	r2, #1
 8007af0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007af4:	615a      	str	r2, [r3, #20]
 8007af6:	e7be      	b.n	8007a76 <__gethex+0x362>
 8007af8:	6922      	ldr	r2, [r4, #16]
 8007afa:	455a      	cmp	r2, fp
 8007afc:	dd0b      	ble.n	8007b16 <__gethex+0x402>
 8007afe:	2101      	movs	r1, #1
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7ff fd9f 	bl	8007644 <rshift>
 8007b06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b0a:	3701      	adds	r7, #1
 8007b0c:	42bb      	cmp	r3, r7
 8007b0e:	f6ff aee0 	blt.w	80078d2 <__gethex+0x1be>
 8007b12:	2501      	movs	r5, #1
 8007b14:	e7c2      	b.n	8007a9c <__gethex+0x388>
 8007b16:	f016 061f 	ands.w	r6, r6, #31
 8007b1a:	d0fa      	beq.n	8007b12 <__gethex+0x3fe>
 8007b1c:	4453      	add	r3, sl
 8007b1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007b22:	f7fe f8f1 	bl	8005d08 <__hi0bits>
 8007b26:	f1c6 0620 	rsb	r6, r6, #32
 8007b2a:	42b0      	cmp	r0, r6
 8007b2c:	dbe7      	blt.n	8007afe <__gethex+0x3ea>
 8007b2e:	e7f0      	b.n	8007b12 <__gethex+0x3fe>
 8007b30:	08008a73 	.word	0x08008a73

08007b34 <L_shift>:
 8007b34:	f1c2 0208 	rsb	r2, r2, #8
 8007b38:	0092      	lsls	r2, r2, #2
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	f1c2 0620 	rsb	r6, r2, #32
 8007b40:	6843      	ldr	r3, [r0, #4]
 8007b42:	6804      	ldr	r4, [r0, #0]
 8007b44:	fa03 f506 	lsl.w	r5, r3, r6
 8007b48:	432c      	orrs	r4, r5
 8007b4a:	40d3      	lsrs	r3, r2
 8007b4c:	6004      	str	r4, [r0, #0]
 8007b4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b52:	4288      	cmp	r0, r1
 8007b54:	d3f4      	bcc.n	8007b40 <L_shift+0xc>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}

08007b58 <__match>:
 8007b58:	b530      	push	{r4, r5, lr}
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	b914      	cbnz	r4, 8007b6a <__match+0x12>
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	2001      	movs	r0, #1
 8007b68:	bd30      	pop	{r4, r5, pc}
 8007b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007b72:	2d19      	cmp	r5, #25
 8007b74:	bf98      	it	ls
 8007b76:	3220      	addls	r2, #32
 8007b78:	42a2      	cmp	r2, r4
 8007b7a:	d0f0      	beq.n	8007b5e <__match+0x6>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7f3      	b.n	8007b68 <__match+0x10>

08007b80 <__hexnan>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	2500      	movs	r5, #0
 8007b86:	680b      	ldr	r3, [r1, #0]
 8007b88:	4682      	mov	sl, r0
 8007b8a:	115e      	asrs	r6, r3, #5
 8007b8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b90:	f013 031f 	ands.w	r3, r3, #31
 8007b94:	bf18      	it	ne
 8007b96:	3604      	addne	r6, #4
 8007b98:	1f37      	subs	r7, r6, #4
 8007b9a:	4690      	mov	r8, r2
 8007b9c:	46b9      	mov	r9, r7
 8007b9e:	463c      	mov	r4, r7
 8007ba0:	46ab      	mov	fp, r5
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	6801      	ldr	r1, [r0, #0]
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007bac:	9502      	str	r5, [sp, #8]
 8007bae:	784a      	ldrb	r2, [r1, #1]
 8007bb0:	1c4b      	adds	r3, r1, #1
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	b342      	cbz	r2, 8007c08 <__hexnan+0x88>
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	9105      	str	r1, [sp, #20]
 8007bba:	9204      	str	r2, [sp, #16]
 8007bbc:	f7ff fd95 	bl	80076ea <__hexdig_fun>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d151      	bne.n	8007c68 <__hexnan+0xe8>
 8007bc4:	9a04      	ldr	r2, [sp, #16]
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	2a20      	cmp	r2, #32
 8007bca:	d818      	bhi.n	8007bfe <__hexnan+0x7e>
 8007bcc:	9b02      	ldr	r3, [sp, #8]
 8007bce:	459b      	cmp	fp, r3
 8007bd0:	dd13      	ble.n	8007bfa <__hexnan+0x7a>
 8007bd2:	454c      	cmp	r4, r9
 8007bd4:	d206      	bcs.n	8007be4 <__hexnan+0x64>
 8007bd6:	2d07      	cmp	r5, #7
 8007bd8:	dc04      	bgt.n	8007be4 <__hexnan+0x64>
 8007bda:	462a      	mov	r2, r5
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff ffa8 	bl	8007b34 <L_shift>
 8007be4:	4544      	cmp	r4, r8
 8007be6:	d952      	bls.n	8007c8e <__hexnan+0x10e>
 8007be8:	2300      	movs	r3, #0
 8007bea:	f1a4 0904 	sub.w	r9, r4, #4
 8007bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	464c      	mov	r4, r9
 8007bf6:	f8cd b008 	str.w	fp, [sp, #8]
 8007bfa:	9903      	ldr	r1, [sp, #12]
 8007bfc:	e7d7      	b.n	8007bae <__hexnan+0x2e>
 8007bfe:	2a29      	cmp	r2, #41	@ 0x29
 8007c00:	d157      	bne.n	8007cb2 <__hexnan+0x132>
 8007c02:	3102      	adds	r1, #2
 8007c04:	f8ca 1000 	str.w	r1, [sl]
 8007c08:	f1bb 0f00 	cmp.w	fp, #0
 8007c0c:	d051      	beq.n	8007cb2 <__hexnan+0x132>
 8007c0e:	454c      	cmp	r4, r9
 8007c10:	d206      	bcs.n	8007c20 <__hexnan+0xa0>
 8007c12:	2d07      	cmp	r5, #7
 8007c14:	dc04      	bgt.n	8007c20 <__hexnan+0xa0>
 8007c16:	462a      	mov	r2, r5
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff ff8a 	bl	8007b34 <L_shift>
 8007c20:	4544      	cmp	r4, r8
 8007c22:	d936      	bls.n	8007c92 <__hexnan+0x112>
 8007c24:	4623      	mov	r3, r4
 8007c26:	f1a8 0204 	sub.w	r2, r8, #4
 8007c2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c2e:	429f      	cmp	r7, r3
 8007c30:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c34:	d2f9      	bcs.n	8007c2a <__hexnan+0xaa>
 8007c36:	1b3b      	subs	r3, r7, r4
 8007c38:	f023 0303 	bic.w	r3, r3, #3
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	3401      	adds	r4, #1
 8007c40:	3e03      	subs	r6, #3
 8007c42:	42b4      	cmp	r4, r6
 8007c44:	bf88      	it	hi
 8007c46:	2304      	movhi	r3, #4
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4443      	add	r3, r8
 8007c4c:	f843 2b04 	str.w	r2, [r3], #4
 8007c50:	429f      	cmp	r7, r3
 8007c52:	d2fb      	bcs.n	8007c4c <__hexnan+0xcc>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	b91b      	cbnz	r3, 8007c60 <__hexnan+0xe0>
 8007c58:	4547      	cmp	r7, r8
 8007c5a:	d128      	bne.n	8007cae <__hexnan+0x12e>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	2005      	movs	r0, #5
 8007c62:	b007      	add	sp, #28
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	3501      	adds	r5, #1
 8007c6a:	2d08      	cmp	r5, #8
 8007c6c:	f10b 0b01 	add.w	fp, fp, #1
 8007c70:	dd06      	ble.n	8007c80 <__hexnan+0x100>
 8007c72:	4544      	cmp	r4, r8
 8007c74:	d9c1      	bls.n	8007bfa <__hexnan+0x7a>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2501      	movs	r5, #1
 8007c7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c7e:	3c04      	subs	r4, #4
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	f000 000f 	and.w	r0, r0, #15
 8007c86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007c8a:	6020      	str	r0, [r4, #0]
 8007c8c:	e7b5      	b.n	8007bfa <__hexnan+0x7a>
 8007c8e:	2508      	movs	r5, #8
 8007c90:	e7b3      	b.n	8007bfa <__hexnan+0x7a>
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0dd      	beq.n	8007c54 <__hexnan+0xd4>
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	f1c3 0320 	rsb	r3, r3, #32
 8007ca0:	40da      	lsrs	r2, r3
 8007ca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007cac:	e7d2      	b.n	8007c54 <__hexnan+0xd4>
 8007cae:	3f04      	subs	r7, #4
 8007cb0:	e7d0      	b.n	8007c54 <__hexnan+0xd4>
 8007cb2:	2004      	movs	r0, #4
 8007cb4:	e7d5      	b.n	8007c62 <__hexnan+0xe2>

08007cb6 <__ascii_mbtowc>:
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	b901      	cbnz	r1, 8007cbc <__ascii_mbtowc+0x6>
 8007cba:	a901      	add	r1, sp, #4
 8007cbc:	b142      	cbz	r2, 8007cd0 <__ascii_mbtowc+0x1a>
 8007cbe:	b14b      	cbz	r3, 8007cd4 <__ascii_mbtowc+0x1e>
 8007cc0:	7813      	ldrb	r3, [r2, #0]
 8007cc2:	600b      	str	r3, [r1, #0]
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	1e10      	subs	r0, r2, #0
 8007cc8:	bf18      	it	ne
 8007cca:	2001      	movne	r0, #1
 8007ccc:	b002      	add	sp, #8
 8007cce:	4770      	bx	lr
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	e7fb      	b.n	8007ccc <__ascii_mbtowc+0x16>
 8007cd4:	f06f 0001 	mvn.w	r0, #1
 8007cd8:	e7f8      	b.n	8007ccc <__ascii_mbtowc+0x16>

08007cda <_realloc_r>:
 8007cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cde:	4607      	mov	r7, r0
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	b921      	cbnz	r1, 8007cf0 <_realloc_r+0x16>
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cec:	f7fd be8e 	b.w	8005a0c <_malloc_r>
 8007cf0:	b92a      	cbnz	r2, 8007cfe <_realloc_r+0x24>
 8007cf2:	f7fd fe19 	bl	8005928 <_free_r>
 8007cf6:	4625      	mov	r5, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfe:	f000 f840 	bl	8007d82 <_malloc_usable_size_r>
 8007d02:	4284      	cmp	r4, r0
 8007d04:	4606      	mov	r6, r0
 8007d06:	d802      	bhi.n	8007d0e <_realloc_r+0x34>
 8007d08:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d0c:	d8f4      	bhi.n	8007cf8 <_realloc_r+0x1e>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7fd fe7b 	bl	8005a0c <_malloc_r>
 8007d16:	4680      	mov	r8, r0
 8007d18:	b908      	cbnz	r0, 8007d1e <_realloc_r+0x44>
 8007d1a:	4645      	mov	r5, r8
 8007d1c:	e7ec      	b.n	8007cf8 <_realloc_r+0x1e>
 8007d1e:	42b4      	cmp	r4, r6
 8007d20:	4622      	mov	r2, r4
 8007d22:	4629      	mov	r1, r5
 8007d24:	bf28      	it	cs
 8007d26:	4632      	movcs	r2, r6
 8007d28:	f7fc ff8f 	bl	8004c4a <memcpy>
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7fd fdfa 	bl	8005928 <_free_r>
 8007d34:	e7f1      	b.n	8007d1a <_realloc_r+0x40>

08007d36 <__ascii_wctomb>:
 8007d36:	4603      	mov	r3, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	b141      	cbz	r1, 8007d4e <__ascii_wctomb+0x18>
 8007d3c:	2aff      	cmp	r2, #255	@ 0xff
 8007d3e:	d904      	bls.n	8007d4a <__ascii_wctomb+0x14>
 8007d40:	228a      	movs	r2, #138	@ 0x8a
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	4770      	bx	lr
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	700a      	strb	r2, [r1, #0]
 8007d4e:	4770      	bx	lr

08007d50 <fiprintf>:
 8007d50:	b40e      	push	{r1, r2, r3}
 8007d52:	b503      	push	{r0, r1, lr}
 8007d54:	4601      	mov	r1, r0
 8007d56:	ab03      	add	r3, sp, #12
 8007d58:	4805      	ldr	r0, [pc, #20]	@ (8007d70 <fiprintf+0x20>)
 8007d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d5e:	6800      	ldr	r0, [r0, #0]
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f000 f83d 	bl	8007de0 <_vfiprintf_r>
 8007d66:	b002      	add	sp, #8
 8007d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d6c:	b003      	add	sp, #12
 8007d6e:	4770      	bx	lr
 8007d70:	20000018 	.word	0x20000018

08007d74 <abort>:
 8007d74:	2006      	movs	r0, #6
 8007d76:	b508      	push	{r3, lr}
 8007d78:	f000 fa06 	bl	8008188 <raise>
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	f7f9 ff46 	bl	8001c0e <_exit>

08007d82 <_malloc_usable_size_r>:
 8007d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d86:	1f18      	subs	r0, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfbc      	itt	lt
 8007d8c:	580b      	ldrlt	r3, [r1, r0]
 8007d8e:	18c0      	addlt	r0, r0, r3
 8007d90:	4770      	bx	lr

08007d92 <__sfputc_r>:
 8007d92:	6893      	ldr	r3, [r2, #8]
 8007d94:	b410      	push	{r4}
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	6093      	str	r3, [r2, #8]
 8007d9c:	da07      	bge.n	8007dae <__sfputc_r+0x1c>
 8007d9e:	6994      	ldr	r4, [r2, #24]
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	db01      	blt.n	8007da8 <__sfputc_r+0x16>
 8007da4:	290a      	cmp	r1, #10
 8007da6:	d102      	bne.n	8007dae <__sfputc_r+0x1c>
 8007da8:	bc10      	pop	{r4}
 8007daa:	f000 b931 	b.w	8008010 <__swbuf_r>
 8007dae:	6813      	ldr	r3, [r2, #0]
 8007db0:	1c58      	adds	r0, r3, #1
 8007db2:	6010      	str	r0, [r2, #0]
 8007db4:	7019      	strb	r1, [r3, #0]
 8007db6:	4608      	mov	r0, r1
 8007db8:	bc10      	pop	{r4}
 8007dba:	4770      	bx	lr

08007dbc <__sfputs_r>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	4614      	mov	r4, r2
 8007dc4:	18d5      	adds	r5, r2, r3
 8007dc6:	42ac      	cmp	r4, r5
 8007dc8:	d101      	bne.n	8007dce <__sfputs_r+0x12>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e007      	b.n	8007dde <__sfputs_r+0x22>
 8007dce:	463a      	mov	r2, r7
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd6:	f7ff ffdc 	bl	8007d92 <__sfputc_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d1f3      	bne.n	8007dc6 <__sfputs_r+0xa>
 8007dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007de0 <_vfiprintf_r>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	460d      	mov	r5, r1
 8007de6:	4614      	mov	r4, r2
 8007de8:	4698      	mov	r8, r3
 8007dea:	4606      	mov	r6, r0
 8007dec:	b09d      	sub	sp, #116	@ 0x74
 8007dee:	b118      	cbz	r0, 8007df8 <_vfiprintf_r+0x18>
 8007df0:	6a03      	ldr	r3, [r0, #32]
 8007df2:	b90b      	cbnz	r3, 8007df8 <_vfiprintf_r+0x18>
 8007df4:	f7fc fdf0 	bl	80049d8 <__sinit>
 8007df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dfa:	07d9      	lsls	r1, r3, #31
 8007dfc:	d405      	bmi.n	8007e0a <_vfiprintf_r+0x2a>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	059a      	lsls	r2, r3, #22
 8007e02:	d402      	bmi.n	8007e0a <_vfiprintf_r+0x2a>
 8007e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e06:	f7fc ff10 	bl	8004c2a <__retarget_lock_acquire_recursive>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	071b      	lsls	r3, r3, #28
 8007e0e:	d501      	bpl.n	8007e14 <_vfiprintf_r+0x34>
 8007e10:	692b      	ldr	r3, [r5, #16]
 8007e12:	b99b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x5c>
 8007e14:	4629      	mov	r1, r5
 8007e16:	4630      	mov	r0, r6
 8007e18:	f000 f938 	bl	800808c <__swsetup_r>
 8007e1c:	b170      	cbz	r0, 8007e3c <_vfiprintf_r+0x5c>
 8007e1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e20:	07dc      	lsls	r4, r3, #31
 8007e22:	d504      	bpl.n	8007e2e <_vfiprintf_r+0x4e>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	b01d      	add	sp, #116	@ 0x74
 8007e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2e:	89ab      	ldrh	r3, [r5, #12]
 8007e30:	0598      	lsls	r0, r3, #22
 8007e32:	d4f7      	bmi.n	8007e24 <_vfiprintf_r+0x44>
 8007e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e36:	f7fc fef9 	bl	8004c2c <__retarget_lock_release_recursive>
 8007e3a:	e7f3      	b.n	8007e24 <_vfiprintf_r+0x44>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e40:	2320      	movs	r3, #32
 8007e42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e46:	2330      	movs	r3, #48	@ 0x30
 8007e48:	f04f 0901 	mov.w	r9, #1
 8007e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e50:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007ffc <_vfiprintf_r+0x21c>
 8007e54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e58:	4623      	mov	r3, r4
 8007e5a:	469a      	mov	sl, r3
 8007e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e60:	b10a      	cbz	r2, 8007e66 <_vfiprintf_r+0x86>
 8007e62:	2a25      	cmp	r2, #37	@ 0x25
 8007e64:	d1f9      	bne.n	8007e5a <_vfiprintf_r+0x7a>
 8007e66:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6a:	d00b      	beq.n	8007e84 <_vfiprintf_r+0xa4>
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	4622      	mov	r2, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ffa2 	bl	8007dbc <__sfputs_r>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f000 80a7 	beq.w	8007fcc <_vfiprintf_r+0x1ec>
 8007e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e80:	445a      	add	r2, fp
 8007e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e84:	f89a 3000 	ldrb.w	r3, [sl]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 809f 	beq.w	8007fcc <_vfiprintf_r+0x1ec>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f04f 32ff 	mov.w	r2, #4294967295
 8007e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e98:	f10a 0a01 	add.w	sl, sl, #1
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	9307      	str	r3, [sp, #28]
 8007ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ea6:	4654      	mov	r4, sl
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eae:	4853      	ldr	r0, [pc, #332]	@ (8007ffc <_vfiprintf_r+0x21c>)
 8007eb0:	f7fc febd 	bl	8004c2e <memchr>
 8007eb4:	9a04      	ldr	r2, [sp, #16]
 8007eb6:	b9d8      	cbnz	r0, 8007ef0 <_vfiprintf_r+0x110>
 8007eb8:	06d1      	lsls	r1, r2, #27
 8007eba:	bf44      	itt	mi
 8007ebc:	2320      	movmi	r3, #32
 8007ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ec2:	0713      	lsls	r3, r2, #28
 8007ec4:	bf44      	itt	mi
 8007ec6:	232b      	movmi	r3, #43	@ 0x2b
 8007ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ed2:	d015      	beq.n	8007f00 <_vfiprintf_r+0x120>
 8007ed4:	4654      	mov	r4, sl
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f04f 0c0a 	mov.w	ip, #10
 8007edc:	9a07      	ldr	r2, [sp, #28]
 8007ede:	4621      	mov	r1, r4
 8007ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee4:	3b30      	subs	r3, #48	@ 0x30
 8007ee6:	2b09      	cmp	r3, #9
 8007ee8:	d94b      	bls.n	8007f82 <_vfiprintf_r+0x1a2>
 8007eea:	b1b0      	cbz	r0, 8007f1a <_vfiprintf_r+0x13a>
 8007eec:	9207      	str	r2, [sp, #28]
 8007eee:	e014      	b.n	8007f1a <_vfiprintf_r+0x13a>
 8007ef0:	eba0 0308 	sub.w	r3, r0, r8
 8007ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	46a2      	mov	sl, r4
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	e7d2      	b.n	8007ea6 <_vfiprintf_r+0xc6>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	1d19      	adds	r1, r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	9103      	str	r1, [sp, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbb      	ittet	lt
 8007f0c:	425b      	neglt	r3, r3
 8007f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f12:	9307      	strge	r3, [sp, #28]
 8007f14:	9307      	strlt	r3, [sp, #28]
 8007f16:	bfb8      	it	lt
 8007f18:	9204      	strlt	r2, [sp, #16]
 8007f1a:	7823      	ldrb	r3, [r4, #0]
 8007f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f1e:	d10a      	bne.n	8007f36 <_vfiprintf_r+0x156>
 8007f20:	7863      	ldrb	r3, [r4, #1]
 8007f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f24:	d132      	bne.n	8007f8c <_vfiprintf_r+0x1ac>
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	3402      	adds	r4, #2
 8007f2a:	1d1a      	adds	r2, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9203      	str	r2, [sp, #12]
 8007f30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008000 <_vfiprintf_r+0x220>
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	4650      	mov	r0, sl
 8007f3e:	7821      	ldrb	r1, [r4, #0]
 8007f40:	f7fc fe75 	bl	8004c2e <memchr>
 8007f44:	b138      	cbz	r0, 8007f56 <_vfiprintf_r+0x176>
 8007f46:	2240      	movs	r2, #64	@ 0x40
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	eba0 000a 	sub.w	r0, r0, sl
 8007f4e:	4082      	lsls	r2, r0
 8007f50:	4313      	orrs	r3, r2
 8007f52:	3401      	adds	r4, #1
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5a:	2206      	movs	r2, #6
 8007f5c:	4829      	ldr	r0, [pc, #164]	@ (8008004 <_vfiprintf_r+0x224>)
 8007f5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f62:	f7fc fe64 	bl	8004c2e <memchr>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d03f      	beq.n	8007fea <_vfiprintf_r+0x20a>
 8007f6a:	4b27      	ldr	r3, [pc, #156]	@ (8008008 <_vfiprintf_r+0x228>)
 8007f6c:	bb1b      	cbnz	r3, 8007fb6 <_vfiprintf_r+0x1d6>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	3307      	adds	r3, #7
 8007f72:	f023 0307 	bic.w	r3, r3, #7
 8007f76:	3308      	adds	r3, #8
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	443b      	add	r3, r7
 8007f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f80:	e76a      	b.n	8007e58 <_vfiprintf_r+0x78>
 8007f82:	460c      	mov	r4, r1
 8007f84:	2001      	movs	r0, #1
 8007f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8a:	e7a8      	b.n	8007ede <_vfiprintf_r+0xfe>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f04f 0c0a 	mov.w	ip, #10
 8007f92:	4619      	mov	r1, r3
 8007f94:	3401      	adds	r4, #1
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f9e:	3a30      	subs	r2, #48	@ 0x30
 8007fa0:	2a09      	cmp	r2, #9
 8007fa2:	d903      	bls.n	8007fac <_vfiprintf_r+0x1cc>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0c6      	beq.n	8007f36 <_vfiprintf_r+0x156>
 8007fa8:	9105      	str	r1, [sp, #20]
 8007faa:	e7c4      	b.n	8007f36 <_vfiprintf_r+0x156>
 8007fac:	4604      	mov	r4, r0
 8007fae:	2301      	movs	r3, #1
 8007fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb4:	e7f0      	b.n	8007f98 <_vfiprintf_r+0x1b8>
 8007fb6:	ab03      	add	r3, sp, #12
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	462a      	mov	r2, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	4b13      	ldr	r3, [pc, #76]	@ (800800c <_vfiprintf_r+0x22c>)
 8007fc0:	a904      	add	r1, sp, #16
 8007fc2:	f7fb feb7 	bl	8003d34 <_printf_float>
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	1c78      	adds	r0, r7, #1
 8007fca:	d1d6      	bne.n	8007f7a <_vfiprintf_r+0x19a>
 8007fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fce:	07d9      	lsls	r1, r3, #31
 8007fd0:	d405      	bmi.n	8007fde <_vfiprintf_r+0x1fe>
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	059a      	lsls	r2, r3, #22
 8007fd6:	d402      	bmi.n	8007fde <_vfiprintf_r+0x1fe>
 8007fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fda:	f7fc fe27 	bl	8004c2c <__retarget_lock_release_recursive>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	065b      	lsls	r3, r3, #25
 8007fe2:	f53f af1f 	bmi.w	8007e24 <_vfiprintf_r+0x44>
 8007fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fe8:	e71e      	b.n	8007e28 <_vfiprintf_r+0x48>
 8007fea:	ab03      	add	r3, sp, #12
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	462a      	mov	r2, r5
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4b06      	ldr	r3, [pc, #24]	@ (800800c <_vfiprintf_r+0x22c>)
 8007ff4:	a904      	add	r1, sp, #16
 8007ff6:	f7fc f93b 	bl	8004270 <_printf_i>
 8007ffa:	e7e4      	b.n	8007fc6 <_vfiprintf_r+0x1e6>
 8007ffc:	08008adf 	.word	0x08008adf
 8008000:	08008ae5 	.word	0x08008ae5
 8008004:	08008ae9 	.word	0x08008ae9
 8008008:	08003d35 	.word	0x08003d35
 800800c:	08007dbd 	.word	0x08007dbd

08008010 <__swbuf_r>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	460e      	mov	r6, r1
 8008014:	4614      	mov	r4, r2
 8008016:	4605      	mov	r5, r0
 8008018:	b118      	cbz	r0, 8008022 <__swbuf_r+0x12>
 800801a:	6a03      	ldr	r3, [r0, #32]
 800801c:	b90b      	cbnz	r3, 8008022 <__swbuf_r+0x12>
 800801e:	f7fc fcdb 	bl	80049d8 <__sinit>
 8008022:	69a3      	ldr	r3, [r4, #24]
 8008024:	60a3      	str	r3, [r4, #8]
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	071a      	lsls	r2, r3, #28
 800802a:	d501      	bpl.n	8008030 <__swbuf_r+0x20>
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	b943      	cbnz	r3, 8008042 <__swbuf_r+0x32>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f82a 	bl	800808c <__swsetup_r>
 8008038:	b118      	cbz	r0, 8008042 <__swbuf_r+0x32>
 800803a:	f04f 37ff 	mov.w	r7, #4294967295
 800803e:	4638      	mov	r0, r7
 8008040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	6922      	ldr	r2, [r4, #16]
 8008046:	b2f6      	uxtb	r6, r6
 8008048:	1a98      	subs	r0, r3, r2
 800804a:	6963      	ldr	r3, [r4, #20]
 800804c:	4637      	mov	r7, r6
 800804e:	4283      	cmp	r3, r0
 8008050:	dc05      	bgt.n	800805e <__swbuf_r+0x4e>
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff fa59 	bl	800750c <_fflush_r>
 800805a:	2800      	cmp	r0, #0
 800805c:	d1ed      	bne.n	800803a <__swbuf_r+0x2a>
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	3b01      	subs	r3, #1
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	6022      	str	r2, [r4, #0]
 800806a:	701e      	strb	r6, [r3, #0]
 800806c:	6962      	ldr	r2, [r4, #20]
 800806e:	1c43      	adds	r3, r0, #1
 8008070:	429a      	cmp	r2, r3
 8008072:	d004      	beq.n	800807e <__swbuf_r+0x6e>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	07db      	lsls	r3, r3, #31
 8008078:	d5e1      	bpl.n	800803e <__swbuf_r+0x2e>
 800807a:	2e0a      	cmp	r6, #10
 800807c:	d1df      	bne.n	800803e <__swbuf_r+0x2e>
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f7ff fa43 	bl	800750c <_fflush_r>
 8008086:	2800      	cmp	r0, #0
 8008088:	d0d9      	beq.n	800803e <__swbuf_r+0x2e>
 800808a:	e7d6      	b.n	800803a <__swbuf_r+0x2a>

0800808c <__swsetup_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4b29      	ldr	r3, [pc, #164]	@ (8008134 <__swsetup_r+0xa8>)
 8008090:	4605      	mov	r5, r0
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	460c      	mov	r4, r1
 8008096:	b118      	cbz	r0, 80080a0 <__swsetup_r+0x14>
 8008098:	6a03      	ldr	r3, [r0, #32]
 800809a:	b90b      	cbnz	r3, 80080a0 <__swsetup_r+0x14>
 800809c:	f7fc fc9c 	bl	80049d8 <__sinit>
 80080a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a4:	0719      	lsls	r1, r3, #28
 80080a6:	d422      	bmi.n	80080ee <__swsetup_r+0x62>
 80080a8:	06da      	lsls	r2, r3, #27
 80080aa:	d407      	bmi.n	80080bc <__swsetup_r+0x30>
 80080ac:	2209      	movs	r2, #9
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	e033      	b.n	8008124 <__swsetup_r+0x98>
 80080bc:	0758      	lsls	r0, r3, #29
 80080be:	d512      	bpl.n	80080e6 <__swsetup_r+0x5a>
 80080c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080c2:	b141      	cbz	r1, 80080d6 <__swsetup_r+0x4a>
 80080c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080c8:	4299      	cmp	r1, r3
 80080ca:	d002      	beq.n	80080d2 <__swsetup_r+0x46>
 80080cc:	4628      	mov	r0, r5
 80080ce:	f7fd fc2b 	bl	8005928 <_free_r>
 80080d2:	2300      	movs	r3, #0
 80080d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	2300      	movs	r3, #0
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f043 0308 	orr.w	r3, r3, #8
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	b94b      	cbnz	r3, 8008106 <__swsetup_r+0x7a>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fc:	d003      	beq.n	8008106 <__swsetup_r+0x7a>
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 f882 	bl	800820a <__smakebuf_r>
 8008106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810a:	f013 0201 	ands.w	r2, r3, #1
 800810e:	d00a      	beq.n	8008126 <__swsetup_r+0x9a>
 8008110:	2200      	movs	r2, #0
 8008112:	60a2      	str	r2, [r4, #8]
 8008114:	6962      	ldr	r2, [r4, #20]
 8008116:	4252      	negs	r2, r2
 8008118:	61a2      	str	r2, [r4, #24]
 800811a:	6922      	ldr	r2, [r4, #16]
 800811c:	b942      	cbnz	r2, 8008130 <__swsetup_r+0xa4>
 800811e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008122:	d1c5      	bne.n	80080b0 <__swsetup_r+0x24>
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	0799      	lsls	r1, r3, #30
 8008128:	bf58      	it	pl
 800812a:	6962      	ldrpl	r2, [r4, #20]
 800812c:	60a2      	str	r2, [r4, #8]
 800812e:	e7f4      	b.n	800811a <__swsetup_r+0x8e>
 8008130:	2000      	movs	r0, #0
 8008132:	e7f7      	b.n	8008124 <__swsetup_r+0x98>
 8008134:	20000018 	.word	0x20000018

08008138 <_raise_r>:
 8008138:	291f      	cmp	r1, #31
 800813a:	b538      	push	{r3, r4, r5, lr}
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
 8008140:	d904      	bls.n	800814c <_raise_r+0x14>
 8008142:	2316      	movs	r3, #22
 8008144:	6003      	str	r3, [r0, #0]
 8008146:	f04f 30ff 	mov.w	r0, #4294967295
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800814e:	b112      	cbz	r2, 8008156 <_raise_r+0x1e>
 8008150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008154:	b94b      	cbnz	r3, 800816a <_raise_r+0x32>
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f830 	bl	80081bc <_getpid_r>
 800815c:	4622      	mov	r2, r4
 800815e:	4601      	mov	r1, r0
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008166:	f000 b817 	b.w	8008198 <_kill_r>
 800816a:	2b01      	cmp	r3, #1
 800816c:	d00a      	beq.n	8008184 <_raise_r+0x4c>
 800816e:	1c59      	adds	r1, r3, #1
 8008170:	d103      	bne.n	800817a <_raise_r+0x42>
 8008172:	2316      	movs	r3, #22
 8008174:	6003      	str	r3, [r0, #0]
 8008176:	2001      	movs	r0, #1
 8008178:	e7e7      	b.n	800814a <_raise_r+0x12>
 800817a:	2100      	movs	r1, #0
 800817c:	4620      	mov	r0, r4
 800817e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008182:	4798      	blx	r3
 8008184:	2000      	movs	r0, #0
 8008186:	e7e0      	b.n	800814a <_raise_r+0x12>

08008188 <raise>:
 8008188:	4b02      	ldr	r3, [pc, #8]	@ (8008194 <raise+0xc>)
 800818a:	4601      	mov	r1, r0
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f7ff bfd3 	b.w	8008138 <_raise_r>
 8008192:	bf00      	nop
 8008194:	20000018 	.word	0x20000018

08008198 <_kill_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	2300      	movs	r3, #0
 800819c:	4d06      	ldr	r5, [pc, #24]	@ (80081b8 <_kill_r+0x20>)
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	f7f9 fd22 	bl	8001bee <_kill>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	d102      	bne.n	80081b4 <_kill_r+0x1c>
 80081ae:	682b      	ldr	r3, [r5, #0]
 80081b0:	b103      	cbz	r3, 80081b4 <_kill_r+0x1c>
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	20000818 	.word	0x20000818

080081bc <_getpid_r>:
 80081bc:	f7f9 bd10 	b.w	8001be0 <_getpid>

080081c0 <__swhatbuf_r>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	460c      	mov	r4, r1
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	4615      	mov	r5, r2
 80081ca:	2900      	cmp	r1, #0
 80081cc:	461e      	mov	r6, r3
 80081ce:	b096      	sub	sp, #88	@ 0x58
 80081d0:	da0c      	bge.n	80081ec <__swhatbuf_r+0x2c>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	2100      	movs	r1, #0
 80081d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081da:	bf14      	ite	ne
 80081dc:	2340      	movne	r3, #64	@ 0x40
 80081de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081e2:	2000      	movs	r0, #0
 80081e4:	6031      	str	r1, [r6, #0]
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	b016      	add	sp, #88	@ 0x58
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	466a      	mov	r2, sp
 80081ee:	f000 f849 	bl	8008284 <_fstat_r>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	dbed      	blt.n	80081d2 <__swhatbuf_r+0x12>
 80081f6:	9901      	ldr	r1, [sp, #4]
 80081f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008200:	4259      	negs	r1, r3
 8008202:	4159      	adcs	r1, r3
 8008204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008208:	e7eb      	b.n	80081e2 <__swhatbuf_r+0x22>

0800820a <__smakebuf_r>:
 800820a:	898b      	ldrh	r3, [r1, #12]
 800820c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800820e:	079d      	lsls	r5, r3, #30
 8008210:	4606      	mov	r6, r0
 8008212:	460c      	mov	r4, r1
 8008214:	d507      	bpl.n	8008226 <__smakebuf_r+0x1c>
 8008216:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	6123      	str	r3, [r4, #16]
 800821e:	2301      	movs	r3, #1
 8008220:	6163      	str	r3, [r4, #20]
 8008222:	b003      	add	sp, #12
 8008224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008226:	466a      	mov	r2, sp
 8008228:	ab01      	add	r3, sp, #4
 800822a:	f7ff ffc9 	bl	80081c0 <__swhatbuf_r>
 800822e:	9f00      	ldr	r7, [sp, #0]
 8008230:	4605      	mov	r5, r0
 8008232:	4639      	mov	r1, r7
 8008234:	4630      	mov	r0, r6
 8008236:	f7fd fbe9 	bl	8005a0c <_malloc_r>
 800823a:	b948      	cbnz	r0, 8008250 <__smakebuf_r+0x46>
 800823c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d4ee      	bmi.n	8008222 <__smakebuf_r+0x18>
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	f043 0302 	orr.w	r3, r3, #2
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	e7e2      	b.n	8008216 <__smakebuf_r+0xc>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	6020      	str	r0, [r4, #0]
 8008260:	b15b      	cbz	r3, 800827a <__smakebuf_r+0x70>
 8008262:	4630      	mov	r0, r6
 8008264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008268:	f000 f81e 	bl	80082a8 <_isatty_r>
 800826c:	b128      	cbz	r0, 800827a <__smakebuf_r+0x70>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f023 0303 	bic.w	r3, r3, #3
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	431d      	orrs	r5, r3
 800827e:	81a5      	strh	r5, [r4, #12]
 8008280:	e7cf      	b.n	8008222 <__smakebuf_r+0x18>
	...

08008284 <_fstat_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	2300      	movs	r3, #0
 8008288:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_fstat_r+0x20>)
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7f9 fd0b 	bl	8001cac <_fstat>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_fstat_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_fstat_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20000818 	.word	0x20000818

080082a8 <_isatty_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	2300      	movs	r3, #0
 80082ac:	4d05      	ldr	r5, [pc, #20]	@ (80082c4 <_isatty_r+0x1c>)
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7f9 fd09 	bl	8001cca <_isatty>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_isatty_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_isatty_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20000818 	.word	0x20000818

080082c8 <_init>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	bf00      	nop
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr

080082d4 <_fini>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr
